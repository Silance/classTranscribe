[{"text":"so usually we think about our programs as just turning into one single process","width":225},{"text":"now i am going to show you some systems programming magic","width":187},{"text":"where actually we can turn our single process into two","width":187},{"text":"here is how we are going to do it","width":128},{"text":"let us have a very simple program that says hello world","width":216},{"text":"and here it is","width":138},{"text":"so between these two lines however","width":215},{"text":"i am going to call fork","width":250},{"text":"and here's a surprise","width":269},{"text":"we get hello world world","width":108},{"text":"yes we get two worlds","width":63},{"text":"why is that","width":118},{"text":"well at the beginning there was a single process","width":148},{"text":"but then we called fork and now our single process is actually being cloned","width":297},{"text":"it has been split into two","width":111},{"text":"so both the processes print out world","width":164},{"text":"and so we see both their output on our little terminal here","width":249},{"text":"okay what else can we do with this","width":137},{"text":"so let us first of all show that there really are two different processes","width":192},{"text":"i am going to look at their processor id","width":287},{"text":"and we will print it out","width":225},{"text":"so i will call getpid()","width":102},{"text":"and you will see that yeah i have got two different processes","width":275},{"text":"both trying to run at the same time","width":168},{"text":"in fact i have got a parent child relationship here","width":308},{"text":"i have got the original process","width":128},{"text":"the parent","width":63},{"text":"and you can think of fork as saying let us clone this original process right here right now","width":375},{"text":"so that i get a child that looks just like me","width":153},{"text":"or at least almost like me","width":111},{"text":"in many many respects","width":63},{"text":"it is the same memory","width":152},{"text":"it has got it's own variables","width":63},{"text":"but because its got its own address space","width":184},{"text":"what the child now does in terms of its memory is seperate from the parents","width":419},{"text":"okay so let's show you what we can then do with this","width":343},{"text":"first of all fork actually returns something here","width":170},{"text":"it actually returns back an id","width":157},{"text":"so let's make a note of that","width":188},{"text":"and we'll print it out","width":124},{"text":"so we'll say %d and we'll print out just here","width":433},{"text":"okay so here is what we see","width":314},{"text":"that the process id 681 has fork value of 682","width":539},{"text":"and process 682 has a fork return value of 0","width":347},{"text":"so the fork value is different for the parent and the child","width":345},{"text":"and in fact fork","width":136},{"text":"if it returns a positive number is talking to the parent","width":275},{"text":"and telling the parent here is the id number for your child","width":304},{"text":"so let us make a note of that","width":201},{"text":"let us call this child","width":63},{"text":"here is my child","width":63},{"text":"so i can call my child","width":149},{"text":"and then i can write an if statement to decide if i am the parent or the newly created child or not","width":410},{"text":"so we will say look if the childid what i return from fork is actually greater than 0","width":537},{"text":"then i am the parent","width":197},{"text":"so let us put something like hey i'm the grouchy parent","width":401},{"text":"if it is zero however then hey I'm the carefree child!","width":1026},{"text":"so we will let's remove this ","width":294},{"text":"i'll get rid of that line now","width":63},{"text":"okay so now we have a little program where the parent and child are going to do two different things","width":388},{"text":"and in fact it is standard for the parent to wait for the child to finish","width":451},{"text":"we don't have to but quite often we need the child process to do something for us","width":436},{"text":"perhaps in the background","width":63},{"text":"but we don't actually want to continue until the child has finished","width":256},{"text":"so let us do that","width":93},{"text":"what i am going to wait for my child to finish","width":261},{"text":"so i am going to say waitpid and i need to say okay what is the id i need to wait on well here is the childid","width":634},{"text":"and later on i can ask for some status information about my child","width":315},{"text":"and for now the last argument i am just going to put as 0","width":155},{"text":"so i need to have a variable called status","width":249},{"text":"and in fact we are going to pass not just the value of status but the address of our little variable","width":482},{"text":"and later on we can use that to find out say did our child exit normally or was it terminated in a surprising way","width":492},{"text":"so let us run this now and what we will expect to see is that we'll wait for the child to finish before we print I","width":542},{"text":"I'm the grouchy parent","width":63},{"text":"so let us run this","width":191},{"text":"okay so this time the child process got to print out I'm the carefree child","width":619},{"text":"then it exited","width":81},{"text":"meanwhile the parent was waiting for the async condition and when that happened","width":377},{"text":"the parent is able to continue and is able to print I'm the grouchy parent","width":378},{"text":"so i want to finish on a common programming error that can really bring down a server","width":595},{"text":"and that is suppose we made many many many processes","width":354},{"text":"so it is one thing to create a few","width":202},{"text":"let's call say fork a couple of times and perhaps you can guess how many worlds we'll see here","width":741},{"text":"that's right we see four world","width":326},{"text":"and in fact the parent finished early so this is the hash of the terminal saying what would you like to do now","width":596},{"text":"but we had four processes all printing out world","width":165},{"text":"and if we had three forks now we have eight","width":342},{"text":"okay so let us make something now called a fork bomb which is where we keep creating lots and lots of processes","width":550},{"text":"and this often happens by accident by people who are new to systems programming","width":326},{"text":"but just for fun because i am just doing this inside a browser it doesn't matter if i bring my little virtual machine to a halt","width":582},{"text":"i can always just reload the page","width":114},{"text":"so let us print out my id","width":617},{"text":"i will put this in a little loop that says while one let us fork","width":345},{"text":"let us print out my process id","width":247},{"text":"and then i will sleep two seconds","width":522},{"text":"so initially i have two processes","width":164},{"text":"and then each of those processes call fork","width":195},{"text":"so we got four","width":63},{"text":"and then each of those processes call fork","width":152},{"text":"prints it out and sleeps","width":63},{"text":"and so every two seconds i am doubling the number of processes that are in my system","width":358},{"text":"so that is a lot of processes","width":91},{"text":"and in fact pretty soon the kernel will run out of space","width":338},{"text":"it won't be able to keep track of any more processes","width":113},{"text":"and fork will stop working","width":261},{"text":"and now we see here's the kernel printing out all sorts of debug messages","width":222},{"text":"desperately trying to make the system stable again","width":190},{"text":"as it arbitrarily starts to kill processes in an attempt to recover some memory and space in its process tables","width":498},{"text":"so amazingly my little kernel here has managed to recover to the point to where i have a working system","width":514},{"text":"but that is fork bombs and you should avoid from accidentally doing this","width":351},{"text":"otherwise you will have a system administrator telling you that you cannot log onto that machine anymore","width":311},{"text":"okay have fun and i'll see you in the next video","width":227},{"text":"bye","width":63}]