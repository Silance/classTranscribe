Okay so this assignment actually what it did, it assigned the value of p to a20 from whatever it was before. Fine so there is any questions about ampersand. Alright, I have a question to you. What is the return type of this operator? yeah. So if I put ... okay another question I said that operator ampersand [...] any variable so I could say ampersand p and the input is p and ampersand strips off the address of that variable and returns the address so the output type is ... memory address which is a constant. It is constant value so that will be important. So, the output of this returns a40 and it is a constant. It is just a string of hex numbers. It is value of that address, okay. That will be important in a little bit.  So the next operator we are going to be using is called deference operator and its symbol is asterisk ( * ) and it takes one input variable as well, a variable and the return is it takes the variable, follows the pointer and returns whatever variable is stored at that location. So the output is not a constant anymore. it is variable which means we can assign two to it. I am gonna assign five thousand to it. Whats gonna happen after that? Upon this execution of this line, the system will do the following it will follow the address of the value stored at p and assign to whatever value stored at that location five thousand. So now the next line is cout x. What is gonna print out? Five thousand, okay. Very strange stuff right. Because we didn't really modify x. So pointers allow us reach to the variables that the hold or point to right. And through the first operator the address operator we connected x and p through some ways and both address operator and deference operator help us going back and forth between those variables in some way but its not very symmetric way in some sense. So, I have a question to you, the next question is what happens if I do the following statements ... if I make ... following statement ... sorry another question who will c++ interpret this? ... so it will start working from left to right. It will take p and give it as argument to asterisk (*). The output of the asterisk is what follow the pointer and the return whatever is stored at that pointer which is x. A variable stored at that pointer and then that output value is passed to the ampersand (&) and then ampersand (&) takes the input variable x and strips off its address and result will a20, a constant. Which means we can assign it to say p. What will happen after that assignment? Will p change? No. It will evaluate the  right hand side and assign it to the p. So essentially it will evaluate the right hand side remove overwrite the old value of p of a20 with new computed right hand side which is a20 right. thats cool. so I would I expect then that something like this would make sense. and lets see if that can be interpreted by the system in any way. 