What am I trying to illustrate there? Do you like that? ...PNGs are big, right? And when we say that they know how to copy themselves we mean that they are making an independent copy of the data associated with them. For large objects that is a cost you are incurring so this act of creating an independent copy of this PNG comes at a cost. But, okay, maybe that's what we mean and that's what happens by default. PNGs or whatever type you are dealing with know how to copy itself, sort of like the inductive assumption, you assume it to be true. And then finally of course, booleans know how to copy themselves. And now we have this new object whose name is a and values are copies of b's. We choose that when we execute the following two lines of code we set benny to ann and when we do b.getName() we get benny. Any question about that all? [In the first line, when you declare face a and b, we are calling the constructor of a as well. So when you assign a to b you destruct a and create a new face, or do you call some kind of copy inside of a] So the question is all about what really happens, okay? And the observation is - look - this isn't just a declaration but constructors happen there too, and, with great intuition, he's going, well wait, if there's stuff that's hiding behind the scenes there, maybe there's stuff that's hiding behind the scenes here as well and are we sure that it's what we really want it to be. And my answer to you is in this case, we can just take it at face value that all the private members know how to copy themselves. Will there be instances where we will need to redefine what it means to make an assignment the answer is absolutely yes, but this is not one of them. Okay? And in case you have followed along with this conversation, the reason is because none of these objects are allocated in the constructor using heap memory. So these are all in the stack for the objects. Alright so the short answer is not yet. Okay, any other question on how that works, member-wise copy by default. Okay, fine, lets do this example. This time we have two pointers, also declared on the stack, right? That's where variables always are when you declare them. This time they are called c and d, we're going to initialize the value of d, that means we are going to ask for the memory, and make sure that the value has value, so raise your hand if your name starts with d. What's your name? [Daniel.] Hi Daniel we've met before haven't we nice to see you. Okay Daniel are you smiling? [Yes.] Okay. We have some glasses, I'm not good at drawing glasses please forgive me, they look more like ears today. You have ears too so that's okay. Alright Daniel are you done? [No I am not.] Okay good, there's hope. You Benny I don't know. You could construe that lots of different way. Alright lets see what happens when we make an assignment. Anyone want to guess what happens when we make this assignment what happens?