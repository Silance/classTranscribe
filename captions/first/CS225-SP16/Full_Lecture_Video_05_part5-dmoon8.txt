You don't really know...well, at this point you really know that there was 8 at some point, but there could be something else. It might be some random stuff, maybe some other process [gibberish]. Ok, so let's go through a couple more examples. So over here, this is the previous slide and we'll just go through those examples. So let's see. Let's try try to compile in our heads the first piece of code. So my p is a pointer, and my x is an integer. I'm going to assign p to x. So both of them have names and they are on stack. And, p is a pointer garbage. And I want to assign x to p, so do like this if not, will or will not this compile, or will this be a run time error. What kind of behavior will it have? Do you like it? Is it a compile error? What kind of error? Type mismatch, right? Type mismatch. So we don't like it and it's a compile error. On the right hand side we have an integer, and we're trying to give an integer value to an address. P is supposed to have value that is an address. So we can't assign an integer to that. Ok, so now, this is just a review. So if I have a pointer p and I have an integer x, I want you to tell me how could I (say x equals 3) assign the value to p such that in the first case p's value is an address on the stack, and in the second case, p's value is an address on the heap. Yeah? So, first represent x. Ok? So that's going to be a stack address, which is x's address. And then the heap, new integer. And if I wanted to have x's value, it would be (x). So, that's good. So, let's draw corresponding figure though. So we have stack and heap, p as a pointer, x has a value 3. So in the first case, p points to x like that. But, in the second case, we actually asked for a new memory location and we put 3 in there. Right? Yeah. [gibberish] That's right here. Next example, so he asked what happens in the next example, let's go through that. Ok, so let's view another example, and things start getting worse here because things happen if you don't really take good care of the heap memory. So we have stack variable p of integer pointer type and we say in the next line, we'll follow the pointer and put 37 in there. So follow the pointer and put 37 in there. Hm. So what's going to happen? Do you like it or not and what kind of problem there is? Is there a compile problem, run time error? You like it? There's no pointee, so that's when the Binky blew up last time. So that was a matter of animation or like a metaphoric kind of expression that Binky blew up. Nothing is going to blow up here. The program will run, most likely it will run. So where is it going to really follow? Upon declaration of p, our pointer is garbage right? Which means that I don't really - i'm going to put a dash pointer here - I don't really know where it's going to point. It can point to stack, it can point to the heap, it can point outside of my process allocated memory, it can point to some place I can access or not, which means that I don't really know what's going to happen. I really don't like this.