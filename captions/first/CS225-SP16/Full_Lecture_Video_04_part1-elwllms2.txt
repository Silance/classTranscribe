This Means that there is a choice for you. Finish and fix your MP1, in case there is a problem. That's for what? Half a percent, okay so that's one half a percent of the final grade, or work towards the three percent. Okay so thats kind of a choice because the extra credit deadline is due on next Tuesday as well. Okay. any Questions about this. Also we have released another lab and its due as every other lab, every lab is due on Sunday. You have a chance to work, was it ah in your lab sections this week. So here are the new assignments. Ah, MP2 is considerably harder than MP1 so. So the work you know all starts only accelerating at this point. Any questions? And we will start with a new topic. So the new topic is very exciting, we are going to be talking about how variables are stored in different ways of storing. Variables in memory of C++. So ah let me ah start with a simple example, so imagine that Im writing something in my main function.  Using C++ and Im going to declare a variable x of type integer. SO I want to know how C++ will interpret the integer as well as what is going to happen with the memory. So the system will look at this sequence and go "Oh okay you want to declaring and intend to use variable x so I'm going to give you space for that in memory and since you say your memories name is and that variable has a name a very important property" the system will give you a piece on the stack. The stack will store, stores variable with names.  Wow this is this might sound scary like, " Oh my God there will be variable without names?" and yeah we will have to deal with that, that will not be stack anymore. The stack is very simple, everything has a name and the memory will give you the memory and the name. So it will give you the memory and clean it up as needed. You don't have to worry about many things that you will have to worry about when variables don't have names.  But thats for later. Okay so this says, " okay is that what you need? Ill give you a chunk of memory, with some address say a40 of variable x of type integer I will allocate the chunk exactly the size that that type needs, however many bits that is. and since you didn't give me a specific value, that value will be whatever was at that place before" Right? we call it garbage.  Okay so our problem at declaration is that our values stored is garbage. Fine, so after this assignment statement the system also says, "Thats great I know exactly what you need, Ill have to put the value five into the x's location." Our value for that variable. That simple. Now ah the same process happens with user defined variables not just primitive types, that user defined types. So if I were to declare a variable of type sphere the system would say, "Okay I know exactly what you want. Ill allocate a memory chunk on the stack, um say at address a50 for a variable with the name s of type sphere. And Ill do whatever the statement tells me about the value of this variable" Whats going to be the value of that variable upon declaration? We already know whats going to happen upon the declaration of user defined types. What is called? The system calls a constructor. It could be default, provided by the system or an argument constructor we have written for that class. So a constructor is invoked here. It depends which one on other, on something else. That a constructor is called there and it initializes the values. S is could be nothing and then there are garbage values. Or a member data, of that it could be radius, and other um arguments associated with the sphere.  So it could be garbage, it could be default values. Fine, so it's all good. Thats how memory is handled on the stack and given to variables. So today, today we'll care about one more thing that can be stored inside of the stack memory. Let me give you the syntax for it. So we'll say, "Well Im going to declare something of integer pointer. And it is a variable of name p, with the name p. And lets see..."