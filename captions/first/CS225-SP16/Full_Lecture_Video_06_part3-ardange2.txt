Yes
He said "no name data is being copied", and it's true. 
No, well... I don't know... a little teeny-tiny bit of data is being copied, right? 
Yeah, a little tiny bit of data is copied; that piece right there. The piece that represents the memory pointed to by 'd'.
Upshot is, that 'c' and 'd' now refer to the same place.
Any questions about that? You're totally right, I'm just teasing you. Okay. Alright. 
So now, how do we change Daniel's name? Well, there are a couple ways that we could do it.
We could do it through 'c' or through 'd'. We're going to do it first through 'c', or specifically through 'c'. 
Now, the syntax for doing so is as follows:
This little symbol right here is completely equivalent to dereferencing 'c' and grabbing the attribute. 
So, the arrow is just shorthand for "open-parens star, close-parens dot".
I don't know about you, but I'd rather type "hyphen arrow" than "open-parens star, close-parens dot".
I won't say that anymore; you don't want me to.
Okay, and so when I do "c->setName" we dereference 'c', change "Daniel" to "Carlos", and then when I say "dereference 'd', get the name" here, I get "Carlos".
Any question about that? Was it good?
Alright, so, you will see this syntax, the arrow syntax, way more often than you'll see the dereference with parenthesis.
So, the PNG class demands in certain incidences that you use the dereference with parenthesis. So untangling these things is just debugging.
Alright, so, this moment marks sort of a change in topic, we're gonna move into arrays.
This makes me happy, because once you have arrays in a language, you can start using arrays cleverly!
The clever use of arrays, why, that's just data structures.
So, this is the moment where the rest of the course opens up as a possibility.
Alright, so, arrays. 
In C++ there are two different kinds.
The first kind is called a static array. Now, static implies "unchanging", "stuck", right?
A static array in C++ lives in the stack. It's size cannot be changed as a matter of execution and moreover it must be known at compile time.
So, if you are looking for a sequence of memory locations whose size you know, whose purpose you understand, and whose number of values will not change, then static arrays are for you.
But if instead, you are trying to store a collection of things whose size you don't know, like images or whatever, you're going to not be satisfied with the possibility of static arrays. 
Okay, so, what is the syntax for this look like? 
All you do to declare a static array is specify the type that this thing is going to hold, and then tell in square brackets exactly how many of them you would like.
So the system, then, upon reading 'x[5]' will say "okay, I'm going to put that on the stack, somewhere, the next available spot." 
The name is essentially a sequence of values. In the next sequential spots, where the steps are is determined by the type of thing that you're putting in each of the values.
So, after you do this declaration, memory looks something like that, where the values are all actually filled in.
What if I did this: "cout << x[3] << endl;"?