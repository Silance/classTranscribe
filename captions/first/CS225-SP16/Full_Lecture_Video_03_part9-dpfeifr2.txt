So that's a very special address that has nothing in it, so the system will never let you access the value stored at that address because there is vacuum there. There's nothing. So it's a very useful thing, which you will use quite a bit. Because it's a controlled way of accessing something that is not allowed, so we will use that later. Now there are two very special parts which we will be use to be able to access in the code through the code that we will write in C++. First one is called the stack. And that's a very nice piece of memory addresses because it is very low-maintenance, so it's called non-persistence memory as well because the system will provide for some addresses f you ask for them on the stack and once you stop using them the system will clean them out. So the garbage man here is the system. So system cleans it. Okay. That's very useful, its very low-maintenance and very easy to use. There is another, much bigger portion of the memory that will be allowed for us to be accessible or we will have programmatic access. All programs will be allowed to access it and its called the heap and its an example of persistent memory. Which means that it persists. That means if you don't clean it up it will stay there. So is much more difficult comparatively to maintain it. So you have to clean it up by yourself,, if you ask the system to provide some address and you build stuff there, if you leave it there it will clutter up your heap, So you really have to clean the heap up yourself okay. So the garbageman here is you and it is very important to know how to clean it up or you may run out of memory if you're not careful, okay. So persistent because it persists until you interfere and clean it up, non-persistent means low-maintenance:the system will clean it up, so very good.I think that do you have any questions? I will start with pointers next time. You can ask in program to initialize your variable on stack or on heap and we will tell you how to declare those variables to ask for those particular pieces of memory, next time. Yeah, so there will be explicit mechanisms for calling for heap or stack memory