That you can have negative sequences out of that exam, okay? So if all you, for some reason, like, something goes wrong, you cannot get all points off of it, you can only get something on top like extra credit. The best situation that I can imagine is that you all come prepared, you all get great grades, and by the way if you don't come to the lecture you are registered for you will not get a grade - we have to be very specific and very rigid on this - and then you all get extra points. So, so we will reward you for being our test subjects on this, but umm, this class, this is the best thing to do for this class. This is how the testing should be done, and we had to start sometime, so we decided to start this semester. So any questions about this? There will be no free response questions. They will be all multiple choice questions, all online, and umm programming questions where you type your program, you can compile, try it, see, and then submit it. So, umm, how many assessments will we have? Some of the staff members feel that you got it easy this semester because we will have four of these total and it's not even fair that the last one will have, uhh, the same format, maybe the last one will be the way, the final exam will be the evening four-hour exam as we usually do it, depending on the success of the first three. But the idea is, being optimistic, you'll have four of one-hour exams like this which means that in total you have less of the exam time but we believe it's gonna be actually more productive. So you can look at it as actually you'll spend more time on the exams which is good and know there's that really stressful evenings, you'll have less problems in total that you'll have to solve. How to prepare? If I were you I"d ask the question how to prepare for this exam - The questions will follow the format of the exams that are online, it's just that we start this exam a little earlier than the regular midterm one, so just look at the problems that concern the subjects that we've covered, and multiple choice questions will be very similar, and all of the programming questions in written exams were concerning your MP's, so the same thing here - we'll be testing your ability to repeat similar code that you had in MP's. Yes? Only the final one might be cumulative, which we have not decided - otherwise all for the three in the middle and the other two will be graded for real now, this one is just testing it out, so just do your best, ummmm but they will not be cumulative. Yes? It's gonna be one hour. So your lab usually lasts two hours, but you know that we have laptop labs, so we'll make sure that those of you who have non-laptop EWS machines will be done in one hour, clear the rooms and we'll let the last students in to take their tests. Okay? So good luck next week, I'll make more announcements as I know what's happening because behind the scenes right now our TA's are working on this; there's a lot of things to prepare so the thing goes smoothly, so please be patient and prepare - your job is to prepare for the midterm next week. Okay, so let's start with the code. Now the last time, Cinda did  really good job on starting on a new topic, which is parameter passing. And some of you may know , so, what are - some of you may know this subject, then please just jump to the last page, or go through all of the slides with one question = How many times the structure will be called and how many times the structure can be called, if you know that. So I just don't want those who are ahead to be bored, but it's not crucial either, so don't worry about that, just something extra to do. But I want to go through this set very carefully, again, because my set of slides are slightly different so we don't repeat exactly what you've done last time. SO what's the setup? We will be talking about what happens when a main function, or, we'll call it a calling function, in my case it's called main, calls another function called birthday in my case, and passes a parameter so you know that in that case the parameter that is being passed is coupled with the receiving variable that is described in the function signature. And you last time you discussed that once the function, main function, executes line-by-line and reaches the call for birthday, it gives the control to the birthday function and the birthday function starts executing its lines line-by-line, and once it reaches the braces in the end what it does - it does some cleanup