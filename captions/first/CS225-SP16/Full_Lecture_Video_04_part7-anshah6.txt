You will run out of memory. So I can put this in a loop, and you can do that simple program and I think I actually have it for next lecture. So if you say it, I'm not going to write. So if you run this thing asking for new memory location, I think its going to be 200,000 times, maybe for a larger primitive type... don't remember. But you run it many times, you will run out it will be runtime error "out of memory". Yea. (Question) Um so in order to avoid this, you are asking how should we avoid this problem? (Clarification) It's next slide, okay, so I'll tell you how to clean up memory, it's a little more than that. Okay, I wanna draw a picture because that's important, okay? So what happens is... I'm gonna draw it here, can we go out through these lines one-by-one and except we are not gonna do this 200,000 times. So this is my program and I'm gonna draw a drawing or a diagram that we are always gonna do for this type of problems. So once I see declaration of a variable. First of all, does it have a name or not? Based on that I will draw it on stack or heap. So p is on the stack and every variable will have a box associated with it okay? Which will store its value. So upon this first line, p will have a box and its of integer pointer type, which means that I know that it should point to something, but it doesn't have a value. It has garbage values for now, so I'm gonna put a dot in there to indicate that. Fine. Now second line says, right-hand side asks for new variable on the heap so its gonna be a box associated with it of type integer, has no value, garbage value so far, but it returns it memory address to p. Which means I'm gonna say the value of p changes from garbage to that memory address, and p points to that heap address. Third line, follow the pointer, put two hundred in it. Follow the pointer, put two hundred in it. Third line, print out something. We are not going to change anything on the picture. Forth line, or fifth line, asking for new memory location on the heap, which means we are gonna get a new box of type integer and its memory address is assigned to p which means p's value changed to point to that memory location. Yea. (Question) On the stack? Whenever you can use variables on the stack, its slightly faster. Stack is much smaller chunk of memory given to you and there are certain things you will not be able to do so system has a lot of control over it.