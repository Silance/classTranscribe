You would have to rewrite it for each class. It's just because what if one of my functions' definitions what if it was not something simple as getRadius(), getDiameter(), or setRadius()? What if it was for a class matrix, say, x = the value of the decomposition of that matrix? The code would be much bigger than what I have, and putting it all, lumping it all within the class definition here would distract you from what this function actually does, from what this class actually does. If the class, say, instead of Sphere was something like Matrix, we could have different functionalities like adding matrices, doing all sorts of things, and then the declarations would be separated from the actual implementation. So it's just a cleaner way to write your code. Also, we do this sometimes to prepare you for the way a lot of C++ code is written, that is subdivide these three parts into actually three different files. And that is done because of the next mechanism of encapsulation that is implemented in C++. So, let me do that first, and then please, and then ignore the next slide. So you want to go to the slide that shows three different files. It just tells you which function, which class this function belongs to, that's all. It just attaches it to that class. Using namespace would resolve some of the issues, but they, you have to be careful with those too. So, I don't want to go through the mess that can, you know, you have to be careful using it. Unless it's obvious. Any other questions? I don't even know what you're asking. You can use two namespaces within one file, yeah. But yes, it's possible, and you'll see that in your programs. Okay, so, let's see. So I want to separate my file. I want to separate my file into three parts. And I'm going to tell you what each part, what new file name will be associated with each part. So this was a class definition with just functionality declarations, right? And it'll become sphere.h. Now the implementations is kind of like technical details. It could be even some kind of intellectual property associated with your fastest way of implementing say decomposition or getDiameter(), whatever that function is. This can be something that you want to really protect, and that's why we're going to put it in sphere.cpp and I'll show you how it's going to be protected through encapsulation mechanism. And then the main function will be the current code, as I said, and we'll store it in a separate file called main.cpp. And here is a division between these two files, based on what kind of entity is going to be creating and using them. Before this, before I go, this part includes, I'm going to go in the main file, and for each of these two files I'm going to have to include sphere.h.