And return, in get diameter, return two times the radius, okay. So that was our class function, member function implementations, that's good. And then, and then we also got learn how to initialize a variable of type sphere and we knew that a default constructor would be called upon this declaration, so we know exactly what this line does. But, let me just over read certain things because we didn't write down definitions exactly, explicitly last time, so what does this double column mean here? What is it called, this operator, what is it called? It's called scope resolution operator, and what it does, what does it do? Do you remember? It glues what to what? It glues that function get diameter to class sphere, not to class circle, not to class basketball, not to class basketball field, or anything that might use spheres, but particularly this function to this class. Okay, fine. So what is this keyword const mean here? Just to review what we did. I pinky promise that this function will not change member data, member variables. So, will not change class data. Okay, in this position, const means this. In other positions, and we'll learn how to use keyword const in various positions in class.. in function signatures, but we would be jumping ahead if we learned it now, but in that position it means that, yeah. Yes, yes. Neither. Any. So the question was does it apply to public or private? To both. There will be no class data, neither public nor private, or other access fields that we'll discuss later as well, so no class data whatsoever will be changed. Um okay which brings me next so what do these public and private fields indicate? They indicate regions in the class definition which can be accessed via other pieces of the code, right? So private field, indicates all of the data member variables in functions that cannot be accessed from the client, right? And public is something that can be accessed from the private, and we'll talk about it in a little bit more detail in a bit. Okay, so now I wanna talk about this line. So lets go in depth in here. As I said, if we had, and I think we ran this program last time, if I declare s of type sphere, and try to print out the diameter of that sphere, the output would be garbage. Because a default constructor is called upon this line. So, if I did not write any constructor and I didn't in my class definition so far, I don't have any constructors, a default system provided constructor will be called and that one will not assign anything to anything so its an empty thing. Okay. So this is a chance, this is an opportunity for us to take control of how we initialize member data, okay? So instead of relying on system provided constructor, we can actually implement our own, and we should most of the time. And the way I'm gonna do this, I'm gonna specify first, the constructor declaration, and this will be a default null argument constructor, but the one that we can write and um, take control, or put the values, initialize values to something predictable. But maybe, maybe, I want to initialize another instance of class sphere called t, with the preset radius, say 2.5.