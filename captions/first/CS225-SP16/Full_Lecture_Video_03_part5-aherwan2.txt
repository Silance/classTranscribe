So here's the catch : The system always provides one, so what if I say, "Fine, I like the default, no-argument constructor provided by the system, so I'm not gonna implement my own no-argument constructor, but I just want to use this one. I just want to implement this one. And I'm gonna run exactly this code." Yea? No, because there's a catch. It's okay, yea? Yes, the first one will not exist anymore. So there's a rule, just a rule of C++ that if you implement any constructor, then the system provides none. So if you implement any constructor, then the system no longer provides any. So the system provides none. Which means that what would be the result of compiling and execution of this code : compilation error. Not execution, compilation. At the compiler level, that default, system-provided no-argument constructor would no longer exist because I have written one. And then the third point is just a matter of semantics, English semantics. So, you cannot just say "Oh, I'm gonna cal constructor here", or "Oh, I'll make this function call a constructor." It's not for you to call the constructor or for you to decide to call the constructor. It's for the system to call it when it finds appropriate. So, you just cannot say "I'm gonna do that. I'm gonna call the constructor. We don't say that. So, instead we say that constructors, constructors, I guess a constructor, so constructors are for the system to call when it finds appropriate. And one of the examples when the system will invoke a constructor will be upon a variable declaration, but there will be other examples that you will learn later in the class. Ok? So, any questions from you, for me? I have a question : what if I have written here 'sphere s()'? Is that legal? Just a catch, okay? I think you'll have lab_debug next and there will be lots of catches like this you'll have to debug and find. So, is that valid? How do we want to interpret it and how would compiler interpret it? It's valid? So what does it say? Yea, we have everything. So assume that you have all sorts of things here, so I have implemented these guys, we can assume, you can assume anything. I just want to ask you : How do you think It's gonna be interpreted? Is that a variable s of type sphere, or is it something else? It could be there. So, okay, let me put it another way. Would a constructor be called on this line? So, we want to interpret it as if it's a variable s, initialized with type sphere, and this is just to indicate that the constructor should have no arguments, right? So no, this is not gonna be interpreted like that, because there is another way to interpret it as a declaration of a function with the name s, with the return type sphere, with no arguments. So there is really this, there is ambiguity, really serious ambiguity. So this would be okay if you wanted to declare that function s, but it's not okay to call a no-argument constructor with that, okay? So, never no-argument constructor will be called upon this. Does that make sense? So, just like a catch question.