... declaration of variable t, but with a preset radius. So a default, no argument, constructor would not be invoked here, but another constructor that would match the signature would have to be invoked.  And it would have to have one input parameter of type double.  So this would be another constructor.  And how do I know -- and I could write as many constructors as I wanted from whatever input arguments I want to provide which are appropriate.  So how do I know that those two functions are constructors?  From two things: no return type, the same name as the class.  So this kind of summarizes where we were last time, so, let's get -- jump into implementation of our user-provided constructors -- constructors that we write and not system provided constructors.  Ok so, the goal here is to invoke my own constructor upon declaration of s, of type Sphere.  And this would be the first constructor that I'm going to write.  The question is: where does this code belong?  To which one of the files?  Sphere.cpp.  And, please go back to the slide -- to this slide -- to also indicate something that I forgot to mention, but it's very important that by the matter of convention, we split this code into three parts.  We could put it into one program, one file, but by convention, we split it into three files: the class definitions ... and we call them class interface.  And this is very important.  Class interface will refer this... Class interface conventionally is stores in Sphere.h; and this is the purple block with all of the member declarations.  Now member definitions go in class implementation, and by convention we store it in another file called Sphere.cpp.  Ok, and the the client code ... and we store it in main.cpp.  I have to point out that I could have called them anything.  Sphere.h I could have called Frog.h; that could have been Grandma.cpp; and whatever is the third file.  Doesn't matter, as long as I do the naming properly in my compilation and includes, it would work out.  But by convention, we store interface in the <same name>.h file as the class that is stored there, and implementation in the <class name>.cpp, because that makes it easier for others to read the code then.  So it's something that everybody does, so we will be doing that as well.  Ok, so now, coming back to the class constructor implementations, naturally, as you said -- they have to go with the rest of the implementations, that is, in Sphere.cpp.  Ok, so that's cool.  So that's something that the first one -- the no argument constructor -- what should we write inside of the function body there?