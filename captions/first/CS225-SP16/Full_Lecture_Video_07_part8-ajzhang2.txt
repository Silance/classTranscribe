S which is just a name is going to be gone. We cannot acccess s anymore. So the second name is going to be gone now but that's not a big deal because it's still C. So we return 18 here. And then we try to print out C is 8. We get: 18. Is this good? What's good about it? Fast. Syntax is good. Can access without copying the same data. What's bad about it? Nothing. Nothing is bad about it. Just do it. But you can always find good and bad things. Nothing really bad about it. Use passing by reference whenever you can because it is a good way of doing things. [student] what happens if we delete it. [prof] we cannot delete it because it is on the stack. I said we can pass pointer by value. But can we pass pointer by reference? We will be doing this in lab 3 a month from now. And the reason for it is what if a variable does not live on the stack, so you are stuck with a pointer to it. How do you safely pass the pointer so you can null it? ANd the answer is pass the pointer by reference. And the syntax for that is passing s as a pointer by reference and write it out with the &. And you willl be seeing that in the code. And instead creating a local copy of a pointer, it will just create a new name for the old global pointer b. And you can set it to null and exit and you will know if it became null or not. Okay? Does it make sense? I will prepare you for what will be coming later. Sometimes it will get confusing with & and * all over the place. Passing parameters is not that bad but you are passing it to a function but what happens to it upon exit. I did talk about passing the parameter to the function from the current function. But now I want to see what happens upon this function terminating its execution, denote the cleanup, and sending the value back to the expression or any expression it might be called in. And the way to do that is by value. Which we did so far we were just returning the integer value, the 8 that was updated by value. So we just copied 8 to the right hand side. So that's the default way of doing it. But, as you can imagine, you can pass the return value by pointer, by value, ...