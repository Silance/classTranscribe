 It's hard for me. Oaky. Uh right, because it has to go "Yo can I have some stack memory please? I've got a string over here I'd like to put out there".  And the system hands back the heap memory.  The heap memory is handed back to the system and then the code proceeds. Now, I have another question for you.  Which one of them uses the stack more? Which one invokes more stack operations?  Go ahead and point to the one. Ok superficially at least you can't really tell what they do for sure,but  superficially at least their it's the same.  Each of them has a single stack variable. Each of them has a single stack variable the only difference is in this case it's a string.  Right, the type of thing thats put on the stack here is a string. The type of thing thats set up on the stack here is a pointer, that's right. But in both cases there is a variable on the stack. Alright any questions about all of that? So you see how that sort of unrolls in memory? Ok and then all of those things are true. Ok so we would not get, oh, there's one little conversation about distinguishing pointers from objects which I would like to have really quickly before we move into arrays which the semester would be over if we didn't have arrays so its kind of an exciting day.  Ok So I have declared this class face, its private members are articulated here for you, hold on let me fix oops.  Uh its private members are articulated here for you and were gonna execute the few little piece of code for each...designed to show you two different things. Ok so lets start with this one.  Um i'm gonna set up two face variables.  Here's A and here's B and I wanna initialize B. A variable B of type face, so raise your hand if your name starts with B.  Raise your hand, okay what is your name? Benny? Ok can you spell it for me?  Benny ok and your smiling.  Ok and are you done benny? Are you done? Done? Are you done? I need to be able to instantiate that variable, just tell me true or false.  Your done alright your done.  I don't know what it means either, that slide has been there for six years and I still don't know what it means.  Ok and I wrote it.  I don't know. Ok so now we're going to, we're gonna execute that line of code.  The way your read that line of code in C++ is A gets the value of B. Now you don't have to whisper it to yourself every piece of code that you read but what it means is A gets the value of B. And here's what happens in C++ when you do that.  You get a member wise copy by default.  Ok so assignment is member wise by default. Ok so lets see what that means.  It means that we look at each of the members and make a copy of them. So this String... Strings know how to copy themselves.  Benny comes across here.  PNGs know how to copy themselves.