Yes? Yes, What you said in your, what's happening in your mind is absolutely correct. He said no new data is copied and it's true. No... well. I don't know what the name means there. A little teeny tiny bit of data is copied right? Yeah, a little teeny tiny bit of data is copied. That piece right there. The piece that represents the memory pointed to the id. And the upshot is that c and d now refer to the same place. Any question about that? So you're totally right, I'm just teasing you. Okay, alright, so now, how do we change Daniel's name? How do we change Daniel's name. Well there are a couple ways that we could do it. If we do it through c or through d, we are going to do it first through c, specifically through c. Now, the syntax for doing so is as follows. This little symbol right here is completely equivalent to dereferencing c and grabbing the attribute. Okay, so that arrow is just shorthand for open paren star close paren dot. And I don't know about you but I'd rather type hyphen arrow than open paren star close paren dot. I won't say that anymore, you don't want me to. So when I do c set name, we dereference c, change Daniel to Carlos. Is that okay? Can I call you Carlos today for the next two minutes? Okay, and then, when I say dereference d, get the name here I get... Carlos, that's right. Any question about that? Is it good? Alright, so you will see this syntax, the arrow syntax, way way way more often than you will see the dereference with parentheses. Though, the png class demands in certain instances that you use that you use those dereferencing parentheses. So untangling new things is just debugging. No questions? You good? So um, this moment marks a sort of a change in topic, we are going to move into arrays. Now, this makes me happy because once you have arrays in a language, you can start using arrays cleverly. The clever use of arrays, why, that's just data structures. So this is the moment where the rest of the course kind of opens up as a possibility. Alright so, arrays.  Well in C++ there are two different kinds. The first kind is called a static array. Now, static implies kind of, unchanging stock, right? A static array in C++ lives in the stack. It's size cannot be changed as a matter of execution and moreover it must be known at compile time. So if you are looking for a sequence of memory locations, whose size you know, whose purpose you understand, and whose number values will not change, then static arrays are for you. But if instead you're trying to store a collection of things whose size you don't know, like images say or whatever, names, any of many different things. You're going to not be satisfied by the possibility of static arrays. So what is the syntax for this look like? All you do to declare a static array is specify the type that this thing is going to hold, and then tell in square brackets exactly how many of them you would like. So the system then, upon reading x square bracket 5 will say okay, I'm going to put that on the stack somewhere, the next available spot. The name is essentially a sequence of values, 1, 2, 3, 4, and the next sequential spots, where the steps are is determined by the type of thing that you're putting in each of the values. So after you do this declaration, memory looks something like that where all these values are actually filled in. What if I did this, I did cout << x[3]