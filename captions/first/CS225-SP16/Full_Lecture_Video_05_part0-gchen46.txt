Ok. Let's start. You guys hear me well? I don't know which mic is best. I don't really have many announcements today, so unless you have any questions, we will jump into the code right away. So there are assignments -- they get harder. You probably noticed if you looked at MP2 and we got two more. We got a lot of work. So, someone look at the code and - in the beginning I didn't want to uh pull out my compiler yet. I want to pretend we have a little compiler in our heads and see what happens, compile it as we go, by looking at it. So, uh, let's go line by line and see what happens upon execution of those lines or a compilation of those lines. And I told you last time that we'll always draw pictures, so I'll start drawing them right away. I know that this is about pointers so I better draw um, I better have space for both the stack and the heap. And these two variables are declared. The names are going to be p and q. Since they have names, that means they are both on the stack. So they both have boxes associated with them in which their values are going to be placed. The question is what is the type of p and what is the type of q?  The type of p is integer pointer and I know that because I associate the asterisk. S the asterisk tells me whether this variable is of pointer type or not pointer type, and I look at it and glue to the name instead of the type. So that's how I know how to read it. Since the asterisk is glued to the name, that means it's a pointer of type whatever the type is. Um so that means that both of my variables are on the stack, p and q, and they are both pointers and they are supposed to have values which are addresses of some integer number somewhere, right? And originally they are initialized to some garbage. I could have had another line, and please tell me how that is interpreted. So I could have init- I could have declared those variables in a different way, and then p would be of type integer pointer and q would be of type just integer, right? So that's how we know. So the asterisk belongs to the name of the variable, not the type, right, when we write a declaration.  Ok. So the next line says "oh I want some heap memory", so the system will say "fine. I'll give you" and I'm going to draw the box in the heap memory because this variable does not have a name. It has type integer, and the address will be returned as the right hand side of this assignment and given as the value to p, which means my p pointer from pointing to some garbage now will point to this new space in the heap. That's cool we have done it last time, so this is kind of - we are going over the same material just to remind ourselves of it. The next statement says, please assign the value of p to be the value of q. Ok? What does that really mean? What am I going to draw for this line? So the value of p is an address for this variable on the heap, and q should get the same value which means it should point to the same location. That's how we draw it. So its value is going to be the same address - it is going to be essentially pointing to the same place in memory so now if I want to assign value eight to dereference q, I'll have to follow the pointer of q