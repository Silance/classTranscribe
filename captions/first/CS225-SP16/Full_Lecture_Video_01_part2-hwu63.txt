But you know she's in the room, and you wanna ask her your favourite question. So how would you proceed? What you think you should do to find her in this room, without knowing how she looks like? Any ideas? Yo. OK, Yo. What about you to use microphone would that be better? Ok.Because we can scale up the same problem, you can imagine that the same problem from a couple of hundred of students, we can scale up to a couple of thousand of people in the stadium, and the problem could be stated in the same way. How to find Cinda over there. So probability you would want to find a microphone or megaphone and yell her name. Right? Fine. Very good solution. It assumed something about the data, and the way, or infostructure, in which you can add a few data. Having a microphone means that you have the access to all of the instances in your data set, in which case database represents people. So the info structure allows you to access to all of them simultaneously, very efficiently. You will not always have that info structure. Right, I can turn off the microphone, and that instance is gone, right? So do you have a plan B, do you have a second strategy? How would you find her without a microphone? Ask every student in the stadium. Ok, let's do that. That's a good strategy. Are you Cinda? I'm not. No? No. No? Uh, not. Is this fast? No. No, right? It's gonna take a long time because I would have to ask every single one of you. So this is called the Brute-force strategy. We will use those. We will have some brute-force algorithm, we will have to just go one by one to each data to complete the search. But it's not efficient if you have a large dataset. So can we optimise in a way? Ask people whether they know where Cinda is. That's an interesting one. Do you know where Cinda is? Yeah. Yeah! Oh- wah. It may or may not shorten your search. Which is kinda related to some kind of  hash algorithms that jump from one reference to another maybe or link list hash.Yes. Very good, we will cover similar problem in class, for some of the test and one of the data structures. What if nobody knows where Cinda is? They don't know how she looks like and you end up with Brute-force right? Any other way to speed up the search? Ask the person at the top of each roll. So I'm gonna go through the aisle and ask to propagate along the rolls. Is that your idea? Yeah. OK. So it assumes that I have arranged my data. So I created some kind of organisational data. I don't spend much time on this but you know whoever build this room, edit it. So it's kinda investment. You will see that a lot that by organising your data, you put in some time to do it, but it will be a good trade-off with future searches, right? It shows trade-off for time and efficiency in your search. Good. What if I ask you: You're not Cinda right? Raise your hand if you are Cinda. Ok. It's a very good hash, for this small room right?There is no Cinda in ECE Building as well. It's also something to think about, how good is your identifier for your data. Would it narrow down on to only one person or a large group that you would have to further do some kind of search on. So I'm going to do the following strategy. I'm going to ask you if you are Cinda and then ask you to ask the same question to all of your neighbours. And then, you will ask them to then propagate this information, and search. What would that look like? How do you make sure that everyone is absolutely right? Maybe I do want to, maybe I don't care. Maybe they can propagate back or I just ask them to only ask people who were not asked or didn't ask you before right? So we have to think about the algorithm in detail there a little bit. Anyway. Imagine you asked your neighbours whether they are Cinda and ask them to ask further, and they raise their hands during this time. How would the search look like?