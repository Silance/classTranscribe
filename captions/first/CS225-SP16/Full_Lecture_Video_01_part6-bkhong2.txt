...in the future. Okay? So it doesn't mean that I'm going to use it now, that's why the value is still garbage. So if I want to assign the value, if I want to use this variable now, I will use variable definition. And how do I write it? Probably a lot of you know. If I want to assign a value to myFavoInt, what do I write? I'll just assign a value. My favorite value, say 27. myFavoInt will get my favorite value 27. So that is a definition of a variable and when I say definition we assign value or give a value. Give a value... to variable. Okay? So that's super easy. This is super easy and a little boring but I want to go through the syntax because for more complex types, an integer is not an interesting type variable type but for a more interesting variable type, the syntax will look very similar. Okay, but so far as I said, this type that I will be discussing first are called primitive types. They are provided to you by C++ system. You can google for all the possible primitive types provided to you by C++, but I will just go over a couple of them. Okay so very similar line, syntactically what is it? Is it a declaration or a definition of a variable? And what's it's name, type, value, and location of that variable? The definition or declaration? It's both! What's the name of the variable? Rating. Type? Character. So the name is rating, the type is character, the value is 'E' and not garbage anymore because we assigned it, we defined the variable simultaneously with declaring it. And what's it location? Provided by the system so we again have all four of these defined for this variable. Similarly I declared and defined the variable u of type double with a value 37. In the next slide. So this is an example of declarations and definitions of primitive type. That is boring. So the most interesting part of C++ is that you can create other kinds of types and do a lot of things with those and those are called user defined types, which we call classes in C++. Okay? So a class, a class will allow for more complex and interesting types that we can use. But the syntax is very similar, so if you look at this next line you probably can guess what's the name, type, value and location of that variable. And is it a declaration or definition of the variable? So what's the name of it? My favorite sphere. Whats it's type? Yep. So the type is sphere. What's the location? Provided by the system. And what's the value? So far garbage. Okay so pretty good? I use this line and assume that this type has been defined. If I didn't personally define that type, the compiler will complain about this program. If the program that I wrote contains this line but doesn't actually have the definition of the class sphere, then my program most likely will not compile. So you can only use variables of some type once you created them. And the rest of the lecture today and for the next week couple lectures, we will be going through ways of defining user defined types. Different ways of defining classes.But before we start with that, I want to define formally what a class is. So class in C++ is a group of variables and functions. And why do we need to have class with this definition? Classes with this definition. Oh because you want to do something with instances for this class. So if I have my favorite sphere of type sphere, I might want to work with this sphere and do something with them. Just like with type integer of primitive type integer. I might want to add integers, divide integers, or subtract integers. I may want to do something with spheres. So all the instances of type sphere I may want to change the color of the sphere or change the transparency or merge them in some way. Right? So I want to have some kind of functionality associated with this type. So functions they actually represent, they represent the functionality of instances for this class or also what can you do with it, right? 