Does anybody know the answer? It's a tricky question. Yeah? Yeah, what if I...so the question is do I know? Is there any way to know what is going to be the address of some variable during the program execution? Yeah? You just say &x. Yeah, you're jumping ahead. Some of you already know, and if you're bored at some point, look through the slides. There are examples, if you know everything, you're probably ok with this lecture and these slides are intentionally long because we might use them for next lecture to finish all of the examples. So it will give you an idea whether these lecture are very useful or not (you may know everything about it already). OK, so the answer is no. During the execution of the program, we don't know what that x address is going to be because it will depend on each run. Each time, the system might give a different stack address to a declared variable 'x'. So, it will depend on the execution. Also, the way hex numbers work or address by which...the numbers by which addresses are expressed, they are operating system dependent and hardware dependent. So there is no real way and we don't even really want to know what the actual address representation on this machine during this execution for variable 'x' is. OK? So the answer is we don't really want to use that statement. Yeah? Yes, thank you I'm sorry. It's pointing to a20. Thank you so much. a20, because we want it to point to x. Otherwise it would be a type mismatch. It cannot point to a40 because a40 is of type integer pointer. But we declare that it has to point to just integer, not integer pointer. There is a lot of tricky questions, so let's not just jump ahead. The difficult questions come later. OK, any other comments? So we don't want to use this. This declaration is just not good because we don't want to know addresses explicitly. OK? So what if I then say, well, 'p' = x, because I want to express the following intention to the system or C++, that look, I want my 'p' to point to 'x', so take 'x' and assign its address to 'p'. Well, let's look at this assignment and let's look at the types of variables on both sides.The type of 'x' is integer. The type 'p' is integer pointer. It's a type mismatch, which means that if there's no explicit casting, which there is none in C++ for this particular statement. Then it will be compilation error. So instead that's the next step. Instead we'll use a couple of new operators to help us with pointers. So there is an address operator denoted by ampersand(&). And it works as follows. It takes an input variable, so if you give it 'x', then that's the argument to the operator and the output is the address of 'x' or the address of that variable.So you take, you give that operator a variable and it will output the address (that is a20 or whatever that is for 'x' on that machine during that execution, OK?). And that means that because it's a20 we can just assign it to 'p'. 