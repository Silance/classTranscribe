Okay. So this will be interpreted this is a declaration of function with name "s" and return type Sphere. And that's the only way the compiler's gonna interpret that, okay? Okay, let's move on. So now I want to summarize what we have learned about mechanisms of encapsulation. So let me just describe and annotate these blocks. So the blue block is going to be the function interface of the class interface, so I'm not even going to write sphere, I'm just going to say whatever that class is, it's going to be .h for that class, that is its interface of the class and that's where we put all of the class definitions. And this block will denote .cpp, the implementation of the member functions of the class. And these little blocks here will be the clients. So one of our clients that we have implemented was--we have implemented just one, main.cpp, a very simple client, but there could be more complex animations of spheres, basketball court will lots of balls running around or flying around. So there could be many different clients using our class, sphere.h and sphere.cpp. So what are the mechanisms for providing encapsulation that is limiting access to certain portions of the class or providing restrictions, what are two mechanisms? Well the first one was public and private fields in the class interface. So this public and private fields, they're called access types. So they define access types. And they describe which parts of another code can access or use certain members of the class. So I'm going to draw it in the following way. If I have a public field here, and a private here, then I'm going to denote who can access those members by a hand. See, the client can access public variables and functions, right? So it's okay to grab them and use them. We get diameter was one of them, or setRadius. But the client cannot access private members of the class. Okay? So this is one of the mechanisms of encapsulation, the client will not be to use those, which is really helpful. So they will be restricted for use, while the implementation of the class can access both. Right? Okay, so that's one mechanism. It may be useful. It provides you some mechanisms for safety of your class. Another mechanism is what can and cannot be seen by the client. Okay? So this is accessing, but another is even seeing what's there. So the interface of the class provides information about what the class can do. So this is what the class can do. 