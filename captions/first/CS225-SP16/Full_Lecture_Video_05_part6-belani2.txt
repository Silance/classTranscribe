But, most likely, it'll be an address that is accessible by your program and you are gonna put 37 in there. The most likely the program will run ad you'll put 37 somewhere, but you don't know where. And that's dangerous right? Because that could have been a value of S for all I know on the stack or it could me some heap memory right? Okay, so, this is really bad, but the program is going to exit you to the next line, and then it's gonna say ohhh, I don't like that  and it should initialize the pointer. Let's do the right thing now, let's assign it to NULL, because we don't know where it should point to this point yet, so let's assign it to NULL and not to the garbage location. So actually this is where I say yes, we are on the better track right? That's what should have been done in the first place. So when you declare pointers initialize them to NULL so that this kind of things may not happen. And I think last, during last lectures some student came to me and the question was, do you really need to initialize that to NULL? Because I know I didn't initialize my pointer, so I will take good care of it, I will not do those kind of assignments and I said yeah sure, you don't have to, but if somebody else is using your program when they want to see what that P is, you know, they may deference and do something with it. So it is just a matter of good style. It is just good for collaborations as well right, to share your code with others. So now, now, this is exactly in the beginning of the lecture had this question, so what if you assigned your pointer to NULL and now try to do something with it, there is a way to check for it right? Because if you try to dereference NULL pointer, what will happen? Segfault. So perhaps this program will in fact run into runtime error and it will be Segfault. And it will not happen in the place where actually I was unhappy about. It will not happen here, it'll happen upon the ??? of this line. And in fact I actually like that, because it it's a defined behavior. It dereference NULL pointer you'll get a segfault. So I can always check if my pointers Null, don't dereference it right? So there is a way to check for that, while there is no way to check if my pointers garbage or not. Right? Okay, so that's cool, this is a good example. Any questions about this? So we don;t like this, but we don't like it right here, not anywhere else. Right? Okay, so this example was see previous slide. So now, I want to go through this example and then finish off with this example. So these ones are similar to what we already discussed, very similar. Okay, let's draw pictures. We have a pointer declaration of P on the stack, and it's initialized to garbage, we didn't set it to NULL which is you know, not a good idea as we know already. Now we have a variable x which has value 5, of type int, and we say P = address of x. So P is going to be pointing now to x right? And then I say delete x, what's going to happen there? So I initialized pointer to point to stack variable and now it seems like my intention is now to get rid of that variable, give it back to the system. Not a good idea in the first place right? Because the system will take care of stack variables, it;s the heap memory that you can ask for and give back. However, what do you think is going to happen when you run it? Or compile it? Will the compiler complain? Mine didn't. So it's okay. You give it memory address, it'll try to give it back to the system, and it's just not a good idea, because you're not supposed to. Okay, so whenever you use new and delete, you have to be mindful of what you're asking for and what you're deleting. So there actually will be, it'll run and compile, but I don't even know what it's gonna do because next. Oh, I'm sorry, I'm sorry. Delete x, so there are several things here. There are several ways I could ask to delete x, and let me write it down what I was talking about now, so if I want to free up x memory, I could say delete x, 1. Or another way I could say delete not really x, but the address associated with x, right? So, this is okay. But really dangerous and this is not quite not even okay. Okay? So one way I give delete a pointer or a memory address right? The value which is a memory address I'll try to delete it and it will not me warn me at all, warn me at all about this and things may get bad afterwards. If I send it x though, it'll complain. Right? Why do you think it'll complain? 