member-wise copy, okay? So the name, the strings, know how to copy themselves, and Anna is going to be copied. PNGs hopefully know how to copy themselves and if they do, they are going to do it pixel by pixel. And if I submitted some very high resolution picture, say a terabyte, that is going to be slow, right? So this is slow and this passing is exactly the slowest moment of this program, okay? So the moment I pass by value and do memberwise copy, unless I copy my copy constructors which is jumping ahead, unless you do something extra, it's slow. You don't want to do extra copying. Okay, so this local copy of Anna with the name s is created, it's also on the stack so we don't have any variables on the heap. So let's see what the program does. It goes line by line, it increments s's age, so it becomes 28 in the local scope of this function. Then we print out birthday and then we return the age of s, which is 28, which means this is the last line of the execution of the program. We are going to clean up the stack. Local variables are s. So s is gone. It was a short-lived variable. We did all of that copying for very little reason, right here. So s, cleaned up, it goes out of scope, but the value 28 is returned as the right hand side because that is what we are returning, fine. And new_age becomes 28. So next line, if I want to print out a's age, what's that going to be? 27, right? So it's kind of strange. The whole purpose of this program seems kind of weird, right, like why did we pass an a to a birthday function that clearly was supposed to increment the age and it didn't do it. And the reason it didn't do it is because, well kind of, my question is, is this good or bad? Is this a good idea to write these kind of functions and pass parameters to them like that or not? And if it's a good idea, tell me why. And if it's a bad idea, tell me why. [inaudible]. It's slow, so bad because it's slow, any other reason? Slow. Now we are creating a copy and trying to work on it without actually affecting. So unless it's really worth it for some other reason, which there is no reason to do it here. So, modifying local variables only. Which are short-lived, only during the execution of that function. So, in this case there is no reason to do that. So, we don't want to do that, we want to fix it best. In this case, if I didn't know that there are other ways of passing parameters that will fix the problem, how would I fix it here, how would I update a's age now to be 28 after all this work. Since I saved new_age, I could just fix it like this. But it's a very contrived example, right? It's just a bad code. So we don't want to write it like this. Instead we will learn how to improve it, maybe. So get rid of this slow copying through another way of passing the parameter. So the next type of passing is called by pointer