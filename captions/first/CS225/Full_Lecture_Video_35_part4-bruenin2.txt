The equivalence relation. Now, every equivalence relation has a set of equivalence classes; the notation for math says that you take these square brackets, denote which relation you're talking about, and you throw between the square brackets the representative of the set. So, for example, if I'm expressing this equivalence relation to represent that set, then I would throw the student into the square brackets and what we would understand is that that means that set of everybody that is related to OAB under the equivalence relation, okay? Now, what's the difference between that set and this one? There is no difference; as they are in the same set. It feels like choosing the person I'm playing favorites; but, in fact, the identifier that you happen to choose the group is somewhat arbitrary - it could have been any one of those students. All we mean by a choice here is a collection of people who are related to this student, and it could be anybody. That's the notation for math; I'm not makin' that up. It probably came from CS173! Okay, one more thing to point out is that there is nothing in the mathematics that indicates the names of the games. Usually when we talk about equivalence relations, we just use the identifiers that correspond to the domain of the relation; that is, we use the identifiers of the students in this example. The games themselves don't appear in the math. I put this here - the equivalence relation would not change if I erased all of these little helpers at understanding the diagram. There isn't a lot of meaning to an equivalence relation except to say that these are all pretty much the same, these are all pretty much the same, etc. That additional meaning is not part of the math - it's part of the application. Okay, alright, one more thing. We will create an abstract data type(ADT) that will help us maintain an equivalence relation. Let's define and maintain an equivalence relation across the members of some set. So, what that means, for example, is that I would be able to tell immediately, given a student, what their membership was across the collection of sets. And in fact, one key thing that we're gonna wanna be able to do; given two students, is to tell immediately whether they are in the same disjoint subset. This is supposed to be just kind of reminding you about how these things work, and it sets us up for actually working with this abstract data type. Okay, that's the intro. Let's do some examples. R is the same equivalence relation, but I have chosen only about ten students. I'm drawing the picture a little more carefully here(I think). Here's what I want to be able to do: I want to be able to use two functions - one is find(), and one is union(). If I say find(4), what will you do?