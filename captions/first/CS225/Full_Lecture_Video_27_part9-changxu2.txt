The good news would be O(n). Otherwise you know we might just as well let the binary search tree to run them their way, do what they are going to do anyway, okay? So the next few minutes are going to be spend arguing that AVL trees, by, using their definitions, AVL trees resulting trees whose height are worse case O(lg(n)). Now, I can't make this argument very cleanly without first  reviewing the definition of Big-O from CS173. Okay? Anybody need some [gibberish] points? You wanna refresh me of the idea, refresh me of the ide of the definition? What is the definition of Big-O? Yes, it is the worst case running time, it is the an upper bound on the running time. Okay? But, what is the definition of it? I will give you a hint, you will need that symbol. Okay? Oh What? Yeah ready Nathon? Yeah a function of Big-O of n, is a function of g(n), if and only if, okay good. Exist a constant c so that......Good.....Very good.......So i am going to take that for sufficient large n and turn it into that some other that [gibberish] variable k and make it when n is greater than k. Alright oh what the heck? That was impressive. That was a [gibberish] a environment that I might like to give you a hint, that is very good. Okay, there exist constant c and k so that the function is less than some factor of this other em....this function, when n is big enough. Okay? So now, here is the deal. This function that we are going to argue about is we think logrithimic.  Okay? f of n. We think it is logrithmic, but we don't know for sure. We don't know, we don't know that it is like for sure, but we do know that the one that we are going to compare against is logrithmic. So I am going to put that on here also, okay? So maybe here. g of n is equal to log of n. And pretend that this is increasing. I kinda dipped it down, I shouldn't have. Now alright we are not going to make the argument that our function is less that g of n. But we are going to take some constant factor of g of n and maybe this goes like this, [Gibberish]. And we are going to make the argument that our function is less than that one, when n is greater than some value k. Is that make sense. You've probably seen this graph before right? Alright, this is what big-O of n means, this is what it is means for a function to be big-O of another function. Here is the problem with it, i can't do the problem. I will tell you the problem with this next time. The start of next time. 
