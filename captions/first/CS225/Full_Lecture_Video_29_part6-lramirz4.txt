Okay so what we did see is that 16 did come up. If you remove 20 then the inorder predecessor will come up but then that one is too small so I think it grabs one  from ... I just didn't see it, should we do it? Alright, last time this is the last one then we should go do analysis. 20 taking 16 up okay throwing things down, there's a lot of throwing down so this one's quite combative if its a throw down. Okay, alright can we go on? Please? Who said please? I love that you feel comfortable enough to admit that you said please. Okay, so here's a more formal description of what these things, the constraints on these nodes and there are some key parts. So an internal node is a non-leaf node. Internal means non-leaf. Non-leaf node then number of keys in the node is the number of children minus one and a b-tree of order m is a m-way tree so maximum m-way. you might have m children. All leaves are always on the same level, this is new for us. All leaves hold no more than m minus one keys so that's when throwing up happens. But the thing we didn't see much is that all non-rooted internal nodes have between ... and this is the ceiling of m over 2 and m children, I believe. So let's see if that's written. Is that right here? On your sheet it has it? Okay good. Alright, that didn't make it through the various file transformations. Okay, so what does that mean about the number of keys? Its one less than the ceiling of m over 2, right? The number of keys is then less than ceiling of m over 2 and m minus 1. Now a root can be a leaf, so single node or it can have between 2 and m children, its the only one that can have that few children and the keys in the node are ordered. Okay, so this is actually a key point, this piece right here says that no node is very empty. So if this is as big as a node can be, notice that that says that it is at least or at least one minus less than half full. So you can think of this as, you can think of these nodes as being at least half full. About. It might be one less, but that's all. Okay so all node that key observation is that no node is very empty...no node is... it changed the font, I don't know... is very empty, except the root. Because we need some place to keep this ... Yeah? ... No, this is good. Okay so let's reinforce that, this always confused me too, I don't know why. Okay it says here, the root can have between 2 and m children, there's a difference in the number of keys it holds and the number of children it has. How many children does this have? One...two, even though it has one key, right? Oh yeah, there's this minus 1 thing. Okay, any questions about all this? Of course I have a question for you, I want you to infer from this picture the order of this tree. No, it's not 4. It has to be bigger than 4, why? Yeah, because this one has 4 keys in it, right? If 4 were the order of this tree then we would have vomited at 3. 5?  Why not 6? This is actually a hard question. Why not 6? 