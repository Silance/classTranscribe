Questions? you good? Okay. Let's see. I don't know if this is right. I'm gonna leave it like this. I don't want to like leave off by one errors there. Alright, how will we prove if that was true? This is my best out here. How do we prove that that's true? That this height is log n? No. Not induction yet. Not induction yet. First of all, what we're going to do is twist the question around to the minimum number of nodes in a tree of height h. Right? So twist the question around, answer that, prove that by induction and then invert it. So the maximum height of a complete tree containing n nodes. We're gonna say the minimum number of nodes in a tree of height h. We're gonna ask the inverse question. Alright. Fine. Log n. Algorithms that traverse height to to top root to leaf are going to be log n. Fine. How do we insert into this structure? Now here i'll draw this like this. This zero. This doesn't work anymore. Don't look at it. alright here's what i want to know from you. Tell me a number that would a key would be super easy to insert into this structure. Super easy to insert. Tell me a key that would be super easy to insert. Yeah? 13 would be super easy to insert. Where does it go? It goes into seven's right. Right here. Right? The reason it's super easy to insert is. it's greater than seven so its correct and its easy to insert because it's something that goes right here into the array. Okay fine. Anyhting that is greater than seven and is gonna be can go in that spot and that spot corresponds to this cell. Okay. Good observation so three thousand would be enough. The smallest one would be eight but it's already in the tree. Alright so 10 might be the smallest one. Okay fine. I'm going to insert ohhh i don't know. You want five? That's what I was going to say. Really? okay. Yeah I'm telling you, the E.S.P runs strong in this room. I want to insert five. Do you like it? (Crowd says no). Okay you don't like it because it breaks the heap property. Where that property is an order a monotonically increasing path from root to the leaves. So how can I fix it? Swap. Very good observation. Look. I can just. it is safe. it is safe for me to swap five and seven here. right? Because if. if five is less than seven then it's certainly less than eleven because eleven is greater than seven. right. So if five is less than seven then it's an okay parent for it's sibling. Wait. It's an okay parent for the other side of the tree. Okay. Alright fine. So that was a safe thing to do. Are we done? Oh what should we do? Do it again. That's right. Is it safe for me to swap five up to here? Wait a minute. Two things are going one. I believe. I believe you understand it's okay to bring five up but is it okay to bring six down to this spot. Is it okay? Anything less than the previous key is okay. And we know six is less than seven because we learned it when we were two. But we know six is less than seven because it was above it in the tree. And this was a heap to start with. Okay. So it's okay to bring six down. And now the heap property. This property of a path increasing path from root to leaf is restored. Any question about it? That process. That swapping process we refer to as heapify up. 