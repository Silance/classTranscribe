Okay so the balance factor at t-right is 1, if that's the case, so if we have a balance factor at t of 2, and a balance factor at right of 1, then the left rotation will fix the balance of the tree. Okay. This is the conclusion. And these are the key testing points, right here and right here. Okay fine, we're going to do exactly the same thing again, but now I've changed where my little blue dots are, and now we've got the dog like picture, and still an insertion occurs to the right of t, and an imbalance is detected at t. The balance factor at t is 2, good, so some kind of left rotation will fix it. So that is the same as the previous. Further, this time the insertion occurs at t2 or t3. T3. That is at t->right->left, the insertion occurs at t->right->left. Now what are the possible balance factors at t->right? Could it be -2? Could the balance factor at t->right be -2? No, because then we would rotating there instead. Also couldn't be 2 for the same reason. Could the balance factor at t->right be 1? No, because that implies that this is taller than, that t4 is taller, but we just inserted over here. K, and so if we're changing the height of this whole tree, and thus inducing a higher balance factor for t, then this one could not have been taller than the one on the left. So can I have balance factor 1, similarly it cannot have balance factor 0, the only balance factor at t->right that makes any sense is -1. So now think about this... we're basically using for a left rotation, we're using a balance factor at t's right, to determine whether it's a single or double left rotation.  Any questions about that? Yeah, lots, but I hope we don't talk about it. So what's going to happen? We're going to do a right rotation around this guy, followed by a left rotation around t. Okay. I almost got here last time. So first of all, before we start talking about this, remember that last time, we decided it would be pretty easy to check height balances, if we stored the heights of subtrees in the nodes; that's why i wrote that there, but I forgot to put the data there as well. So also remember that we store the data behind the node in the tree. It's hidden, we're just focusing on keys at this point. But we are going to store the height. The next thing I want to know, is if you ignore this yellow, is this tree then height balanced? Isn't that kind of amazing? Isn't it kind of amazing that this is a balanced tree? Because look at the size of the subtree on the right, compared to the size of the subtree on the left. Wait, right, that works. Wasn't what I intended, but it works. Hey look we only have a few nodes there, and a ton of nodes over there, yet none of the heights are very disparate. Any question about that? Alright, so now we're going to insert the yellow one. Like I said last time, I hate on rolling recurrences, but I'm going to do it in this case because it really informs, it really sort of illustrates, how we expect this post-order processing, post order evaluation of balance to work out. Okay, here are the four steps, here are the four steps of doing an insertion, we are going to insert at the proper place. Now at any given level, we only have access, we only have access to one node, so insert at the proper place means go down one level in the tree, and do insertion in the proper place at that level. Okay? Well, we haven't found a place yet, and so we need to do insertion at the proper place on the next level. We are heading toward the yellow, we are trying to insert the one that is the yellow. So this is sort of like the active frame at this point, that's the active current tree. We haven't found a spot, so we're going to continue inserting at the proper place, and in this case that means going here. We still haven't found a spot, so we're going to continue inserting at the proper place.