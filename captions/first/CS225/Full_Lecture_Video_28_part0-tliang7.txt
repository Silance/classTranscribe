ok.let's work. So i wanna talk for a minute about for the exam coming up. So i wanna make sure you hear there was the exam on Tuesday, not Wednesday. Wednesday is the pain in the ass. We didn't like it very much. So we are moving it back to Tuesday. I'll leave that in red for you. And the conflict exam should you need it? It's the following morning, so that would be Wednesday morning. I like to get all these taken before class meet, but we can be a little bit flexible inside the morning window, larger morning window. Let's see, there will be review session this weekend, I'm still waiting to hear from course staff when they would like to do them, and for room reservation, we will make the room reservation then we will let you know. So, if you are not yet connected to the class on the piazza, now is a good time to do so, because thats where we will announce it, where we will announce the review session this weekends. We talked about this morning in the format for the exam will be very similar to the past exam, which means multiple choice, lots of running time questions, so we will paint a little scenario for you and ask how long will this take, how long will this take. And, let's see, and a couple of programming questions or did you understand for the work you did for the mps type questions. One thing that would be different is there will be an exam booklet decoupled from the exam solution papers, so it doesn't surprise you, you will be writing the solution on the page we will then scan for improve efficiency in grading. So, don't let us surprise you when you get there and your exam booklet is separate from your long solution paper even. Bubble sheet does well of course. i think thats all i wanna say about the exam today. Like i said, we will keep you price of opportunity for review. Are there administrative question before i start,do you have anything you wanna ask about it? I haven't really told you anything so . The material to be covered is everything from stacks and queues, through Friday. And if i don't start on the material, you miss out the chance to be test over Btrees, so i better get started. Last time we sort of refresh our memory  for the definition of Big O, the key observation here is that we are looking at, we are trying to access an upper bound on the running time of our algorithms. So in this definition, f(n) represents the true running time of our algorithm and g(n) is some function that we use to communicate its quality, the quality of the algorithm or the speed of the algorithm. Now, thats said, this inequality allows us to make g as big as possible, but smaller is better when you are talking about the quality of an algorithm. So typically when we talk about big o, we have a function here and we want the lowest possible version of that function, the lowest possible function that we could put in there. So we say we want a tight bound, tight upper bound on the running time, and that is, just to iterate because we use this big o to reflect the quality of our algorithm. Nobody who can run a four-minute mile goes around saying I can run a mile in less than eight minutes. Thats what I'm talking about here. They say " oh yeah " I can run a mile in less than four minutes.  Like they get down as low as possible.