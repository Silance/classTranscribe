And the implication there is < is defined on keys. Okay, and we don't have that constraint for hash tables. Alright, so why do we talk about balanced binary search trees at all if hashing is so great? The answer to that is simply that AVL trees get us something else. They get us nearest neighbor search. They get us the ability to, if we have distance defined, we can evaluate how close we are to a particular key whereas in hashing, to keys that are close in distance could be way far away from each other in the table. So, BST assure that similar keys are close to each other in the tree. Hashing doesn't give you that. No such assurance, okay, hashing can make no such assurance.  Okay, what does this mean? It means that I can say of an AVL tree "okay here is a key, I know it's not in the tree, give me the closest one". You can't do that in a hash table. If I come to a hash table with a key and say give me the closest one, it will say "What?" and not be able to respond efficiently. Alright, uhhhhhh, ha. [video playing] 