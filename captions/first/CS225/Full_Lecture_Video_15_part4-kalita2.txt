It's not called insert because it's not a generalised notion of inserting into the structure. We don't have the flexibility of putting the data wherever we want. It has to go at one end of the linear structure. Similarly for pop, pop is our remove but it is not a general notion of remove at all. It's going to give you a particular value from the stack, that is, the thing happens to be on top. Now, here is..now this is the.. this is the interface or the abstract data types stack. It's fairly classic. You may seem some modifications of this like for example - sometimes pop does not actually return the value. Sometimes it just removes it. Sometimes there is an additional.. an additional function called peek, that allows you to look at the top value. Almost every implementation of a stack that I have ever seen has had a function that will tell you whether or not the stack is empty. And then, you know, possibly there are the big 3 depending on the implementation. Alright! So these three though are classic and part of the abstract data type. Notice that that means we can use this structure now because if you write  code like this, you can tell at any given point what the data structure looks like. So, I mean this is just.. I will bore you again if I go through this. I will push a 3, push an 8, push a 4, do a pop and 4 is returned to another pop and 8 is returned, push a 6. So right here, the appearance of the stack is this. Any questions about that? Do you feel like you understand how this thing works? Now let's talk about this part. The elephant in the room. How are you going to implement this? It's a linear structure. The stack itself is a linear structure like I said the data is.. the notion of the next one. So that suggests particular implementations. What are some ideas? How can we implement them? What kind of structure do we know about that we could use to support that inner face. Somebody raise their hand and have a conversation with me. Nope? If I closed my eyes and point to somebody. YOU! What are some ideas? What can we do? I could use a linked list. Very good! Is that the only alternative? Raise your hand if you were kind of wanting to suggest linked list but you were glad that I pointed at him instead of you. Raise your hand if you might have another idea for an implementation. Yeah? You could use an array. Right. So at any time, at this point, any time you have a linear structure that is a structure where your data falls right next to each other your two alternatives to consider are a linked list and arrays. Now, the technical details are yet to be discussed. We haven't talked about whether it's a dynamic or static array. We haven't talked about if it's a singly linked or doubly linked or crazily linked list. But nonetheless it's pretty easy to have a conversation about those 2. And in fact, those are the two that we are going to consider for this. Ok? Any questions about that? Just out of curiosity, raise your hand if you think.. well.. if you prefer linked list in this context. Your favorite choice is linked list. Raise your hand high, this is fun. Raise your hand if you're array centric. If you would rather use arrays. Ok. Look here is about 50-50. There is no way to be sure if both of these are good options, ok? Alright, so turns out the first one I decided to talk about is a linked list. And here is how we're going to implement it. We are going to prepare a stack node. It should look pretty familiar to you. You have seen this before. And we are going to keep a hold of this stack via the top. There it is. We're just going to call that pointer that holds on to our data the top. We are going to keep track of its size. Ok. So, just because it's a good.. any question about that part.. any question about that part at all? Ok. Is the constructor implemented there? No. It isn't. I'm going to go ahead and do this. Stack top = NULL. Implement the constructor there. Size = 0. Pop = NULL. I think that should lead to a question. 