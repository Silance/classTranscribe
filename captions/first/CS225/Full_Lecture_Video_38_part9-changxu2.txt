
O(n). Any questions about it? We will leave it blank and resize it downwards em when it gets too sparse. So we don't need to shift the data but we do have to walk across looking for all of them. ok? alright, good question. How about checking to see if to vertices are adjacent? O(1). Yeah! This is why this one is so beautiful. This is a constant time array look up right? Is this null is this null is this null......That's it. yeah? Yeah you also have to go down to the bottom but that's n as well. thank you for saying that. So you have to go this way too. yeah so it is two n instead of 1 sorry. Alright and finally how long dose it take to return the set of incident edges given an vertex. Where do they come from? they come from the array on the table right? And so this is O(n) as well. Is that better than this? Is that better than the one on then previous slide? The answer is it depends. What dose it depends on?  Yes how big the n is! That is right. Whether m is bigger or smaller than n. very good. In general it is better. ok? it is pretty rare you would not implement your graph using this structure if you don't have many edges. So in general this is a better approach. Next time we will get to [gibberish] of recommendation and we will do an implementation called an adjacency list.   