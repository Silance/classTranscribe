All right, welcome back. This is time to say welcome back to me too. How's your break? You should say good. Too good... All right, so we have that many more lectures, this many more hours together. This is a little frightening. No this many more lectures. And we have tons of content to do. Umm so ideally this would be sort of in the middle of the time between midterms in the content. It isn't. It comes slamming at you fast at the end of the semester. It actually is the bulk of the final exam so we can't turn off the diode yet because you know you're not a computer scientist if you don't like graphs, and that what we have left to discuss. Well, maybe you're a computer scientist if you don't like graphs, but I just don't know what that feels like so you will have to tell me. All right, so I believe, here's where I am starting, our discussion of the details of graphs and graph algorithm. I believe you would had a discrete math class and in that discrete math class. All of these definitions have been handed to you. Now, if you are probably over three or four lectures you know scattered about with some argumentation. If you glance over this list, it's kinda of a ugly. This should be indented. This of the capitalized thing is a definition/phrase, if you glance over the list. And you don't go yeah...I get that. Then you may want to revisit this terms in a fairly focused study kind of way. I am going to be using those terms without definition in next few lectures. Now, I will also be almost certain be unable to completely not reinforce their definition. I won't just cruise right path. But there will be very little concrete and vigorous definition of this kind of stuff going over. Any question about that cuz I am going to advance that slides and we'll be done. Oh.. makes me nervous. All right, ready? Well, ok I am going. They're gone, but we know them. So we're going to spend just a few mintues talking about some theory that is going to help us in analyzing the running time of the algorithms. Again, I would believe that you have seen these results in your discrete math class. But these are actually so fundamentally, and I want to make sure that you all have them so we are in the same page. We are starting with a graph denoted by a pair of sets. One of them will be vertices, and the other will be edges. By way of notation, we're tipically going to refer to the size of vertex set as n, and the size of edge set as m. Most of the algorithms that we are going to talk about have running time that depend on the number of the edges in the graph, but usually when we want to report the running time. we wanna report them in terms of the # of vertices,n . So what we want to do before we go on is that we want to make sure that we completely understand the relationship between the number of vertices n and the number of edges m. That is what this slide is all about. So the question is if I tell you I have a graph that has n vertices, how many edges does it have? First thing we're going to talk about is the least possible number that such a graph would have, so we would have no fewer than what? the answer is depend on whether the graph to be connected or not connected. So what does it mean by the graph to be connected? See? I knew I couldn't go through the definition without saying them. What does it mean for a graph to be connected? 