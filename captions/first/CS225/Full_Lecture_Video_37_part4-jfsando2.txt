Last 2 digits.  so you had to know your four's time tables pretty well right? Five? easiest one. yeah in the one's place. good. six? two and three. seven. nobody ever knew a rule for seven right? how about eight? was there a rule for eight or did teachers... Last three digits. oh boy. So you have to pull out  your long division skills for that one almost no matter what okay. Or get to know your eight time tables pretty well. okay fine. How about nine? yeah sum of the digits again right. okay alright it's that whole seven thing that always bugged me a lot. because with eight you can like divide in half and then do the four trick right. Alright so the whole there is no rule for seven really was a problem for me in fourth grade. alright. Well it turns out that there is this nifty little graph that can help you with divisibility by seven. It is an algorithm for checking. I'm going to go through it really quickly. You will not be tested on this but it's kind of nifty. alright so you started the circle node at the top. So this is an example of a finite state machine. a particular kind of finite state machine of which a graph is a key component. For each digit d in the given number. Starting from the left as if the number is a string. Though i'm not sure it matters. It probably does matter actually. For each digit follow d blue edge and then after you do that follow a red edge. so its blue for the magnitude and then follow a red. so for example when i read the three I'm going to go one two three. got it? and then follow the red. So after the the three i'm in that state. Any question about it? Okay now let's do seven because this is fun. I'll do it in a different color even. Now we're going to do seven. Alright one two three four five six seven. oh look it brought me back to where i was. And then one. the red one to go here. Now zero. So i don't go anywhere but i do have to follow the red. and then three. one two three. Follow the red. oh look. if you end up back at the circle node, your number is divisible seven. yippeeeeee. yessss. not even kidding. alright any question about it? yeah? Did somebody get a PhD for this? probably not. [laugh] alright so you know. i'll tell you how you come up with it. It's cool. In CS what used to be three seventy three you studied these things. And this would have been a homework problem in that class. when it was offered a long time ago. i'm not sure they have time for fun little puzzles like this now. but yeah this is what do you think each vertex represents. mod seven very good. my guess is that three thousand is whatever the first one is mod seven. and then the seven gets you back to that same spot. is that right? it takes you once all the way around. oh and then one more. so i don't know exactly. but it has to do with the values mod seven together with the divisibility of powers of ten mod seven. a number theory class would also make this pretty clear probably. Alright any other questions about this? To graphs! Look it's a graph. these are graph applications. who knew? you could write code to do this super fast. oh when i first got here. The faculty person who ended up being my adviser and who is now a friend told me that finite state machines were just programs. And I went what on earth are you talking about? One of them is this commonatorial structure that you could build pictures out of. and one of them is a way of speaking. a way of controlling data. They can't possibly be the same thing. but he's right of course. Advisors always are. No not true but in this case he was. That basically you're changing the state of your system conditionally. If you see a three, you increase something by three. Or whatever you see here is the value you use to increment the state of the diagrams. So there's code all over the place there and i'm pretty sure you could actually write the code to do this by looking at the diagram. okay any questions about it?