can you see that tree well enough? is it clear what that tree looks like? what's the height of this new tree we have made? one, two, three, right? the new tree has height three. what's the height of this tree? four. so by doing this little mechanical operation on the structure. we actually reduce the height of the tree. now here's another question for you. what's the difference in the data between these two trees? rhetorical question. there is no difference. it is the very same data just a different tree structure and one that we like better. so that's kind of cool. how did we make it happen. so, we're going to write the code to do this together but im going to get you started. im going to guide you through this process. im going to give some labels to this. to begin with, this pointer is know as x. so croots->right = x. so croots->right = x. you know you would croot->right to do all of this if you're changing the values in the tree in the tree and we'll see the code in just a minute. but im just going to refer to it as x because it is easier and clearer in I dont have to write as much. so x is the same as croot->right as you see in the picture. so the first thing I'm going to do is assign a value to something called y. so here's what y is going to be. y is going to be this. so y gets the value of x->right which is really croot->right. we know this is not null because we know the stick exists in context. ok here's the prompt. i have now picked up the value of that pointer. so now y is holding on to 90. so now i can change. sorry im doing this all wrong. sorry. i have picked up what x->right looks like right. i held on to what x->right was which means that x->right is free to be reassigned. so what should it be in the new picture? what should x->right be in the new picture. x->right should be y->right. what am i talking about here. i'm going about that pointer in 80. im talking about what that one points to. looks to me like y->left. so x->right should be y->left. x->right = y->left. now we have picked y->right. we have done this. so that means this little box, 90's left is free to be reassigned. so what should y->left be? it should be x. y->left = x; are we done? so we have fixed this pointer is in the right place. this pointer is now in the right place. this one didn't require adjusting. those are the only two that really required adjusting right except that we need the root, right? we need the root to be in the right place. how do we do that? we need x to point to what? what is holding onto what we want? x should become y. good. so, when you do a two characters swap, so if you are to swap the values in a and b, you do this kind of thing right. a gets t b gets t... whatever the swap is. you know you need variables to swap otherwise you write over them. look we just did the same thing but with four things we started with y and ended up y gets this this one gets something else... kind of the same little circle and in fact it motivates the name for it. this is called a tree rotation.