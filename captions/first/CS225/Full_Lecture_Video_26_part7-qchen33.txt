And that is really good news, cause it means we can adjust the structure of the tree by spending a little bit more time on our inserting, and our removal, which is quite complex, but satisfying none the less. Yes. So , right , very good, so we are gonna look at this but I am gonna answer the question right now. So wait a minute, when you go back to the tree and adjusting the height, that is costing your time, and the answer to that is that you are doing that in the context in the insertion, right? like all over this is happening in the context of some other manipulation in our tree, like insertion. So we've already spending the time navigating the height. So yes, we are gonna spending a little bit more time, but not as more time the insertion will take anyway. Okay, so at each stage. In the worst case, we are just gonna do the rotation.But  it will still be the only at every level of the tree in the worst case. Actually the insertion persist you only do once, so..okay. any question so far? yes? Oh, very good. So the question is  how do I choose 70. 40 and 50. so there is a mystery here. And I consider to be diagnosing the mean for rotation okay? And it is the exactly the right question. right like.. I don' t know why I could observe that it was the bent thing instead of the straight thing except right now you do have the intuition that it is too long in the middle. we are actually, I think I have slides in two slides that help u diagnose exactly how you figure out which rotation to do. Okay, so it the exactly the right question. Alright. So here is the summary. Here is what we know so far.The 4 kinds of rotations. This one I should say this is an example of a double rotation, called a left-right rotation. so left is like a.. left modifies right. okay, still a right rotation, just a leftish right rotation. Okay, so there are 4 kinds, the singles in each direction and left-right and right- left. Okay, and they are all symmetric. So that means that the code we already know how to write code for one of them. they are local operation that is A,B,C and D and also, all subtrees on the other side of the imbalanced subtree.None of those are affected. em.. And we are just read adjusting the structure of binary subtree, we are not breaking a binary search tree in anyway. Okay? Alright, so our goal is to use these rotations to maintain the balance of binary search tree. Em.. this particular hight balanced trees, these are called AVL trees. Where AVL is .. there are collection of initial, for this guy, whose name by always forget, Adelson-Velsky, and Landis, two people, and this was done in 1962. okay? alright, so here is what I want to say about that so these are two people who do this, they are particular kind of tree, there are other balanced tree, you will see reference to see red-black tree, if a interviewer or if you reading a research paper or if somebody refers you red-black tree and kinda of quiz you about it, you say in our discrete structure class. We did AVL tree instead. And I will go ohohoh, you can get red-black tree if you know AVL tree.  When I took the theory class, took what is now 374, here,  decades ago. They did red-black tree there, and they may still, I don't know for sure. Alright, and the thing I want you to point out is look, this is not all that long ago, this is relatively short time ago. It's kinda weird right? This was your grandfather invented in their career probably about.  