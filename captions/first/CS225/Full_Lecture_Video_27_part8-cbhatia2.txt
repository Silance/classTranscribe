Yeah, yeah, yeah, so he's asking how many helper functions do you need for this, I need one for height, I need one for balance factor, I need four for the rotation cases, yeah that's a lot, but yeah, but I need those constructors and you know this is what we're good at, at this point. This is what is gonna get you a gazillion dollars, but not me. Alright, AVL Tree removal. What happens if I remove 9? Ooooooh, what womp womp. Oh yeah, okay. First of all, is this tree in balance? Is this a balanced tree? Yes, it is. Because there is nothing obviously out of balance, I don't think. You can pretty much eye-ball it from here. But what happens if I remove 9? It's even better, I got a better one. What happens if I remove 10? Haha. Yeah. Alright, alright, so lets trace this a second, I'll remove 9, 10 is structurally the same. Okay. So we remove 9, and we have every reason to believe that the process for removal mimics that of insert, that is that we can kind of test after we change the structure of the tree, whether or not a rotation is necessary. Now whats interesting about this of course is that binary search tree removal invokes an in order predecessor which may invoke further cutting off of the tree, and so actually it's not even just in the removal where you need this checking of height, but also in the in order predecessor evaluation portion. But we're not going to do those details here, that's for lab. For now, we're just going to remove 9. K, now my question is what kind of rotation fixes this tree? Some kind of left rotation, correct? Some kind of left rotation which kind of left rotation? Single or double? Double. That's right. Because at that point, the balance factor here, would be 2. The balance factor here would be -1, and so it's a left-right rotation that would be necessary. Oh that's why. Because here you can use the same balance factor function, haha, I see. Alright, so in the end after we do this, I'm going to put this in red, so you'll be able to see what happens, in the end, I'm going to have 11 here, 10 there, and 12 here still. K, and this will be gone because the rotation will result in this. And then we will complete execution of that recursive call and come here, and what happens? Oooooh. Now it's out of balance. Okay? You see that? Because it's long on the side, we've shortened one that was barely long enough. Right? This side was barely long enough, and we've shortened it. So that creates another imbalance. So what kind of rotation is gonna fix it? A right rotation, right. Yes. Very very good. And umm what do you think a right, or a double or a single? I think either one of them works in this case, but we might as well go single here, right? So it's going to result in a right rotation about 8, now think about it, this tree rooted in 8, might barely have been long enough, and we shortened it. It might be a subtree, this tree that I have painted here might be a subtree in some larger structure. And it might barely have been, long enough, tall enough and we just shortened it. So it's possible that actually fixing things at 8, would cause a need for a rotation farther up the structure. So it is possible in fact that when you do a removal, you may have to do rotations all the way up the tree. Any questions about that? You see how that is possible? Okay, let's move on. We'll see how far we get here. Just a little bit. So,