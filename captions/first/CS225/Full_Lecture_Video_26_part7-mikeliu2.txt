And that's really good news because it means we can adjust the structure of the tree by spending a little more time on our insertions and on our removals which is quite complex but satisfying nonetheless.  Yes?  So right very good.  We're gonna look at this but I'm going to answer the question right now.  Wait a minute.  When you go back up the tree adjusting the height that is costing you time.  And the answer to that is that you're doing that in the context of the insertion.  Right?  All of this is happening in the context of some other manipulation on our tree like insertion.  So we're already spending the time navigating the height so yes we're gonna spend a little bit more time but not more time than the insertion would have taken anyway.  So at each stage in the worst case we're just gonna do the rotation but it will still be only at every level of the tree in the worst case.  Actually in insertion there's proofs you only do it once.  Ok any questions so far?  Yes?  Oh very good.  So the question is how did I choose 70, 40, and 50?  So there's a mystery here and I consider it to be diagnosing the need for a rotation.  Ok?  And it's exactly the right question.  Right?  I don't know why I could observe that it was this bent thing instead of this straight thing except right now you do have the intuition that it was too long in the middle.  We're going to actually... I think I have slides we have two slides that it help you diagnosing exactly how you figure out which rotation to do.  So that's exactly the right question.  Alright.  So here's a summary.  Here's what we know so far.  There are four kinds of rotations.  This one I should say this is an example of a double rotation called a left-right rotation.  So left modifies right.  Still a right rotation it's just a leftishly right rotation.  Ok so there are four kinds.  The singles in each direction and left-right and right-left.  And they're all symmetric.  So that means that our code we already know how to write the code for one of them.  They are local operations that is A B C and D and also all subtrees on the other side of the imbalanced subtree none of those are affected.  And we are just readjusting the structure of the binary search tree we are not breaking the binary search tree in any way.  Alright so our goal is to use these rotations to maintain the balance of binary search trees.  These particular height balanced trees are called AVL trees.  Where AVL they are a collection of initials for these guys whose names I always forget: Adelson Velski and Landis.  Two people.  And this was done in 1962.  Alright so here's what I want to say about that.  So this is two people who did this.    There are this particular kind of tree.  There are other balanced trees you will see references to red-black trees.  So if an interviewer or if you're reading a research paper or if somebody refers to red-black trees and kind of quizzes you about it you say in our Discrete Structures classes we did AVL trees instead and they're go oh oh oh you can get red-black trees if you know AVL trees.  When I took the theory class when I took what is now 374 here decades ago they did red-black trees there and they may still.  I don't know for sure.  Alright.  And then the thing I like to point out is look this is not all that long ago.  This is relatively short time ago.  This is weird like this is when you're grandparents were at the height of their career probably... about.