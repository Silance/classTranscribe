Of a place and you need instant access to the right child of an index. okay, now I'm going to do something here that you may not like but will make your life a lot easier. Instead of just laying these things out in the array at the front, I'm actually going to place the 0 element of the array here and we're going to leave it empty. And so the root is in array location one. Given that, I want to know a function. A function that when given an index can tell me exactly where the left child is. So given an index, where's the left child? 2i, good. You see it? The left child of the thing in index i is 2i. Boy, we can do that fast. That's a bit shift right there. So, we can find children very quickly. And where's the right child? It's always right next to the left child right? So it must be 2i+1. Okay. That's miraculous. I want you to pause for just a second and think about the parallels to memory here. An array index is really just an address. It's like a local address for your data. It's sort of like we have pointers. we're implementing them in our current space, in the current space of our array, right? So, it's still the case that given the location of one piece of data, we have quick access to the location of another piece of data. So it's sort of like these indices themselves are like addresses. Where is it? Oh, it's over there. Either at a memory address or an index. It's still sort of the same way of referring to things. Okay, another thing we get almost for free here is parent of index i. So, what's the parent of index i? It's floor of i/2. Okay, so you can integer divide by 2. Any question about it? Is it good? So this is cool. This is cool, we don't have to worry about pointers, everything fits in an array and we can navigate around it. You can write functions that say go left. You can write functions that say go write. It's only the nature of those functions that's changed. Any questions about it? Okay, fine. One thing that will be important in our analysis is an understanding of the height of the structure. The algorithms we write will be proportional to the height. Okay, so I want to know how tall this thing is. How tall is it? It is log(n). So the maximum height of a complete tree containing n nodes is log(n). It might be log(n)-1 even. I think it is log(n -1. Okay, so how about I do this. Okay, any questions about it?