Alright. There is a dice roll, kind of random, right. Here is how we gonna transform any dice roll. We are going to give ourselves bins for each number. Hey we are going to give ourselves bins for each number so here are all the ones, here are all the twos, here are all the threes, here are all the fourths, fives, and sixes. Okay. And then we are going to take the five dices and put them into one of the bins. So in this example, we are going to have two dices in the ones, hmm, one dice in the threes, and two dices in the sixes. Okay, now I assert that if I give you an encoding like this and you can tell me what the dice roll is. And if I give a dice roll, you can give me the encoding for it, yes.  So counting the number of encoding is the same as the counting of dice rolls. Yes? Just nod your head if you buy that, okay? Alright, now how do we count the encodings? How many different things are there to lay out an encoding like this? There are five dices and one two three four five division between dices. So there are ten positions in the encodings, one two three four five six seven eight nine ten. Half of them are going to be divisions between, and half of them are going to be dice. So how many different ways are there of creating such an arrangement? Ten choose five. Very good. So it's ten choose five, is the number of the size of the key space. Any questions about that? I need to do it quickly. Hmm, so for example, I am gonna lay down a random one of these that contains five divisions and five dies. You want this one to be a division or a die. Yeah, okay, division, die, die, division, division, division, die, division, die, and this one has to be a die. That corresponds to 0 ones, 2 twos, 0 threes, 0 fours, 1 five, and 2 sixes. Does it make sense? See that? Okay, you are not gonna be tested on this. This is for fun. So how big the number, ten choose five? Ten times nine times eight times eleven times six divided by a little bit but not by a lot. So about, ten to the third, thank you, its around a thousand, I am guessing. Okay, 252, ten choose five is 252. Okay, fine. Alright, what we just figured out is there are 252 different dice rolls you can have. How many different mappings are there? How many different targets are there, keys, that they map to? Ten! Right? You can have ten different values. So. Actually, it's a slide for this. In this Ks, your key space is huge, your key space is large, relative to your table size. Relative to all the arrange of your keys, of your hash table, so there must be a lack of one to one there. So let's talk about this, let's go backwards for now. So what's the hash table? Let's go way back. Forgive tails around the rolls. This is all meant to give you some like a domain to which think. But now let's go way back, to the definition of a hash table, we need to create a hash table. Here is what we gonna need. We're gonna need an array, okay, it's kind of obvious, that's the tables where the implementation level where actually going to store our data. We need some hash functions. You've seen a perfect one, a super good one and you've seen a bad one. And we all know right now is that this idea of bijection is a good one. Okay? Mathematicians still to these days spend time thinking about good hash function. Creating a good hash function is not a solved problem. So we are going to be using hash function that other people create largely.  And then finally, we are going to need, what we gonna call a collision resolution strategy. And this is simply a true confession that most hash functions will not be one to one. What you do is if two things do map the same cell. Hash functions are not generally one to one.