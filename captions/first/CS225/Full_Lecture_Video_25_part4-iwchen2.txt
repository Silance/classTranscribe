Ohhhhhhhhhhhhhhhh. Ok. So notice when you're building these trees that you are making a sequence of left-right decisions. You are making sequence of left-right decisions, right? The first thing is always going to be the root and then you're going to decide whether the tree is going to have the, uh, whether your next data element is going to be something smaller in which case you go to the left, or something larger in which case you go right. So, it's simply each one of these tree is simply a, uhh, a sequence of decisions of whether you go left or right. To re-enforce that, I can write down right left left right right right left. I can write down n of these and it prescribes a tree. How many choices are there? Well there are n minus one choices. There's one for each edge here. There are n data elements n minus one edges, and there is a choice of right or left for each of those. And so in total it's two to the two time two times two times two to the n minus one times. Yeah? Because, uhmmm, here's how I really do it. For data equal to if n equals two, how many trees are there? How many trees are there for n equal two. two right? So this is how I really do it. I go oh gosh if it were two to the n that would be four. HMMMM. It must be n minus one and I check that out. I'm serious. Simplify your problems. Always simplify your problems. Ok, so two to the n minus one. Also, recognize that the data is the number of nodes, but the decisions for where the tree goes are edges and there are one fewer edge there's one fewer edge than yes. Mike? Oh yeah, this is a tree. oh yes, this is definitely a tree, no cycles here. Oh what is it? Rooted. hehe. A connected, acyclic graph that is rooted and ordered and binary. Ok, Alright did you have another comment? ok. Alright, anything else here about this? Alright. I didn't know I didn't plan. Alright. Is this a big number or a little number? A LOT. This is a lot of bad tree. Which means that it means that we really can't count on the order in which the data comes at us to use as a criteria for building these structures. Right. If we just build this structure using this strategy, but okay I'll just enter into it whenever you give me data. It's possible. It's possible that you know that we're gonna get a bad tree, and that height that the algorithm insert remove and find will take us a long time, because we have this tall tree. Ok? Alright. Well, uh. We should quantify this. We should quantify this.Ok. Alright. So, here's what we're going to do. We're not happy with Big O of h for running time, because people who listen to you argue about the efficacy of your algorithm always want to hear about there running times in terms of the amount of data your structure contains. So the analysis, whoops, the analysis