alright, any questions about that? so, if we forget to say it, we will always mean the least big O possible, you probably recognized that I can put a 2^n in there and the inequality would hold in almost everything that we do. Alright! Let's get started. I'm gonna draw last time's picture very quickly, I tried to do it in PowerPoint, and I'm just not a POWER PowerPoint user. I failed.... so here's the running time of our algorithm. We don't necessarily know how it's characterized. We don't know all kinds of things that is not necessarily analytic. But we have a feeling that there is this other function somewhere that we can use to recollect the running time of our function. We also don't know what this function looks like, but actually we do know what it looks like. In this particular example, we are going to argue that the running time is the log of the size of data. The reason we have the appropriate running time is because of the structure of our true. Because of the height of a balanced binary tree. We are not just holding it up in the air. It was a good guess based on the way we build the tree. In fact for a regular binary tree, we could't say this. we can't say it's log N, we can only say it's O N. We can't prove its log N. Ok, But, in the definition here, we allow for some mushiness. Basically, we allow that function, whatever it is, to be pushed by a constant scale factor(positive), whose intention is to push that function up a little bit. And we also allow for some "mosh" at the start. Now i'm going to draw the c*g(n) in an exaggerated way because there's something that I wanna illustrate concretely on the picture. So I'm going to draw this c*g(n) like this. And maybe I have drawn g(N) poorly. But it doesn't matter too much. Now, is f(n) less than c*g(n) like what we want in this inequality? sometimes it's the right answer. Is it forever less than eventually? Yes! So we have a bound here, beyond which, f(n) < c*g(n）. If i were to label this point on the x axis, what would it be? it would be K. I'm doing this carefully here because we are going to... there is all kinds of off by one error, and I don't wannt deal with that kind of stuff. So what we are going to do is to invert this argument completely. I haven't done this practice in a while. Alright, so where does f(n) go now? it goes like this, right？ is that what f(n) looks like? g(n) as I have drawn here, it goes a bit farther to the x axis and it goes forever on the left side of f(n). so g(n) looks like this, right? so c*g(n) now looks like: ohhhh boy! looks like this right? 