on a tree. and this one is a characterization of the tree that uses that measurement. ok say so the vocabulary is the same but there is a subtle difference in their application. alright, so you say the tree is height balanced if it is an empty tree. an empty tree is height balanced. or, if it is not empty, then you know the recursive nature of this definition says whatever is true for the entire tree much be tree for the subtrees. and, i think, what you wanted me to write here was b = 0, but i didn't. i wrote the absolute value of b =< 1. so, rather than demanding that a binary search tree be perfectly balanced, and all of its subtrees, we allow little wishy washyness. we allow a little bit of imbalance. and the question is whether that's a big sacrifice or whether it kind of gets us where we want. any questions about that before we go on? ok, so, is the tree on the left, height balanced? ok, i'll say no, it is not. it is not height balanced. now, I want you to find me the subtree that is not balanced. the subtree rooted at 51. very good. so look at 51 at that node and what you observe is that you know the height of the left subtree is zero and the height of the right subtree is two. i don't ever really think of the heights of those trees. I kind of eye ball it and look at the difference in the levels. oh look, there is a subtree where the left and the right are different by two. so, hence, this tree is not height balanced. alright, let's see. so, what we are going to do moving forward is take our earlier observation that we prefer mountains to sticks. we're going to view it as an operation on the tree to go from a piece of the tree that looks like this to a piece of the tree that looks like this (mountain). and the piece of the tree that looks like this is going to be based on the observation that this example tree is out of balance and by doing some little operation on the very same data we create a tree that is very nicely balanced. so now let's apply that thought. that impression, to this tree. where is the stick in this tree? where is the stick that we might want to change? where is the string of nodes all of which play into what is an imbalance? why there it is. so starting at the node that is out of balance. the lowest node in the tree that is out of balance because it is possible that there is another node out of balance, but starting at the lowest node in the tree that is out of balance, we are going to observe that anything that looks like this, if we apply this magic operation and just change that portion of the tree, we could actually change the structure of the tree in a way that reduces the height. we will talk about that in a second. there are no technical details. by the end of the next slide you will know how to do all of the pointer assignments necessary in a pointer based tree to make that happen, so if it feels technically a little mysterious right now, that is fine. ok another question. how would we find 51 and determine that it was out of balance. what would be an algorithm, a loose description of an algorithm to figure out whether or not 51 is out balance? that's a hard problem, right?