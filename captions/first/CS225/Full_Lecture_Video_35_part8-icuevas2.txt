Yep, yep, Yes. Alright. Any other questions about this? Do you want to review another example? No, not necessarily. So the question is, do the values inside here. Do the values represent the height? They happen to represent the height in this particular example. Actually they don't quite represent the height. So if these were student names. Except for this one. These would be roots. This says my parent is identifer one. Identifier's one's parent is a root. It has no parent. So the entries are identifiers. Anything else about this? Yeah, let's do one. No, there would be nothing to do. Because they are already in the same set. Yep, Uhh, one two, yes. That's right. Because you only ever take the union of two different things. You might end up creating two different things. You might end up creating a loop, I don't know, ok? A union of a pair of things will still just be that thing. Just like sets. Just like the sets you've known since you were a third grader. Ok how are you doing? Any other examples here before we go to a bigger one? Ok, so let's clarify this and do it in a little bit larger of a context. We're going to the games. But notice, again. That there are no games. There is no indication of who likes which game. There is no angry birds appearing anywhere in the descriptions. If you
re ascribing meaning to your sets, you have to keep that set separate. In fact when we use this structure which will happen in mp7. When we use this structure there is actually no meaning to the sets, there all just sort of a status. They keep track of a status. Ok, so let's draw a diagram. I have created the structure, in memory that denotes those sets. Ok, so this is what memory looks like. I want to draw the uptrees, the pictures of the uptrees that correspond to this memory, in what it looks like in the array. So zero's parent is? So zero's parent is? Four, ok. Four's parent is? Nobody, ok. So I've got zero done, I've got four done. Eight's parent is four. And one's parent is eight. And I just started with that one, because zero came first. That is the only reason. Two's parent is five and five is a root. Two's parent is five and five is a root. And nine's parent is five. Seven is a root by itself. Three's parent is six, which is a root. Ok? So now, what do I get back when I do a find of 4. If I do a find of 4, you go to 4 and you walk up, but there is no place to walk. So what do you return? 4, is correct. Find of 8, returns. Ok we go to 8, it goes to 4, 4 is a root, so this returns 4. So this is true. Now this one get's interesting. This one gets interesting. How do we take the union. First of all, how do we evaluate this? What's the find of 7? What's the find of 2? Five. Are they the same? So, we should take the union of those which in this case, which will take this seven and point it to five. So, this seven is going to become five. No, it doesn't point to two. You always do the adjustment at the root. Raise your hand if this surprised you a bit. Because this is a ternary three rather than a binary tree. Oh my gosh. Oh my gosh. Ugh. Ok. 