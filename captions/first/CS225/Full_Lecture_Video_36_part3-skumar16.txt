any questions about that? okay, none? it's really quite in here. We should play music or something. Do you know who Laurence Angrave is? He's the instructor for 241. This morning he sat in my office and he wrote a parody of blank space for his students. I'm like you genius, that's the teacher of the year right there. Alright, uhhh, so whats the running time... how did that even come up? Blank space! Its a blank space! Thats where it came from. Yea, its blank space right there. What does the running time of this function depend on? Not the size of it. Kind of. Depends what you mean by size. It's the height, thats right. You're going to walk up the subtree, and so the number of steps, the number of effectively iterative calls to find depends on the height of the tree. In the worst case, I agree with you, you could just have the chain, kind of like the one on the right, there. I think you could come up with a way, a set of unions that come up with the worst case thing. This would be O(n). But thats not particularly interesting. What I want to know, is what is the very best tree look like. Whats an ideal tree? What do we wish these trees look like? A binary tree? No, we can do better. We can also do better than avl trees. These are not necessarily binary trees. We can have a root, lets say 4. It should be 13 if we're talking about Tayler Swift since thats her favorite number you know. I could do some real damage to my U of I freshman, right guys. Alright, so this is an ideal tree. I have her on my brain today, I should shake it off. Alright, lets take a union, okay. Lets take a union here. all we have to do, look it. We got the root of two trees. All we have to say is s[root], one of the roots has to have a parent who is equal to the other. Now, as I said, this is an arbitrary choice at this point. There is nothing wrong for me to write down there. I think what i did was always this. The first one points to the second. I think it is that I said, the parent of root 1 becomes root 2. Alright, whats the running time of this function? It's constant time. It's just an assignment. Its just a change of a value. So, what we want to do is aim towards this, because then our finds are fast. What we have now is a case where we can create, you know, given our current code, unfortunately, things can look like this. So lets get a little smarter. In that example, should i do? what would be smarter? should i do this or should i do this? Which one? 