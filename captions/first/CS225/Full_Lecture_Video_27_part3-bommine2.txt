[gibberish] yeah, 16, lets try 16, see what happens. Okay, see where 16 is gonna go? Whats the lowest key out of balance when I insert 16? 15. Very good. 15 is the lowest one and its the root of this sort of dog leggy thing. So lets do this. See what happens. 16, there. Oh! uh oh! Broken, uh oh. Got it? See it? Alright, um. I wanna do a double one. I mean uh, one where its not quite so obvious. I'm gonna remove 16, I'm sorry, 15. Oh well, ha. I removed 15.Oh. I don't know what I wrote. There is no 48. Okay, are you tired of this? Is anybody have any specific questions about it? The applet itself, the name or URL is on your handouts so you can play with it a little bit yourself. And we'll probably talk about it a little more when we do removals. So you can see the removal process in action. So for now, I wanna get to work. Okay. So last time, umm, last time we were right smack in the middle of diagnosing the correct rotation. Now, this process is one that we're using to inform the code that we write. And, there is the "easy way to understand whats happening" mechanism for writing the code, and then there is the um,"thinking a little bit farther so that your code looks beautiful" part of writing the code. So, I'm gonna sort of start with the easy way of looking at it, and argue for the more elegant code in this slide. Okay, so. Pretend our tree looks like this. And we have T. T is where we're going to first detect an imbalance, and furthermore I'm gonna tell you that insertion has happened somewhere over here, okay? So, insertion has happened somewhere over here for now, AND, we've kind of walked up in this postorder mechanism after the actual insert has taken place. And we get T, we evaluate the balance and go " Woah" The balance equals what? There's an imbalance there, what does that balance have to be if the insertion has happened over here? That is, we've increased the height over here, and T is out of balance So what does the new balance have to be at T? Balance is right minus left. How about that. Does that help? Height of right minus height of left. 2 is correct, cant be anything else. If it were 3, that would mean we have done several inserts without rebalancing. And we're not gonna do that. So balance factor T is 2, you can check that with random function that checks that. And some kind of, what does your instinct say here. Some kind of, what kind of rotation? Left rotation will rebalance the tree. Thats all we know right now. Further, I will tell you that the insertion occurs here. Okay? Now, when I first wrote this code, I said look, I can tell if the insertion happens over here. Because it just means that the key that we;re inserting is bigger than the key in T's right. OkaY So, saying this statement "insertion occurs in T3 or T4" is equivalent to saying "the key that we're inserting is bigger than T's right key".