Or a prescription for what to do if your hash function is not 1 to 1. Ok we talked about 2 different kinds of uh collision resolution.  How did I know that was the 3rd thing you guys were gonna tell me, I don't know.  2 different kinds of collision resolution.  One was uh open hashing and the example that we talked about was separate chaining.  The other one was closed hashing.  And the particular example that we talked about was called linear probing.  Now we had just begun to address some problems with linear probing.  We talked very briefly about the problems with linear probing um under allowing for removals from the structure and it's kind of a technical issue.  You can get over it by augmenting your structure with flags that talk about the fact that data has been removed.  It really really is the details of the implementation.  The second problem that we're gonna talk about in probe based hashing is fundamental.  It affects the idea of probe based hashing profoundly and makes you sort of question whether this is a good strategy for hashing.  Ok so my inability to get us started today was not my first issue this morning.  My first issue this morning came about when I tried to make sure that this link right there which has worked for 5 years in teaching this class still worked.  And of course the internets relationship with java has changed since the last time I taught this class and that no longer works. Yeah, so what this means actually is that I have a project if anybody wants to reimplement this in HTML5 I'm happy to describe to you what this used to do.  It was awesome, again, it was awesome. It was perfect but its gone. So you'll just have to take my word for it.  Um here's sort of what it did.  It loaded up a hash table with a bunch of data. Ok so i'm gonna do that, i'm gonna simulate that in this array here.  Imagine that that array has 1000 cells or so and I load it up in such a way that you know these chunks are all filled.  And then we've got some individual ones maybe.  Ok and then we add more data to it.  Ok and then we add more data to it.  So say somebody says 200 and asks me to hash it in. I would put it right here.  And we would have to wait for this much linear probing to happen to add 200 right? And as we hashed into that region effectively we're going to close up this gap, right? Now what's the probability I hash into this region under SUHA? There's a couple answers that would satisfy....be satisfying here.  What's the probability? I understand its a nebulous question there are a couple ways of answering it.  You could answer it under SUHA in the context of this table if you like. Or you could answer generally.  What's the likelihood that a new hash function or that a new hash a new key gets hashed into that darkly shaded region.  Anybody wanna talk about it or have a guess or want to clarify the question?  Yeah? 1 over table size would tell you the likelihood of hashing into any 1 cell.  Ok? So what is that...so the answer is sitting right there.  So if this is a whole bunch of cells, contiguous cells, what's the probability of hashing into that collection?  