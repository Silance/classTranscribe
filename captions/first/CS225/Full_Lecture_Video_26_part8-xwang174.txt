So It kind of makes it like it's not calculus. The reason we choose this height balanced tree, I strongly believe, that if you got a friend in white board, you could figure out how to do this yourself. You can just as easily has your names on it as these people who happen to be interested at that time. It makes feel very accessible to me. We are moving toward implementation. You know the mechanics of doing a rotation but how to deploy it at all. That's OK. We are going to talk about that. We need to be carefully how to maintain the height and we need to detect the imbalance. So this one I feel like you already know. You understand the need for the second one and the third one we haven't talked about at all. OK, we already kind of talked about this. I forgot that I had a slide for it. Is this tree height balanced? What's the lowest node in the tree that is out of balance? Five? Good. And what kind of rotation would you expect to restore the rotation? This is intuition right now there is no algorithm for you to apply. So this is all you intuition for what we have done so far. What kind of rotation? A right rotation. Yeah, a right rotation. Do you think it's single or double? Single, because it is not right here that is long. Good. The only thing I want you to observe is that the
height of this one is going to change, the height of this one is going to change, and in fact the height of this one is going to change on the way. It is a recursive call on the whole structure. Keep in mind that this piece might be a subtree of some much larger structure whose height may also change. Because this is the root of the longest path and the height of the structure further up would change as well. Alright, any questions? We already did this. OK, this is the moment when we have to identify the need of a rotation. Here is the thing. Last night, I puzzled over this slide for a while because I never like it. I never like how this slide goes. Here is why. It's starts with the assumption that you have inserted into a particular place. The thing is that's true. That's what determines the rotation that we do. So I couldn't think of another way to do this. So, it the insertion was in subtree t3 or t4 and the imbalance is detected at t, that's the setup. Now, what determines whether the insertion was in subtrees t3 or t4? We were doing an insertion. What would that have meant? It meant that it was greater that t's right. So insertion in subtrees t3 or t4 means it was greater or equal to the key of t's right subtree. So this is sort of an equivalent. t is greater or equal to t's right. Any questions? That's what it means. And the imbalance the insert is detected at t. Remember that's just look at the height of the left and right of the subtree. So that's looking at the left and right of the subtree. And imbalance means that it's heavier on the right that imbalance is two then, the height difference is 2. Then what do you think I'm going to write here? What kind of rotation do you think is going to fix this? Left, good. Left rotation about r rebalances the tree. I think it's easier to gage this if we judge the insertion position by greater or equal to t's right. But actually we can also observe that the balance factor at t's right actually has to be one.