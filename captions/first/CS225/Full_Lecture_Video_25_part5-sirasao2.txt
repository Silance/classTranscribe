The analysis or the argument about how good the algorithm is should be in terms of n. We can make these arguments if we completely understand the functional relationship between h and n, now here's what we are going to do. h in this context represents the running times of our algorithms. H is a running time, a stand in proxy, we recognize you know it is some constant factor, we don't know what the coefficient in front of h is. But what we are going to do is we are going to argue that h is is at least this much as a function of n, um, for running time is at least this much for a function of n. What does this mean we are doing? We are in official terms putting a lower bound on the running times of an algorithm and we are saying that if somebody comes to you and says they have a better algorithm, they say they have an algorithm that is less than less f(n)...You go that is not possible, your algorithm exists. That is what a lower bound gets us. Let's see, no algorithm can do better. Can have better worst case performance, but at the same time we need to argue about the relationship of the running time on the top end, that is we want an upper bound on the running time because that in fact we say, a tight upper bound, because that's actually the currency we use to argue which algorithm is better. I got a structure that implemented dictionary in constant time. That means an upper bound in worst case constant time. So we will talk more about that. Alright as a reminder, because we are going to be arguing about height and it will be recursive and need this, I want to you to remind me what the height of an empty tree is? Do you remember the height of an empty tree? Zero? -1 is right. If that bothers you remember that the english definition of height is length of the longest path from root to a leaf. An empty tree has no root, so it is sort of an indeterminate question in the context of our understanding of height so we get to make it anything we want, so we choose something that is convenient. that makes this recurrence work well for us. Alright, any questions? So it turns out we are going to do this one first and this one second, this is kind of a complex argument. And if instead we equivalently argue this 