on a tree. and this one is a characterization of a tree that uses that measurement. so the vocabulary is the same, but there's a subtle difference in their application. alright, so we'd say that a tree is height balance if it's an empty tree - en empty tree is height balanced. or if it's not empty then the recursive nature of this definition says whatever is true for the entire tree must be true for the subtrees. and I think what you wanted me to write here was b = 0, but I didn't. i wrote the absolute value of b is less than or equal to one. so rather than demanding that a binary search tree be perfectly balanced in all its subtrees we allow a little wishy washiness. we allow a little bit of imbalance and the question is whether that's a big sacrifice or whether it gets us where we want. any questions about that? ok, so is the tree on the left - ignore the little trees - is the tree on the left height balanced? ok. I'll say no it's not, it's not height balanced. now I want you to find me the subtree that is not balanced. a subtree rooted at 51 very good. so take a look at 51, at that node and what you observe is that the height of the left subtree is zero and the height of the right subtree is two. you know I don't ever really think about the heights of those trees. i kind of eyeball it and look at the difference in their levels. oh look, there is a subtree where the right and left are different by two. so hence this tree is not height balanced. alright, let's see. so what were going to do - what we're going to do moving forward is take our earlier observation that we prefer mountains to sticks and we're going to view the chance. we're going to view it at an operation on the tree to go from a piece of the tree that looks like this to a piece of the tree that looks like this. the piece of the tree that looks like this is going to be based on the observation that this example tree is out of balance. and by doing some little operation on the very same data we create a tree that is very nicely balanced, thank you very much. now let's apply that thought, that impression to this tree. where is the stick in this tree? where is the stick that we might want to chance? where is the string of nodes all of which play into what is an imbalance. by there it is, k. so starting at the node that is out of balance, the lowest node in the tree that is out of balance because it's possible there was another node out of balance. but starting at the lowest node in the tree that is out of balance we're going to observe that anything that looks like this. if we apply this magic operation and just change that portion of the tree we could actually change the structure of the tree in a way that reduces the height. and we're going to talk about how  to do that in just a second. alright, any questions about that? no there are no technical details. by the end of the next slide you will know how to do all the pointer assignments necessary in a pointer based tree to make that happen. so if it feels technically a little mysterious right now that's perfectly fine. alright so I have another question for you - would be an algorithm, just kinda a loose description of an algorithm to figure out whether or how would we asses, how would we find 51 and determine that it was out of balance? what not 51 is out of balance. ew that's a hard problem, right?