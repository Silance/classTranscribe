Okay and now this is gonna...and the line for k is here, okay. all right so now what we're going to do, so, now these are actually these are no longer the right labels right? This is if this is N and this is H.  Then these are now f inverse of H and G inverse of H(s) and this is now a slightly different C and this is G inverse of H. and now what we're going to be looking for is a diffrent k as well. K prime and this'll be a c prime, but we're gonna make the argument that f(n) is now, the inverse argument that f(n) is now bigger than, f inverse of h is now bigger than c prime, g inverse of h, okay.  It's exactly the same picture though, its just the labeling that's different. I didn't draw the graphs differently though, right? yes, uh huh. Ya because i still want it to be a function, i still want this to be the domain, in fact that's exactly what i am doing, is changing the domain of the function, to one that is dependent on h instead. Yeah I have g inverse of h there.  But f and g still live there. so what we're gonna do is take f(n) switch it over to f inverse or g(n) switch it over to g inverse and then switch it back, so we can make the argument that we want. It;s just that this argument is much easier to make because it says that the number of nodes in a tree of height h is at least this much, its lower bounded by this much.  And that turns out to a super easy argument. Alright so an upper bound, im gonna read this out loud i know how you love when professors read their power points. an upper bound on the height for a tree of n nodes, thats that picture, is the same as a lower bound on the number of nodes in a tree of height h, and this is whats going on mathematically this inversion, any questions about that? is it okay? alright, its a little trick , it should be in your toolbox of proving things about commontorial structures. proving the inverse about the inverse.  But im not sure anybody ever really talks about it explicitly its one of those things that my math professors used to do and i went how did you know to do that? Now i know.  okay so here's how we're going to do this, we're going to uh, talk a lot about this red function , we're gonna talk about this red function, sort of the green one as well they end up being pretty much the same in this example. okay so, n is what we're gonna use to communicate the true number of nodes in an AVL tree of height H, so n is the true number of nodes in an AVL tree. okay, so n you don't know what it is for sure, but if the tree has height h we're going to use n(h) to be the smallest possible maybe ill put a little h here.  So we're paramaterizing it by h sort of.  But N(h) because it may have various values.  N(h) is the smallest such tree, so N(h) is the smallest AVL tree and when i say smallest i mean by the number of nodes.  