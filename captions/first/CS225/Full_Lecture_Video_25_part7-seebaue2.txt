Now you're allowed to tell me the +1/-1 stuff. 2^(h+1)-1. Should I believe him? And that's for h>=-1? Ohh, yeah, look at that, it works. Should I believe him? No, we should not believe him. How do we prove it? Yes, this is like day one induction. This right here, this is day one induction. Super easy! In fact, I'm going to call it "Back of the Envelope" induction. Ok? Um, I already eye-balled it to check to see if the base case worked. Did you see what I did? I eye-balled the base case by plugging in h=-1. There, ok, eye-balled, check. Did it break? No, 2^(0-1)=0 m(h)=0 whew! Ok, now what is my Back of the Envelope, super quick, evaluation of the recurrence (the recursive case)? m(h)=1+2* what goes in that box? (2^((h-1)+1)-1) all in parentheses [m(h)=1+2(2^((h-1)+1)-1)]. Ok, what did we do there? We applied the inductive hypothesis, but I didn't write it down; and that's okay. [Gasp!] Don't tell Margaret. [laughter]. Ok, so what went on there, the inductive hypothesis was applied. Ok, any question about it? Is that okay? Raise your hand if you no that's not nice. Tell the person sitting next to you if that's not okay and I won't watch, if that freaks you out a little bit. So, I'm assuming you can be candid with your friends. So, have a minute of discussion, have a minute of discussion, please, like okay, not okay, I can't believe we're doing this, feels revolutionary but okay. Yeah, is Margaret still watching? Oh my gosh! I just asked for class transcription too, shoot! Ok, so, alright, any questions about it? I won't actually get the polls of the class. This is how grown-ups do induction. Ok. Oh, sometimes when it's this straight forward. Okay, any question about it? And it all works out, right, you do the math and it all works out, oh look! I did all that arithmetic in my head. Aren't you impressed? (kidding) Okay, but we're not done. Here's what we know. We know that I'm going to say this in English and write it in math, ok, we know that the number of nodes in any tree of height h is less than or equal to is no more that 2^(h+1)-1. The domain is greater than uh-oh! ok, but that's not what that doesn't say anything at all about our algorithm. Right, that's not what we want to say, h represents our algorithm, the running time of our algorithm so, all we have to do is invert this function. okay, I'll race you. So it looks to me like this one goes to n+1 oh I'd better take the log of that and then subtract 1 from the whole thing and I have h>=log(n+1) - a constant here. ok, now how do we say this, how do we say this using the discrete math that we know? We say that h is big omega of log(n). Ok, now do we have all of the pieces? H is at least some constant factor of log(n) right? two of them.