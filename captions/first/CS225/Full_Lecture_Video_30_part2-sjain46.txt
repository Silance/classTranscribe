The age of Miquel is 22. Any question about that? So that's kind of what the usage that you want. All right so what does return here what does value d? What's the value d? 22. That's right. Any time you refer to this thing. Any time you refer to your structure with square brackets you get the value out of the structure just as if it were an array. Now this is a model. This picture right here, this rectangle, this table is a model for what's going on. This is a programatic representation of your interface to your data, but it lives at the application level. So the question is? How do we implement this. That is what does this thing look like. What does the overloaded brackets look like? And we are kind of gonna go there. Okay. So we are gonna use a hash table to implement this thing. So I wanna talk broadly about hashing. So there a couple little definitions. I'm sorry you can take a nap during definitions if you dare. Alright, so what's a keyspace. It's simply a mathematical description for the keys for a set of data. It might be strings, like you might be able to say it is the union of characters or something like that. But it is usually defined over a set. A way to think about the keyspace here is as the domain of some function. So in any way you can articulate a domain effectively. You are articulating a keyspace. A potential keyspace. So whatever kind of thing a domain can be you can use it for keyspace. All right. So here is what we are gonna do. We are gonna use a function to map the keyspace onto a small set of integers and then we are gonna inturn use those as array indices. Now, what is this function. I mean a mathematical function. Some mathematical function.So you are accustomed to seeing denoted like this. F maps the key to, I'm gonna do it, what's the, is integers, small positive integers, is like this right? That's an I. That's a Z. There now it looks like a Z and it's small. So maybe this isn't so robust mathematically. It's a small set of positive integers. There will be no jokes today. Alright, so what's funny about this goal? What's fuzzy about is, we don't know how big small is. It's smallish. And what function are we talking about. What is that function? Well I don't know? It's just some function. Okay. What's the behavior of the function overall. So what's fuzzy about this goal is f is not obvious and this small set of positive integers is not well defined. Now here is where we are gonna use that small set of positive integers for. Array indices. Well how big is, well it depends on how much memory you have available to build this array, which depends on what your system looks like at execution. Now for the purpose of this course, we are not gonna think very hard about that. Now I encourage you to write a piece of code that allocates incrementally bigger dynamic arrays in see how big you can get Z positive to be. It will be big. You will be amazed at how big it is. But, now we don't care. We are gonna deal with that symbolically. Now, because you know any conversation we have about that right now, in two years that number will be obsolete. Probably next month that number will be obsolete. So this just means the size of an array. So this is reasonable array size. 