OK. My question is  what is running time. log(n). It was constant time to put the original value in place and then you gonna to swap all the way up. Let's write some code. So here is insert. It is if the size is equal to. Wait a minute. This is we got an array has big size. How big is that array ever going to be. If that array is full. We better grow it somehow. Then we are going to increment the size. The current biggest location place our value into that position. So that was putting five at the end of the existing chunk of data in previous example. We are gonna call a helper function heapify up from that location. That is exactly what we wanna did in the previous page. Double the size and copy the data. Here is the beautiful thing. Doubling the size means opening up the next row of the heap. Is that awesome? So let's talk about heapifyup for a minute. So the cIndex is the current index, and basically I want to know if I should keep going. I wanna know if I should keep going and so it is basically the cIndex is more than zero. Cindex is relative to its parent. If  it is less than its parent then I am gonna call some swap function, swap those keys. May be I am gonna swap intems[c] index with items[cparrent]. And then I am gonna call heapifyup on the parent. 