AVL tree, anything else? B Tree yeah, sort of but if our data is so big, it doesn't fit in memory, it's not gonna fit in memory here either. Ok? So mostly AVL tree maybe a linked list but those have been bad for a long time. Primarily, it replaces an AVL tree. You know what? I need to re-emphasize something. I need to go back to here. What's the running time of finding something in a hash table? If alpha is constant, what are these running times? They're constant! When someone tells you, that hash tables have constant time access it's because that load factor is held constant in using this strategy. This resizing strategy is used to hold alpha constant. Which means find is constant, insert is constant. And those are probabilistic results so they're average results. Separate chaining is open hashing where you just hang your data out. We talked about it last time. It was the first collision resolution strategy. Anything else about this? Let's do a lecture like this today.

So the question is if alpha is one less than the table size all over N, if I take n - 1 / n and I keep it there, that running time is gonna be constant but really bad, right? So I'm still gonna keep alpha fixed relative to the table size. So there is no n in the expression for running time because alpha is gonna be constant, even if its n - 1 / n. I'm going to control alpha. 

Alright, I have a puzzle for you. Puzzles are always safe. So, when we use AVL trees there is a constraint on the key space that does not exist for hash tables. There's a constraint on the key space for any binary search tree, in our case AVL trees that does not affect hashing. And to evoke the idea I'm going to do this. And ask you, what did I do at every vertex here in an AVL tree?

What do you do at every vertex at every opportunity of branching in an AVL tree? What do you do? Yeah you decide if it's bigger or smaller, you make a comparison. So AVL trees require comparable keys. That constraint doesn't apply to hash tables. So, AVL trees, BST in general require comparable keys.