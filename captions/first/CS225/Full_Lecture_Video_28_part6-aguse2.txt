Classic balanced but we've already talked about a little bit, a little bit about this. AVL trees are not the only cool balanced trees. Red black trees are another. there are probably a gazillion slight variations of each. each corresponding to a PhD thesis of somebody in the 70s. maybe the 60s. alright? so.. so there are probably variations thereof but these are classic and any adaptation is probably, you know, an addition of record keeping or some constant time access to part of it. things like this. okay. so here are the key contrast to them. red black trees actually allow for, uh, little strings of red and black parent so the overall height is bounded by a factor of 2logn. umm. we proved 2logn for avl trees, but in fact if you solve that recurrence more exactly, you could get it down to 1.44 maximum height but in either case they're logarithmic height. the main difference is that red-black trees only will have up to two rotations per each operation but for avl trees you might need to.. umm.. rotate upon removal with the tree. umm. avl trees have no rotation on find and I believe red-black trees might. I can't remember for sure. okay. why are we doing this? why are these such great structures? umm they're kinda cool because we can always give worse case bound of logn. okay that's good news. we don't have to worry about, you know, the ordering which our data comes in. we're gonna build one of these and the rotations will keep, uhh, the tree short, even for ordered data. umm so that's an improvement over linked-lists, arrays, and also plain old binary search trees. the other thing, the absolute best thing about avl trees is that we can use them to solve other harder problems. the type of problems that they can solve are called range-finding, that is find a, uhh, find two values be in the tree in which some query value falls, for example. or find all the values within a range of numbers. that could be done very efficiently. and nearest neighbor is a big one. nearest neighbor is a big one. so imagine your favorite, it's your dream moment. imagine your favorite avl tree. its got keys in it, it's kind of balanced. and I come to you with a key and I say, "I don't really care if this key is in the tree, I want the key closest to this one" avl trees can be used to do that whereas other faster dictionary searches cannot necessarily. so this is a big one for avl trees. umm mp6 is actually a k-nearest neighbor, has a nearest neighbor search in it. it has a slightly different structure. okay. so define some problem. let me show you. here's a problem. turns out it's possible if you're only looking for a particular key and you know what your key set is, it's possible to search for it faster than logn time. *gasp*. that's foreshadowing. dun dun dun. and the other drawback is that we really can only build these avl trees if all of our data fits in memory. coz we're poking around in ram, right? for these memory addresses for these keys, and they, our data might be so big that it in fact doesn't even fit in memory. we're gonna, these two observations define the next two structures that we're gonna look at. and we're gonna go bottom to top. so we're gonna do this one first and then later actually after your exam we're gonna address this issue. okay so that's the setup. if data is so big that it doesn't fit in main memory, where are we gonna put it? okay, so i've got data. oh, I had this very cool, weird experience about, I don't know, five years ago or so. So it wouldn't, I don't even know. Five years ago or so, I was sitting in Dan Roth's office and we were talking about doing some research on some data that involved crawling the web. And I was like, "oh my gosh the web is so big". he looks at me like I'm crazy coz, web is sitting in these 4 hardrives right behind you. like, it, he had this, it was kinda early for, to have a bunch of terabyte drives sitting there but he had a bunch of terabyte drives sitting there and, you know, it wasn't all of the web but it was still this sort of cosmic moment that this thing that I thought was so huge actually fitted on Dan Roth's desk. That was a little, a little strange for me. But nonetheless, that entire web, no matter  what fraction of the web it was at the time, that web would not fit into ram. so we couldn't build an avl tree out of all  the URLs, for example. we just couldn't do it. umm.. okay so the answer here is no. 