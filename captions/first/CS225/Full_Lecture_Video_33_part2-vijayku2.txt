Here's our next little exercise. I want you to ask me to remove something from the bag. Someone raise their hand and ask me to remove something from the bag. You ready? Do you wanna stand up? I'm kidding. Would you please remove 4? No, I'm not gonna remove 4. You don't get to tell me what to remove. Ok so the deal is that remove in this context has a special purpose. All you can say is I'd like you to remove something, I will decide what I'll remove. I will remove -42. Anybody wanna ask me to remove something? Thank you! Alright, yes I will remove 2. Ok? Anybody think they know what I'm gonna remove next? Pi is right, next? 4, that's right and then a 1000. Good. What's a better name for remove? RemoveSmallest, right? I'm gonna call it Remove Min. 

These two functions are the functionality of abstract data type Priority Queue. Our choice of min here is arbitrary. We could have done removeMax equivalently and I think you would know what order I would've happened to remove them if our Priority Queue was max centric. For our context, we use the minimum value because a priority queue is a tool for us to use in graph algorithms. This abstract data type, that we're gonna implement in a minute happens to be more useful to us if we implement the minimum version of it. 

Ok, we also typically implement a getSize function so that a client can tell how many elements are in a priority queue at any given time. what you've learned is the functionality of the abstract data type and the fact that it requires comparable keys. 

Lets go through options for implementation. I'm gonna go pretty fast through all of this because I think you know this already. Here's the thing, I haven;t look at this slide in a year and I'm thinking I might've deliberately put some mistakes here. Lets go through them very quickly to see if these function running times are accurate in the context of some obvious choices for implementing a priority queue. Here are two functions we're responsible for providing and here are a couple of implementations- an unsorted version of an array and an unsorted version of a list.