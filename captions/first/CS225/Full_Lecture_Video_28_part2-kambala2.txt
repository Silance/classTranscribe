Hello, okay, and now, this is O and the line for K is here. Ok. Alright. So now what we're gonna do. So now these are actually, these are no longer the right labels, right. This is, if this is N and this is H, then these are now F inverse of H, and G inverse of H, yes. And this is now a slightly different C, and this is G inverse of H. Ok, alright, is it clear? And now what we're gonna be looking for is a different K, as well. Ok. K prime and this will be a C prime, but we're gonna make the argument that F of N is now.. or F yeah, the inverse argument that F of N is now bigger than C times.. I'm sorry, F inverse of H is now bigger than C prime G inverse of H. It's exactly the same picture though, it's just the labeling that's different. Yeah. Uh huh. I didn't draw the graphs' differently though, right. Yes, uh-huh. Yeah, because I still want it to be, I still want it to be a function. I still want this to be the domain. In fact, that's exactly what I am doing: is changing the domain of the function, to one that's dependent on H, instead. Yeah, at G inverse of H, there. Ok, but there's still F and G still live there. So what we're gonna do is take F of N, switch it over to F inverse or G of N, switch it over to G inverse, and then switch it back. So that we can make the argument that we want, ok. It's just that, this argument, is much much much much  easier to make because it says that the number of nodes of a tree of height H is at least this much. It's lower bounded by this much. And that turns out to be a super easy argument. Alright, so, an upper bound... (I'm gonna read this out-loud. I know how you love when professors read their power-points). An upper bound on the height for a tree of N nodes (that's that picture) is the same as a lower bound on the number of nodes in a tree of height H. And this is what's going on mathematically. This inversion, okay. Any question about that? Is it okay. Alright. It's a little trick. It's sorta, it should sort of be in your toolbox of proving things about combinatorial structures. Just, proving the inverse about the inverse. But I'm not sure anybody ever really talks about it explicitly. It's one of those things my math professors used to do and I went "how did you know to do that", now I know. Ok so, here's how we're gonna do this. We're going to talk a lot about this red function here. We're gonna talk about this red function. Sort of the green one as well, they end up being pretty much the same in this example. Ok, so N is what we're gonna use to communicate the true number of nodes in an AVL tree of height H. So, N is the true number of nodes in an AVL tree. Ok, so N, you don't know what it is for sure, but if the tree has height H, we're going to use N of H to be the smallest possible. Maybe I'll put a little H here. So we're parameterizing it by H, sort of. But N of H is not a function, because it may have various values. N of H is the smallest such tree. So N of H is the smallest AVL tree. and when I say smallest here mean in number of nodes. 