We still haven't found the right spot, right? Still haven't quite found the right spot, but this is null. When this guy is null all we have to do is make a new node and return. Ok, so we make a new node and return to the black calling box. The function corresponding to the black triangle. Ok? Where this blue one is the root. Now we're going to do these steps. Is it out of balance? In the black triangle. Is there an imbalance? No. Ok, so we don't need to rotate. This should be indented probably. Now does the height need to be updated? Yes, so we update its height so now the height of that guy is one. I'll just put in there, why not. I've never really done that before. Now we've computed execution. we have accurate heights of subtrees and now we pass control back to the green calling function. The recursion at the green level. Ok and we follow those steps. Is there an imbalance? no, so no rotation necessary. do we have a new height? How do we compute that new height? It's the maximum of those two plus one. So that becomes two. There's a two written in there, I'm just going to go with it. Alright, fine and then we pass control back. Is there an imbalance here? no, so no rotation necessary, but we should update the height. Is there a new height? Yes, this one becomes three right, one, two, three. And again it's just a comparison of heights in subtrees. Alright then we pass control back up to the blue. Pass control back out to the blue and what do the steps say? Check for imbalance. Is it out of balance? Yes, ok. It's out of balance and where have we done the insertion? It's out of balance and where have we done the insertion? In the left's right subtree and so what we have here is this. Right, so we think a double rotation, a left-right rotation will fix. And then we update the heights. It may not need a new height, but I think it's height will be three after that rotation. And then we pass control back and then heights are updated again. Ok? Any question about that? I don't want to make the mess of doing the rotation here, it's not the point. The point is that we can do these things after we insert the node in its correct place. OK, let's look at some code. e-uck, yuck, yuck. this is way too much code for any one function. It's way too complex. So let's just take a teeny tiny piece of it and examine that. In fact, I'd like you to look at it with your neighbor and just sort of describe to each other what's going on in this code. You can even start with the whole function signature if you'd like. In fact you can probably fill in the blanks. If you look at this code you can probably fill in the blanks. And I should point out there are no right-right and left-left rotations. 