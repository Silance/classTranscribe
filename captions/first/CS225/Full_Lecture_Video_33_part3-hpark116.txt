Okay.  So, how long does it take to insert into an unsorted list?  unsorted list I just want to be putting values in.  How much time should that take?  Oh constant time.  Look at that.  There is mistake already.  This should be constant time.  Good.  How about removemin?  is Order(n) correct?  I want to find in an unsorted array the minimum value?  Yeah?  That is fine, right?  Okay.  So, order(n) is correct.  I would have to go on a hunt through the linear collection of data looking for the minimum.  Okay.  fine.  How about for a linked link?  if we implemented this functionality, insert and removemin using a singlylinked list?  how much would it take to insert?  constant?  I would put the new one back here right?  No, no reason to do so.  It is all unsorted.  So, when you insert, you would insert at the front.  you could do that at constant time.  Or, you have a tail pointer, you could do it at the rear.  Okay.  Fine.  How about removemin?  Still O(n).  we would have to go searching for it.  Let's suppose.  we decided we can fix this.  we will fix it by using a sorted array.  In that case, how long does it take to do an insertion into a sorted array.  two three five eight thirteen twenty-one.  And, I want to insert eleven.  How much time does that take?  Log(n), right??  Log(n) to.  how come is it log(n).  Why are we thinking log(n)?  Binary search.  Very good.  You observed the opportunity for binary search.  we used binary search to determine that eleven goes here but we have to shift the data.  So this is not true.  Oh, Gosh.  I swore when I came to school.  Today would be a better lecture course than Monday's.  Of course, that is a low-bar.  All right, How about for a linked list?  sorted linked list?  Can you do binary search?  No.  Can't do binary search.  In this case, it is big O(n) to find.  Okay, So this is the moment.  This is for find.  This is for shift.  How about removemin? how about removemin? Are those correct?  They are constant both cases?  Is this correct?  Could it be correct, If I have put those differently?  Okay.  So, I should have done, twenty one, thirteen. eight, five, three, and then it would be constant time.  It would always remove from the end of chunk of data.  Okay.  And, how about for a singlylinked list?  Is it constant time to remove minimum?  Yes, if you keep the minimum where?  At the head of the list,  what if you keep the minimum at the tail and you have the tail pointer?  So, I am going to keep the minimum here and have a tail pointer.  What do you think?  Removing that guy?  No, because I can't get to it in constant time.  Resetting that tail pointer requires a traversal of structure.  Everybody, good??   Okay, so take a look at this messy table.  And, it looks like there is some trade-off going on, right?  so we got constant time for one of the functions and linear time for the other functions.  What would be better than this?  What would be better?  log(n).  log(n) would be better especially if we were able to replace the linear time function, log(n).  Well, I am not going to tell you how good it will get.  Instead, I am going to switch gears so that is a reasonable goal.  The question is whether or not we can do log(n) and constant time here.  Just how good can we do?  Using a different structure.  Now, I want to leave this one hanging because I want to show you something completely new.  This will be more fun for you if you focus here instead of on you paper.  No.  Don't look.  Don't look.  I know you want to look, right?  but don't.  All right.  So here is a new structure.  What I want you to do is tell me everything you can about it.  Tell me everything you can about it.  Everything you think might be interesting.  Everything you think characterizes it