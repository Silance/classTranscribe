Its not called insert because its not a generalized notion of inserting into the structure. We don't have the flexibility of putting the data wherever we want. It has to go at one end of the linear structure. Similarly for pop, pop is our remove but it is not a general notion of remove at all. It is going to give you a particular value form the stack that is the thing that happens to be on top. Now here are. Now this is the uhh. This is the interface for the abstract data type Stack. It is fairly classic. You may see some modifications of this like for example some times pop does not actually return the value. Sometimes it just removes it. Sometimes there just and additional function called peek() that allows you to look at the top value. Almost every implementation of a stack that I've ever seen has had a function that will tell you whether or not a stack is empty. Umm, and then, you know, possibly, there are the big three depending on the implementation. Alright, so these three are classic and part of the abstract data type. Now notice that means that we can use this structure now because if you write code like this, you can tell at any given point what the data structure looks like. Sooo, I mean, this is just, I will bore you again if I go through this. I'm going to push a 3, push an8, push a 4, do a pop() and 4 is returned, do another pop() and 8 is returned, push a 6. So, right here, the appearance of the stack is this, okay. Any question about that? Alright, so you feel like you understand how this thing works? Ok. So now lets talk about this part, the elephant in the room. How are we going to make this happen? How are we going to implement this? Its a linear structure. Its, the stack itself is a linear structure like i said, there is a notion of a next one, so that suggests particular implementation. What are some idea? How can we implement this? What kind of structure do we know about that can support that interface? Somebody raise their hand and have a conversation with me. Nope? Alright I'll close my eyes and point to somebody. You! Hahahaha. What are some ideas? What can we do? I can use a linked list! Very good! I could use a linked list, is that the only alternative? Raise your hand if you are kind of wanting to suggest linked list but are glad that I pointed to him instead of you. Ok. Raise your hand if you might have another idea for an implementation. Could use an array! Right. At this point, at any time you have a linear structure that is a structure where your data falls right next to each other, your two alternatives to consider are linked lists or an array. Now, the technical details are yet to be discussed, we haven't talked about whether it is a dynamic or static array. We haven't talked about whether it is double linked or singly linked or crazy linked list. But, nonetheless, it is pretty easy to have a conversation about those two and in fact those are the two that we are going to consider for this. any Question about that? So just out of curiosity, raise you hand if you prefer linked list in this context, raise your hand if your favorite choice is linked lists here, raise your hand high, come on, this is fun. And raise your hand if you're kind of array-centric. You'd rather use an array in this context. I think it was about 50-50. Theres no right answer, both of these are good options. Ok? Alright, so it turns out the first one, I decided to talk about is a linked list. And here's how we're going to implement it. We're going to prepare a stack node. It should look pretty familiar to you. You've seen this before, ok? And we're going to keep a hold of the stack via the top. That is, we're just going to call the pointer that holds on to our data at the top. Ok? Umm, and, our, we're going to keep track of it's size. Ok, sooooo, uhhhh, just because, just because its a good. Any question about that part? Any  question about that part at all? Ok. Is the constructor implemented there? No it isn't. I'm going to go ahead and do this. Stack top equals NULL. Implement the constructor there. Size equals zero. Copy. Ok? I think that should lead to a question. 