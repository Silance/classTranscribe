Yeah, good. Ok. Suppose that's my tree. What is its height. Its height is zero and so in order to indicate that it's a root, I'm gonna say negative zero. How does that work. Do you have an idea for solving the problem, Nathan. Just a minute. What. Very good. Right, so, you know, I'm just gonna bump it up, right. I'm gonna, I'm gonna not say that zero. I'm gonna say it's one instead. So, it's gonna be, you are gonna store the negative of the tree height plus one. So I'm gonna store negative four here whoever said that was correct. Ok, any question about it. Just a little hack. That happens to be quite convenient. Alright, umm, let's talk about the other alternative, the green preference. Here's the thing. This time, this time we are gonna take this ginormous tree and say wow, that's a big tree. I don't want to increase height of that many nodes. So I shouldn't make it to point something new. Ok. It's a big tree. I don't wanna change the heights of lots of things I might be looking for later. And so, what are we going to do instead is take the smaller tree in terms of number of nodes it contains, and go ahead and increase the distances to the root for each of those. OK. So, this increases the distances to the root for the fewest nodes and the idea is that you point the smaller tree to the larger, where smaller and larger are in terms of number of nodes. OK, so I can do part of this myself. Four should point to seven. What should seven's value be. I can even do this part. Seven's gonna be our root and it's, so, its value's gonna be negative, but what else should we store there. Yeah, the new size of this structure, right, the new number of nodes in the structure. OK, fine. I think that twelve has been somehow changed from last time I talk in the class. OK. Any question about it. Is it good. Alright, so what happened. Where did that twelve come from. We used to have two trees. We used to have two trees. Umm, this one would have been negative four. This one would have been negative eight. And so to get this new value here, all we did was add them. That's right. Any questions about it. Alright, both of these schemes for union guarantee that the height of the tree and thus the running time for find is, what do you think. What do you think this does. What do you hope this does. What would be super good news. Constant time would be great news we can get there. Log n, right. These, both of these schemes for union guarantee that the height of the tree is big-oh of log n. There is a third matrix that you can use for, for deciding who should point to whom, a third mechanism for smart union called union by rank and we don't talk about it here. But it's, you know, it's similar sort of like the, the height of the largest embedded perfect tree, something like that. So union by rank is also sometimes used 