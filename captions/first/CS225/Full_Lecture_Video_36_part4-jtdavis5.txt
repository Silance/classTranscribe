Should I point zero to one? Or one to zero? Yeah! Zero to one, that's right, because look what happens. It's like you kind of just tuck in the zero, right? You tuck the zero in under the one. And yes, you increase...you increase zero's distance from the root, but you know, there aren't very many nodes there so, I...yes I've increased the find for zero, but I've gotta increase the find for something, right? That's what union does. It builds up this tree, so I'm gonna choose the one of these that reduces the height for the smallest tree...or, sorry, increases the height for the smallest tree. Ok, so recognizing that we have that choice, I have a, I have a vote I need you to take. So here's a couple of examples, k? Don't look at the stuff at the bottom yet. We'll talk about it in a second. Here are a couple of trees, and this time, the choice is not quite so clear, whether or not the left should be pointed to the right, or the right should be pointed to the left. K? So think about it for about 15 seconds........So I'm gonna ask you to vote, and the vote is whether or not you prefer, uh, this....or.....this. So blue or green? Uh oh...blue or green? So raise your hand if you prefer the green arrow. If you prefer to point 4 to 7, and raise your hand if you prefer the blue arrow. Ok, so blue wins, kind of, ok. You want to try-...greens, you want to try again? Voting again? Yeah, you can vote for green again, yeah that's about the same. Ok. So look, these are both great choices, k? They just happen to reflect different algorithms. Let's talk about the blue one first. It's called, Union by height. And, the idea here is that we take the shorter tree, and point it to the taller tree. So this is, shorter tree....points to taller...K? And what that does, is it means doing a, doing a, doing....doing a union, does not change the height of the tree unless they were originally both the same height. K, does that make sense? So...doing a union doesn't change the overall height of the tree unless they were the same height to being with, and then it increases it by one. So, this keeps the overall height of the tree as small as possible. It's the sort of, "tuck it in" under the height of the other, uh, choice. Alright, any question about that? So we're going to implement that, and the idea here is that we need a mechanism for keeping track of the height of the tree...K? So let's see, so seven is going to point to four. Four is going to be a negative something....In the past we said it's negative one, but here, I'm going to use my memory...I'm going to use my memory pretty closely, or, pretty carefully. Since I know that four is associated with this new tree, it's still the root of this new tree, I'm gonna kind of pretend like I've got space in four to store the height. K? And so, here, I'm going to let this still be negative, but instead of negative-one, it's going to store the height of the tree. What is that in this case? So...the value there will be negative-four, k? Because the height of the tree is one, two, thr-...wait..one, two, I only get three. I'd skip three there. K. So the root...there's a bug with that by the way, you should figure out what it is while I write this down...there's a bug with that idea, and you should figure out what it is. So the root stores....negative....of tree height. What's the bug in...