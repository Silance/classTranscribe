Greater than half a point probably. Yeah, its a lower bound. So you know how big O is like a less than an equal to, big O if you go back and you look at the definition from 173, prerequisite, you look at the definition, big O is like less than or equal to, big omega is like greater than or equal to. And their definitions are symmetric in almost every possible way. Any question about that? Alright. Any other questions about this? So now this says no algorithm, if somebody comes to you and says they have a binary search tree where the key functions work in time less than log (n) say they run in constant time, you go ah then its not a binary search tree, you might be doing something else, it might be a dictionary but if you're using a binary search tree those functions cannot run in time better than log n. Okay. This falls in our world of how tall is the binary search tree in general, hows that logn. Like that is where that conversation goes. Okay, so we did this one we did this one, lets do the other one as well. Now were trying to argue is that h is less than or equal to some function of n. Okay, no matter what. What we what to do is go big here. Okay fine whats the very largest tree we can make out of n nodes. Because the height has to be less than that. Whats the tallest tree we can make with n nodes? I don't wanna ask this question its stupid. Okay. Whats the tallest tree we can make with n nodes. N-1, right. N-1. Tallest tree is N-1 so in general if you have n nodes, the height is always going to be less than or equal to n-1. Okay so if you take n nodes and you look at all the possible trees you can, none of them is going to have height greater than n-1. So look, again we got a close to something that looks like a definition from cs173 in this less than or equal to. So instead of less than or equal to, we are going to write it is big o of n. Where we ignore constant factors and we roll the less than or equal to card into that symbol, into the definition. Alright so is this good news or bad news. Bad news right. What if we did this same argument about linked lists? We did the same argument about linked lists, we'd have the same result, so we should all be sitting here thinking we should all be sitting here thinking well binary search trees really aren't all that good then, shoot we had so much fun, and its not important to us. Okay well it turns out the following is true. If you consider 