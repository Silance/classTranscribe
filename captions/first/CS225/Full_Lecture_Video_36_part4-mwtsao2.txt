Should I point zero to one, or one to zero? Yeah, zero to one, that's right, because look at what happens, you kind of just tuck in the zero, right? You tuck the zero under the one and increase zero's distance from the root but there aren't many nodes there, so yes I've increased the find for zero, but I've got to increase the find for something, right? That's what union does, it builds up this tree. So I'm going to choose the one of these that reduces the height for the smallest tree - I'm sorry, INCREASES the height of the smallest tree. So recognizing that we have that choice, I have a vote I need you to take. So here's a couple examples, don't look at this stuff on the bottom yet, we'll talk about it in a second. Here are a couple trees, and this time the choice is not quite so clear whether or not the left should be pointed to the right or the right to be pointed to the left, okay? So think about it for about fifteen seconds. 


So I'm going to ask you to vote and the vote is whether or not you prefer this (pointing the right subtree to the left) or this (pointing the left subtree to the right) so blue or green. Okay so raise your hand if you prefer the green arrow. Okay if you prefer to point to four to seven. And raise your hand if you prefer the blue arrow? Okay blue wins, kind of, okay. You want to try green do you want to try again voting again? Yeah you can vote for green again. It's about the same. So look these are both great choices. They just happen to reflect different algorithms. Let's talk about the blue one first, it's called union by height, and the idea here is that we take the shorter tree and point it to the taller tree. So this is shorter tree points to taller. Okay, and what that does is it leaves doing a union is not changing the height of the tree unless they were both originally the same height, does that make sense? So doing a union doesn't change the overall height of the tree unless they were the same height to begin with, and then it increases it by one. So, this keeps the overall height of the tree as small as possible, is the sort of tuck it in under the height of the other choice. Any questions about that? So we're going to implement that, and the idea here is that we need a mechanism for keeping track of the height of the tree. Okay, so let's see seven is going to point to four, four is going to be a negative something, in the past we said it's negative one, but here i'm going to use my memory pretty closely, or pretty carefully, since I know that four is associated with this new tree, build a root of this new tree I'm going to kind of pretend like I've got space in four to store the height, okay? And so, here I am going to let this still be negative, so instead of negative one it's going to store the negative one, what is that in this case? So the value there will be negative four. Okay, so the height of the tree is three. I just get three there. Okay. So the root, there's a bug with that by the way, you should figure out what it is while I write this down, okay, there's a bug with that idea, you should figure out what it is. The root stores negative of tree height. What's the bug? Ian? 