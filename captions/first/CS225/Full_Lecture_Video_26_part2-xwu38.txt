What?Who is talking to me is that you? what is your suggestion? thank you for ... Oh  you wanna write a reclusive function to do this, right? Ok, to write a reclusive function to check to say if these are out of balance.So, the code that can check for balance is almost... it looks like a traversal, you can write a reclusive code, that I am gonna look and make sure my left subtree is out of balance, or balanced and my right subtree is balanced, and what else are you going to check? Because for fifty one the left subtree is balanced and the right subtree is balanced, so what else you gonna check? if you are sitting at fifty one and you make a recursive call the came back yeah your left subtree perfectly balanced one problem. Your right subtree balanced no problem. so then what you gonna do? Yes check its balance what information do you need to do that. You need the height of this subtree and the height of this subtree. So here's what we gonna do. We are going to augment the information stored in every node with the height of that node, and we are going to maintain that as were are doing the insertions into this structure, ok? so one of the, a little etc... what we gonna to do by wave for shadowing it would be helpful to store height in each node.  We will talk about exactly how to do that in a minute. this is all intuition Ok so let's do some mechanics here. I wanna change this, I do not like this tree very much. I wanna change the structure of this. Notice the whole tree is out of balance. Fifty is the root of the tree that out of balance yes? is that true ? did I eyeball it correctly? But, so is eighty. So I am actually gonna focus the code that we are going to write the algorithm that gonna focus on the lowest node in the tree that is out of balance. So here is what I am going to do. I am gonna take this stick and change it into a mountain. So for that subtree. I am going to change ninety, I am gonna change that subtree to ninety, eighty and ninety-nine. Ok? and now we have to hook things back together. Where do things go? I do not know for sure but here is my observations. I have one, two three four places I can hook subtree in the original tree, and I have one two three places I can hook subtrees into the new structure. That is good, if that were different we would have a problem. Four places in the old structure four places int the new structure and if you noticed it. In the old structure, we have the following, we can make the following observation. everything in this subtree labeled A here is going to be less than everything in this subtree which were labeling B because of the binary tree property which is less than anything in this subtree, which is less than everything in this subtree and further more the relationship to their parent nodes are correspond to, that would be true over here and further more the relationship to the parent node will be preserved in if we only put A and B and C and D hook them up right here. So I am gonna do this, I am gonna put A here, what ever is in A I am gonna put it here. I am gonna put B here, I am gonna put C here and I am gonna put D here. Alright, so what is that I will do that in a different color so it is easier to see. so eighty's left looks like this, B will now be eighty's right so that looks like this. C will now be ninety-nine's left and D is empty so it is empty so it has nothing to do so notice this actually for that subtree for fifty's right child we actually reduced the height of fifty's right child. right? it used to have height three and now it has height two. so that is cool now we just build the right of the tree just like it was before. we do not even need to think about it very much. Fifty is still the root of the tree. Thirty is left child and fifty is the parent of twenty and forty.