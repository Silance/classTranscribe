Kay so the balance factor T-right is 1. If that's the case so if we have a balance factor at T of 2 and a balance factor T-right of 1 then a left rotation will fix the balance of the tree. kay? This is the conclusion and theses are the key testing points. Right here and right here. Kay fine We're gonna do exactly the same thing again but now I've changed where my little blue dots are. Kay? So now we've got sorta the dogleg picture. Umm so still an insertion occurs at the right of T and an imbalance is detected at T. The balance factor at T is 2. Good. And so some kind of left rotation will fix it. So that's the same as the previous. Further, this time the insertion occurs at T2 or 3; T3. That is a T-right's left. The insertion occurs at T-right's left. Alright now what are the possible balance factors at T-right? Could it be -2? Could the balance factor at T-right be -2? No. Because then we would be rotating there instead. Also couldn't be 2 for the same reason. Could the balance factor at T-right be 1? No. Because that implies that this is taller - that T4 is taller but we just inserted over here. Kay? And so if we're changing the height of this whole tree, and thus inducing a higher balance factor for T, then this one could not have, be taller than the one on the left. So cannot have balance factor 1. Similarly, it cannot have balance factor 0. The only balance at T-right that makes any sense is -1. Kay so now think about this. We are basically using for a left rotation, we're using the balance factor at T's right to determine whether it's a single or double left rotation. Any question about that? Hah, yea lots but I hope we don't talk about it. Okay so what's gonna happen? We're gonna do a right rotation around this guy followed by a left rotation around T. Okay. Umm I almost got here last time. So first of all before we start talking about this remember that last time we decided that it would be pretty easy, pretty easy to check height balances if we store the heights of subtrees inside the nodes. So that's why I wrote that there. Um so but I forgot to put the data there as well so also remember that we're gonna we sorta store the data behind a node in a tree. Kay. We're sorta it's hidden. We're just focusing on keys at this point but we are going to store the height. Uh the next thing that I want to know is if you ignore this yellow, is this tree balanced? Height balanced? Isn't that kind of amazing. Isn't kind of amazing that this is a balanced tree? Cause look at the size of the subtree on the right compared to the size of the subtree on the left. Wait. Right yea that works. Hai. Wasn't what I intended but it works. Kay look we only have a few nodes but we have a ton of nodes over here and yet none of the heights are very disparate. Kay. Any question about that? Alright so now we're gonna insert the yellow one and like I said last time, I hate unrolling recurrences but I'm gonna do it in the case because it really informs. It really sorta illustrates how we expect this post order um post order processing post order evaluation of balance to work out. Okay. Here are the four steps. Here are the four steps of doing an insertion. Kay? We're going to insert at the proper place. Now at any given level, we only have access to one node, so insert at the proper place means go down one level in the tree and do insertion in the proper place at that level. Kay? Well we haven't found a place yet and so we need to do insertion at the proper place on the next level. Kay? We're heading toward the yellow. We're trying to insert the one that's the yellow. Kay? So this is sort of like the active frame at this point frame - the active current tree. We haven't found a spot so we're gonna continue inserting at the proper place. In this case, it means going here. We still haven't found a spot so we're gonna continue inserting at the proper place.