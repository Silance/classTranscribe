Cmon, I want you back, Michael Jackson, okay. Alright, and now I'm gonna look and see what characters exist in each of those positions for each of the strings so the first string then is sort of transformed into this character, this character, this character, etc. and it looks like [Leu, hi] and you know lets take this one - this one is [Nmh'lser]. And now these are the things that we are going to send through our good hash function. Okay, question about that? And our overall hash function then for long strings, our long string hash function is the composition of these two. Take these eight positions and then apply that... apply the good hash function to that. Any questions about that? Alright, and for this kind of data, for data these long strings that we happen to have drawn from a novel works perfectly fine, right? These look pretty random over strings. There's no reason to believe that these wouldn't be spread out by this good string hash function. [student question, can't hear it]. So it depends on the hash function. So the question is how do you do a general SUHA check in your mind when you're looking at this. What's the intuition behind a SUHA? And I think the way I would approach that problem is to say, "Hmm, can I come up with an example for which SUHA would fail? Can I come up with a subset of data from my keyspace that my hash function would do badly on?" And that's exactly what we're going to do here. Any question about this? So here's what my hash function does. It takes forty character strings and it hashes it, spreads them out uniformly over a table so I can get them back - forty character strings. Well my friend came to me and said, "I've got some forty character strings that I would like to hash. Do you have a good hash function?" I said, "Sure. I've got a forty character hash function, forty character string hash function. Would you like to use it?" And my friend used that hash function on her data. Well let's look at how that hash function works. The first thing you do is you designate eight random spots. One, two, three, four, five, six, seven, eight. Kinda random, right? And then you hash those using this good eight (8) character string hash function. So what do these things look like? You already see the punchline here, right? They look like [h/eiagkC]. This one down here looks like [h/eiagkC]. Look we've got a collision there even. This one looks like [h/eiagka]. So, there was an - there is an, in this case, an obvious subset of data of the set of forty character strings that create bad behavior by the hash function. Make sure that you see that this is bad behavior by the hash function. How many different results, how many different cells will our hash function map into? How many different small indicies will our hash function produce approximately? Fifty-ish, hundred-ish maybe depending on how many special characters you have, right? Not very many. Not very many even if you just look at the pages of wikipedia. Mapping all of the wikipedia URLs into eight different spots. I'm sorry, a hundred different spots. Bad. Bad. Bad. Bad. Okay, so good general purpose hash functions are hard to create. Any questions about this? Alright,   