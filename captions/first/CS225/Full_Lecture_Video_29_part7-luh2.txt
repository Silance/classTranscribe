Ok if you have six then these will all still live in the same. If you could have six then these will still live in the same node. Alright let's see. Will be shaped a little bit differently. Why not seven. This is implies not for these structure implies this structure not six. Why not seven will same reason these are too small any node within two key. That 's less than you can have for seven seven will have to have. The ceiling of seven over two will just have four children. or three keys. so this is too small. Too small to be seven. Okay any question about it. Alright, I am didn't look at the test. Instinct of this is good enough. I think knowing that definition is reasonable. Here is btree search. Here is some code that represent btree search. i think is kind fo pseudo code. It assume some function we haven't articulated. it assume some discrete function. We haven't access some function he can find data. we are looking insider a btree node. We can think of as an array. For a particular. So in inside array x we are looking for a key. Now take a look at this code for just a minute and suggest efficiency. You will find something that bugs you about this code. I should say. you will find something that bugs you about this pseudo code. What is doing there. I am asking all of you. What's that while loop goal. What's a more efficient point. We make a big point. We make big deal. These nodes are order. you should never search thought an ordered structure. That you should get for this. These are all. Each one of those is a super fast operation. These are super fast. These all happens very quick in the CPU the data is all sitting right there. It is statement. This discrete that determine the running the time of this algorithm very long running time. 