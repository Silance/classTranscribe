 Okay how do you feel about this. What does that look like, especially if you do okay so, look at the screen and rotate your head in the horizontal plane by 45 degrees. What does that look like? A link list? That's right. This thing is a linked list. Which means that, there are binary search trees whose performances really no better than a linked list. What was it about our data, that made this happen? Yeah Nathan? Yes, the data was already in. The insertions happened, now...this is a cautionary tale because a very common way of creating these structures from the start is to build them up incrementally, take data one at a time form some data source and build them up. It's also very common to store data in a sorted fashion so it's very possible that if you were to say to somebody, give me your data, I'll build you a binary search tree, and employ this algorithm, you would end up with a poorly behaved tree just because your friend happened to be helping you by giving you the data in order already sorted....does that make sense? SO, one thing you might do then, is anytime anybody gives you data, jumble it up. Mess it up. Create disorder. How many times in your life, has anybody in your life that it will help if you create disorder. Almost never right! Well, maybe it would here. We'll quantify that, but so here's the thing. It's easy to look at data and tell if it's in order, but these are not the only bad trees it's not just you know, either an increasing sequence, or a decreasing sequence, of numbers, that create a long skinny tree like this. Here's a tree, binary search tree, who knew!? Can you see it? There's the root, right child, left child...What I want from you, but this is a little harder, is a sequence of inserts that result in a tree that looks like this. Who would like to do it on my table...I want a sequence of inserts that create a tree like this, I'll assume they are in order. Can you all see this sequence of numbers results in..