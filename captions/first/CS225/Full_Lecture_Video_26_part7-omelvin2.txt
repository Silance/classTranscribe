and that's really good news because it means we can adjust the structure of the tree by spending a little more time on our insertions and on our removals. which is quite complex, but satisfying nonetheless. yes? so, right, very good. so we're going to look at this, but I'm going to answer the question right now. he said, "wait a minute. when you go back up the tree adjusting the height that is costing you time." and the naswer to that is you're doing that in the context of the insertion. all of this is happening in the context of some other manipulation on our tree like insertion. so we're already spending the time navigating the height so, yes, we're going to spend a little bit more time, but not more time than the insertion would've taken anyway. so at each stage in the worst case we're going to do a rotation but it will still be only at every level of the tree in the worst case. actually an insertion there proves that you only do it once. ok, any questions so far? yes? oh, very good. so the question is how did I choose 70, 40, and 50? so there's a mystery here and I consider it to be diagnosing the need for a rotation, ok? and it's exactly the right question. I don't know why I could observe that it was this bent thing instead of the straight thing except right now you do have the intuition that it was too long in the middle, ok? we're going to actually, i think I have slides in two slides that help you diagnose exactly how you figure out which rotation to do. ok? so it's exactly the right question. alright, so here's a summary. here's what we know so far. there are four kinds of rotations. this one is an example of a double rotation called a right-left rotation. so left is like, left modifies right. so a right rotation is just a leftishy right rotation. so there are four kinds. the singles in each direction, left-right and right-left. and they're all symmetric. so we already know how to write the code for one of them. they are local operations. that is abcd and also all subtrees on the other side of the imbalanced subtree, none of those are effected. and we're just adjusting the structure of the binary search tree. we're not breaking a binary search tree in any way. alright so our goal is to use these rotations to maintain the balance of binary search trees. these particular height balanced trees are called AVL trees. where AVL is - they are a collection of initials for these guys whose names I always forget. adelson velskii and landis. two people. and this was done in 1962. alright, so here's what i want to say about that. so this is two people who did this particular kind of tree. there are other balaned trees. you will see references to red-black trees. if an interviewer or if you're reading a research paper or if someone refers to red-black trees and kind of quizes you about it. you say in our discrete structures we did AVL trees instead. you can get red-black trees if you know AVL trees. when I took the theory class, when I took what's now 374 here decades ago they did red-black trees there and they may still. I don't know for sure. alright, and then the thing I like to point out is this is not all that long ago. this is a relatively short time ago. it's kind of weird right? this is when you're grandparents were in the height of the career probably. about.