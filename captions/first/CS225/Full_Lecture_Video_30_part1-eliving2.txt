I'm gonna say it like this, implement ADT dictionary, okay so, the minute I say that, you know already what the interface is. You need to be able to, given a key, find the key in the structure, and return it's value. You should be able to insert key value pairs and remove based on keys from the structure. So it's sort of a key-centric structure and all we do is put stuff in and take stuff out. Particular application beyond that is up to you. Okay, so I think we might have talked about this before, suppose this is what our data looks like. We have a student and a locker, how can I, where this is the key, and this is the value, or the data associated with the key, how can I implement insert, remove, and find, efficiently, if what I want out of the structures is names? Given this particular data set, what would be an efficient implementation of a dictionary? Yes!? A tree? Sure, we could do that, but it would take me a long time to like figure that out? What is this asking for? Ya, an array, look! These locker numbers, if you squint your eyes a little bit, or maybe you don't even have to do so. They look like array indices, right? They happen to not be in order, but they could be. So, it's perfectly reasonable to exploit the fact that our keys are smallish integers, and to place the values in the array entries. Okay, so, this implies use an array. Okay, any questions or comments about that? Okay, fine. But we know at this point that keys and values don't necessarily come so conveniently posed, that in fact our keys might be things that are more interesting. Okay? Wouldn't it be kind of cool, if we could take a key, that is say a flight number, and think of it as an array index. Hello? Wasn't going to smile today, I have no smiles in me today. Wouldn't it be cool, if we didn't constrain the indices, the kinds of things we use for indices, to integer? Wouldn't it be cool if we could use strings, or whatever else, objects of any particular type? Okay, any question about that? Well that's kind of what we are going to do. We are going to that among other things. A color you know as a key, that's usually a triple, you know an RGB value, especially for us, but maybe it's HSB we don't necessarily know what a color looks like, what it's representation is, but you should think of it as an arbitrary type kind of, it is an arbitrary type, a user defined type. So any questions about that, so wouldn't it be cool? The answer is, ya it would be cool. So let's see what we could do. So here is a dictionary, you are familiar with that, we are going to define this new interface, that mostly implements a dictionary, called an associative array. Now, all an associative array does, is that it overloads the square brackets, you can barely see it. There is like  a one pixel space there, between those square brackets. So it overloads the square brackets, so that you can use them as if they were array indicators. So, for example, we could define a dictionary to be this associative array, which we are going to give a different name to in a minute, and use as a key, some string and store the data, and conceptually what you might have going on is that you have this array who's indices are like string and who's values, it looks like are ages and what conceptually what's going on is, 