Now here is what it means. It means that your hash function basically spreads your data out over the table. It minimizes the likelyhood of collisions, of two things mapping to the same small index. Now let me write that out mathematically. If i is not equal to j, that is if you pass in two different key values, then the probability that h of j is the same as h of i is, it would be great to say that it is zero right? Aww I wish we could say it was zero, but it probably isnt, unless there is a bijection, what you want to be able to say that is 1 <= 1/Table size. Which means this. Suppose that i maps to this cell, okay so i came along and h of i is here. All we are saying is that the probability that j is no more likely to be here than anywhere else. It is equally likely to be spread out over the table and the nice thing is that that means its 1-1 over this that there wont be a collision, okay? And there are all kinds of probablistic results here that means you can say with a high probablity that the table behaves well over a sequence of hashes. Okay? Alright, any questions about that? Okay, it is the case that mathematicians spend most of their time under various constraints focussing on this particular aspect of it. This one is kind of a duh, this one you know you can get a good one here that took a long time to do, but this is the most interesting aspect mathematically. Okay, I want to talk about the consequence of breaking each of this criteria. What would it mean for a hash function, so lets talk about a bad hash functions, good hash functions have a this and this and this, so a bad hash function would negate that conjuction right? So that means either this is bad or this is bad or this is bad. What would it mean for this one to be violated? What would it mean in terms of the client code, yeah? Right right. The dictionary functions would not be constant time, we already have dictionary implementations that get us logarithmic time. They are? What gets us logarithmic time for dictionary functions? Avl trees, thats right. We already have that. So, anything worse than constant time here, you know, we are kind of unhappy with. So we are only willing to give the hash function constant time to execute. Okay, what would it mean if this one were violated? If the hash function didnt do this? Yeah? Think about this, think about it. You are going to insert something in a place in your table. In your array. If you want it back, or you want to look to see if it is there, if your hash function doesnt send you back to that spot and sends you some place else, you are lost right? You are lost. So hash functions have to be deterministic in order to be functional. Again, it could be the case that you could search through the whole thing, but thats no better than we already have. Alright, lets see. And then finally, what is the consequence of something not satisfying the SUHA, of not spreading the data out over the table? Very high number of collision to handle. Infact so many, it might be the case that all of your keys map to the same spot. That would be bad, thats like putting everything into a linked list perhaps. Alright, we will talk about that in just a minute. Okay, so not satisfying this means lots of collision. Okay, so I want to talk