Yea, good. Okay. Suppose that my tree, what is its height? it's height is 0, and so, in order to indicate that its a root, im gonna say negative 0. How does that work? Ehhhh. Do you have an idea for solving the problem Nathan? Just a minute. What? Very good. So, I'm just going to bump it up. I'm gonna not say 0, I'm going to say 1. So it's going to be I'm gonna store the negative of the tree height plus 1. So I am going to store negative 4. Whoever said that was correct. OKay. Any question about it. Just a little hack. It happens to be quite convenient. Alright. Uhhhhh, lets talk about the other alternative. the green preference. Now here's the thing. this time, we're going to take this giant tree and say whoa. Thats a big tree. I don't want to increase the height of that many nodes. So I shouldnt make it point to something new. Its a big tree. I don't want to change the height of lots of things I might be look for later. And so what we're going to do instead is take the smaller tree in terms of number of nodes. And go ahead and increase the distances to the roots for each of those. So, this increases the distance to the root for the fewest nodes and idea is that you point the smaller tree to the larger. Where smaller and larger are in terms of the number of nodes. Okay. so I can do part of this myself. Four could point to seven. What should seven's value be? I can even do this part. Seven is going to be a root, so it's value is going to be negative. But what else should we store there. Yea, the new size of the structure, the new number of nodes in the structure. Okay fine, so I think thats 12, unless it's somehow changed since the last time i taught this class. Okay, any question about it? Is it good? Alright, so what happened? Where did that 12 come from? we used to have two trees. This one would've been negative four. This one wouldve been negative 8. And so, to get this new value, all we did was add them. Any question about it? Alright, both of these schemes for union guarantee that the height of the tree, and thus the running time for find, is... What would be super good news? Constant time would be great news, but we can't get there. Both of these schemes for union guarantee that the height of the tree is O(logn). There is a third metric that you can use for deciding who should point to whom. A third mechanism for smart union called union by rank, and we don't talk about it here. The height of the largest embedded perfect tree, or something like that. So union by rank is also sometimes used.