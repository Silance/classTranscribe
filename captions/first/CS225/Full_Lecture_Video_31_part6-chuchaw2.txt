alright, and now I'm going to look and see what characters exist in each of those positions for each of the strings. So the first string then is sort of transformed into; the first string is transformed into this character, this character, this character, etc. and it looks like L e u , space h i space. And let's take this one; this one is N m h ' l s e r. and now, these are the things that we're gonna send through our good hash function. Questions about that? and our overall hash function then for long strings; our long string hash function is the composition of these two. Take these eight positions, and then apply that, apply the good hash function to that. And for this kind of data - for data, these long strings that we happened to have drawn from a novel - works perfectly fine, right? These look pretty random over strings; there's no reason to believe that these wouldn't be spread out by this good string hash function. so it depends on the hash functions; so the question is: how do you do a general check in your mind when you're looking at this? so what's the intuition behind a [giberish: su-ha?]? And i think the way I would approach that problem is to say, hmm, can I come up with an example for which su-ha would fail? Can i come up with a subset of data from my keyspace that you know my hash function would do badly on? And that's exactly what we're going to do here. So here's what my hash function does. It takes forty-character strings, and it hashes it; it spreads them out uniformly over a table so i can get them back: 40-character strings. Well my friend came to me and said, um I've got some forty-character strings that I would like to hash; do you have a good hash function? i said, sure, I've got a forty-character hash function, forty-character string hash function, would you like to use it? and my friend used that hash function on her data. and let's look at, let's think about how that hash function works. the first thing you do is you designate eight random spots. one, two, three, four, five, six, seven, eight. okay, kind of random, right? and then you hash those using this good eight-character string hash function. okay so what do these things look like? i mean you already see the punchline here. They look like h / e i a g k C. this one down here looks like h / e i a g k C. Look we've got a collision there even. This one looks like h / e i a g k a. okay. so there was an, there is in this case an obvious subset of data of the set of forty-character strings, that create bad behavior by the hash function. make sure that you see that this is bad behavior by the hash function. how many different results, how many different cells will our hash function map into? how many different small indices will our hash function produce, approximately? okay, 50-ish, 100-ish maybe, depending on how many special characters you have, right? not very many, not very many, even if you just look at the pages of wikipedia, mapping all of the wikipedia urls into eight different spots. I'm sorry, 100 different spots. bad, bad, bad, bad. so good general purpose hash functions are hard to create. any questions about this? alright, um. 