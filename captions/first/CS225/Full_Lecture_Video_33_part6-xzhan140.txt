A place and you need instant access to the right child of an index. Now I am gonna do something here you may not like, but that will make your life a lot easier. Instead of just laying this things out in an array at the front. I am actually going to place the zero element of the array here. We are gonna leave it empty. So the root is always in array location one. Given that, I wanna know a function, a function that when given an index can tell me exactly where the left child is. So given an index, where is the left child. You see it? A left child of the thing in index size two. We can find children very quickly in this case. Where is the right child. It is always right next to the left child, right? SO it must be 2i + 1. That's more accurate. I want you to take pause for just second, to think about parallel to memory here. Array index is just the address. It's like local address of your data. So it's sort of like we have pointers. We are just implementing them in our current space. The space of our array. It is still a case that given the location of one piece of data, we have quick access to the location of another piece of data. It is sort of like these indices themselves are like addresses. A memory address or indices. Another thing we get almost for free here is the parent of index i. So what is the parent of index i? It's floor of i over two. Any question? We don't have to worry about pointers everything fixed in the array and we can navigate around it. You can write functions say go left. You can write functions say go right. It is only the nature of these functions have been changed. If that is the implementation. One thing will be important in our analysis is the understanding the height of this structure. The algorithms will be going to right or going to be proportional to the height. I want to know how tall this thing is. It is log(n). So the maximum height of a complete tree containing a node is log(n). It is long(n)-1 even. How about I did this. Any questions about it?