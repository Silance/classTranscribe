Hello. Ok and now this is, oh and the line for k is here. Ok? Alright, so now what were gonna do, oh so now these are actually, these are no longer the right labels right? This is if this is n and this is h then these are now f inverse of h and g inverse of h yes? And this is now a slightly different c and this is g inverse of h ok? Alright is that clear? And now what were going to be looking for is a different k as well, ok. K prime and this will be a c prime, but were gonna make the argument that f of n is now. F, yeah. The inverse argument that f of n is now bigger than c times. F inverse of h is now bigger than c prime g inverse of h, ok? It's exactly the same picture though it's just the labeling that's different. Yeah *Audience question*. Uh huh, I didn't draw the graphs differently though right? Yes, uh huh. Yeah because I still want it to be a function, I still want this to be the domain, in fact that's exactly what I am doing is changing the domain of the function to one that's dependent on h instead. Yeah I have g inverse of h there, ok? But there's still f and g still live there. So what were going to do is take f of n, switch it over to f inverse or g of n or switch it over to g inverse and then switch it back so that we can make the argument that we want, ok? It's just that this argument is much much much much much easier to make, because it says that the number of nodes in a tree of height h is at least this much it's lower bounded by this much and that turns out to be super easy argument, ok? Alright so an upper bound, I'm going to read this out loud. I know how you love it when professors read their PowerPoints an upper bound on the height of a tree with n nodes that's that picture is the same as a lower bound on the number of nodes in a tree of height h. And this is what's going on mathematically, this inversion. Ok, any question about that? Is it ok? Alright, it's a little trick, it should sort of be in your toolbox of proving things about common structures just proving the inverse about the inverse. Uh but I'm not sure anybody ever really talked about explicitly it's one of those things that my math professors used to do and I went how did you know to do that? Now I know. Ok, so here's how we're going to do this, we're going to talk a lot about this red function here. We're going to talk about this red function. Sort of the green one as well, they end up being pretty much the same in this example. Ok, so n is what were going to use to communicate the true number of nodes in an AVL tree of height h so n is the true number of nodes in an AVL tree, ok? And you don't know what it is for sure, but if the tree has height h we're going to use n of h to be the smallest possible, maybe I'll put a little h here so we're parameterizing it by h sort of, but n of h is not a function because it may have various values. N of h is the smallest such tree, so n of h is the smallest AVL tree, and when I say smallest here I mean in number of nodes.