so we run each of this though the new hash function and they may end up in a completely different location in a new array. but when we go looking for them we know we can find out. ok, any questions about that? So, of the right, those are exactly parallel. we don't fill the array, we don't exactly double the table size, we don't copy the data. But we have parallel things to do in each of those cases. Alright any questions about it? Process called rehashing. Questions? twice array size. so in my worried about having to find the first prime, greater than twice the table size, we can find a prime in a table very quickly. You can store a lot of primes to look up, you don't have to compute them. Certainly enough to create an array of that size. so the question is where does the two thirds comes from. Does it strictly apply to linear probing in double hashing? It's the load factor that corresponds to probe base hashing strategy generally however they are implemented. In general, you want your table to be two thirds full. It's gives you sort of feeling or what's going on behind the scene when you use hash map as well. Alright, any questions about this? So the question is , is there any way of escaping the fact that we are intentionally allocating memory that we are going to use, we admit going in that a third that space is not going to be use. I believe the answer to that is no. You have to allow for data to be mapped in to those cells, otherwise you got a different problem. I mean that to sort of equivalent to get a full array and then you got an issue. So we are we? Without these two collision resolution strategy, one of them just pain out the data. The other one use probing to place it in the table. There are others you might be used. For separate chaining, why not using another hash table?or why not use an avl tree? Why not use something else instead of just singly linked list? so the number of variety in that particular structure is astounding. so these are just sort of basic idea. Now given these basic ideas which one is better? The structure speed is weigh faster for probe based hashing, that is, if you can actually fit all your data into an array, that structure will be much faster. But if your data is big, then you can't create an array that's very big using your memory effectively. And so you want to have the ability to hang your data off your structure. So you have big records, then separate chaining is a better strategy. And of course this is a huge simplification. ok, What's structure do hash table replace for use? What do we use to implement dictionary before?