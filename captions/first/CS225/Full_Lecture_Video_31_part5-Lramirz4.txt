Hash function
So that's why its an interesting problem even now. So the entire key space so the question is whats the differences between the key space and a sample from the key space. Lets take an application, lets take camera model or phone models.  Lets take phone models, okay. So most phone models are expressed as numbers and some letters associated with them and then maybe a title. That is a key and you can have a whole bunch of different one of those probably hundreds, right. But if I were keeping, if I were making an application about phones I might only draw a sample of five of them from that entire key space. Does that make sense? So the key space is what generally describes the  possible set of keys and the sample that you happen to choose is the data that you have happen to appear at your door step asking to be stored. Right, and you would get different data next time but your hash function still has to work on it if your application should handle phones, for example. Okay any other questions about this? So I'm glad you asked that. Okay, I want to show you how easy it is to have bad hash functions. What book is this from? Yes, this is from Huck Finn. I once had a student, well ill tell you that anecdote in a minute. So it actually might be from Tom sawyer. So here's where I want to start with this, so it turns out it is easy to hash strings if the have only 8 characters that you can come up with a very nice bijection of 8 character strings to a reasonable sized table and I will leave that to you to go research if you want hashing 8 character strings you'll find a lot of stuff. Now I don't want to hash 8 character strings what I want to be able to do is to take a 40 character string and hash it and store the page number so that I can type a little bit of text from Tom Sawyer, Huckleberry Finn or what ever book this is  and my application would go "and that's on page blah" and that's my goal, 40 characters instead of 8. Any questions about that? So here's what I came up with for hashing strings or hashing scheme for long strings. So what we want is a hashing scheme for a hash function for longer strings. Here's what we are going to do, we're gonna take our 40 character string and select 8 positions from it and use that as our 8 character string and let the good hash function that we know exists for 8 character strings take care of that. Sounds kinda reasonable, right? So lets choose 8 positions and I'm going to do this kinda quickly and not very carefully. I'm choosing 8 random positions that one and that one and that one and that one [Counts] Forgive the wavy lines there