It's sixty-five thousand five hundred thirty two to the sixty five thousand thirty six. How bing is it? It's big beyond the comprehension. Ok. The number of atoms in the universe I think is around a big spectrum to two to the three hundred (2^300). Ok. The number of atoms in the universe. Tee-tiny space big-big space. Ok. So this is...this is I don't ... I can't think of anything to describe of how big that number really is. In how many two to the 300 are in that number, right. A ton of them. So ... though .. let's take the iterated log of it. What that means is we are going to take the log of h times how many time you can it. We are going to do log base 2 here. It does not really matter. Ok. What is the log base 2 that number? That inconceivably huge number. What is log base 2 of it? Sixty-five thousand five hundred thirty six (65536). Ok. What is the log base of 2 of 65536. 16 who go that that fast. Ok good. 2 to the 16 is that. What's the log base 2 of 16? 4. What is the log base 2 of 4? 2. What is log base 2 of 2? 1 Alright and we are done. Ok. We stop when we are less or equal to 1. Ok. Alright. So the iterated log of this inconceivably huge number gives. So log star of two to the 65536 is what ... one two three four five. 5. Ok. So this is an extremely slow growing function. For all in tenses and purposes is less than or equal to 5. Right? So finally you can do two to the .. two to the of that.. right .. but so is increasing function of that is not increasing fast at all. Alright. For intense and purposes function is that function is a constant. Right that function is a constant. Ok. Here's how is main to us. Here is the relevant result. In an up-tree implementation if disjoint sets using any of the smart union and path compression for find. You should say for find their. Ok. So that what are we doing any sequence of m. This is the different parameter. This is the use of system of long, long time for m operation however you wan toward um .. uh .. the result in worst case running time um the search their going to a factor of m there because that's where many functions you imploded of find four find 11 find two you can do that as many times as you want and calling that m and coefficient of m is log star n where n is the number of keys so think about this for m operations we have a running time which is the respectfully Big O of a constant times n even though is not quite a constant. So we have almost a constant running time per operation.  