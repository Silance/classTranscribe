Yep, yeah, yeah, so he's asking about how many helper functions do you need for this? I need one for height. I need for balanceFactor. I need four for the - four for the rotation cases. Yeah, that's a lot. I need those constructors and you know, this is what we're good at at this point. This is what's going to get you a gazillion dollars, but not me. Alright, AVL tree removal. What happens if I remove 9? Oohhhhhhhh. First of all is this tree imbalanced? Is this a balanced tree? Yes, it is. Ok there's nothing obviously out of balance I don't think. You can pretty much eyeball it here. But what happens if I remove nine? It's even better. I got a better one. What happens if I remove ten? Alright. Alright, so let's trace this a second. This is just an example. I'm gonna remove - I'll remove 9. 10 is structurally the same. We remove nine and we have every reason to believe that the process for removal mimics that of insert. That is that we can kind of test after we change the structure of the tree whether or not a rotation is necessary. Now, what's interesting about this of course is that binary search tree removal invokes an inorder predecessor which may invoke further cutting off of the tree. So actually it's not even just in the removal where you need this checking of height, but also in the inorder predecessor evaluation portion. So but we're not going to do those details here. That's for lab. For now we're just going to remove nine. Ok, now my question is what kind of rotation fixes this tree? Some kind of left rotation, correct. Some kind of left rotation. Which kind of left rotation? Single or double? Double, that's right because at that point the balance factor here would be 2. The balance factor here would be -1, and so it's a left-right rotation that's necessary. Oh, that's why because here you can use the same balance factor function. Haha, I see. So in the end after we do this I'm going to put this in red because you'll be able to see it. You'll be able to see what happens. In the end I'm going to have 11 here, 10 there and 12 here still. And this will be gone because the rotation will result in this. And then we will complete execution of that recursive call and come here and what happens? Now it's out of balance, ok? You see that? Because it's long on this side, we've shortened one that was barely long enough. This side was barely long enough and we shortened it. So that creates another imbalance. So what kind of rotation is gonna fix it? A right rotation, right. Yes, very good and what do you think a right - or a double or a single? Single. I think either of them works in this case, but we mine as well go single here, right? So It's going to result in a right rotation about 8. Now, think about it! This tree rooted at 8 might barely have been long enough and we shortened it. It might be a subtree. This tree that I have painted here might be a subtree in some larger structure and it might barely have been long enough, tall enough and we just shortened it. So it's possible that actually fixing things at 8 would cause the need for rotation farther up the structure. So it is possible in fact that when you do a removal you may have to do rotations all the way up the tree. Ok, any questions about that? You see how that's possible? Ok let's move on. We'll see how far we get here. Just a little bit. So 