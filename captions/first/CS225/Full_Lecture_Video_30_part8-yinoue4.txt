this here too but. all right. all right. so there is a dice roll kind a random. right? here is how we are going to transform any dice roll. we are going to give ourselves bins for each number. we are gonna give ourselves bins for each numbers. so here are the ones, here are the twos. here are the threes. here are the fours. fives. and sixes. k? and then we are gonna take the five dice and put them into one of the bins. so in this example, we are gonna have two dice in the ones. one dice in the threes. and two dice in the sixes. ok ? now I assert that if I give you an encoding like this,  you can tell me what the dice roll is. And if I give you any dice roll, you can give me the encoding for it. yes. And so counting the number of encodings is the same as counting the number of dice rolls. yes. just nod your head if you buy that. ok? all right. how do we count the encodings. how many different encodings are there to lay out encoding like this. There are five dice and one two three four five divisions between dice. right? so there are ten positions in the encoding one two three four five six seven eight nine ten. Half of them are going to be divisions between and half them are going to be dice. so how many different ways are there to creating such as arrangement? ten choose five very good. so ten choose five. ok? is the number of size the key space. I need to do quickly. so for example I'm gonna lay down a random one of these. That contains five divisions in five dice. you want this one to be division to be die. yeah ok division. Die die division division division die division die and this one has to be die. That corresponds to be zero ones, two twos, zero threes, zero fours, 1 fives, two sixes. Does that make sense? See that? ok. we are not gonna test on this. just for fun. so how big is this number ten choose five? ten times nine times eight times seven times six divided by little bit but not lot. about ten to the third. It's  around thousand I'm guessing. Ok. point two out of fifty two time two choose five is only two out of fifty two. ok fine. All right. what we just figure it out is there are two hundred fifty two dice rolls that we can have. how many different mapping are there? how many different targets are there? they map to. ten. right? you can have ten different values. so I actually have slide for this. In this case your key space is huge. your key space is large relative to your table size. relative to or the range of your key of your hash table. there must be collision. there must be lack of one to one and miss there. All right. let's talk about this. let's go backwards now. So what the hash table? let's go way back for give pebbles around the rows, this was all meant to give you some like a domain and which to think but now let's go way back to definition of the hash table. We need to create to hash table. here is what we are gonna need. we are gonna need an array. ok? that's kind of obvious. That the tables where in the implementation level we are actually gonna be storing data. we need some hash function. you've seen a perfect one and  super good one. and you've seen a bad one and what we know right now is that this idea of bijection is a good one. Mathematician still till this day spend time on thinking about good hash functions. Creating a good hash function is not a soft problem. so we are gonna be using hash function that the other people create. And then finally we are going to need what we are gonna call a collision resolution strategy and this is simply a true confession that most hash function will not be one to one. ok. what you do if two things do map to the same cell. Hash functions are not generally one to one.