[gibberish] yes sixteen, lets try sixteen and see what happens, okay see where sixteen is going to go, whats the lowest key out of balance when i insert sixteen, fifteen very good fifteen is the lowest one and its the root of this sort of dog leggy thing so lets do this see what happens, sixteen there oh uh oh broken uh oh got it, see it, alright um i wanna do a double one. i mean one where its not quite so obvious. im gonna remove sixteen, im sorry fifteen, well eh remove 15, oh, i dont know what i wrote, there is no fourty eight are you tired of this? does anybody have any specific questions about it, the applet itself is on your handout, you can play with it a little bit yourself and we'll probably talk about it a little more when we talk about removals so you can see the removal process in action, but i wanna get to work. okay, so last time we were right smack in the middle of diagnosing the correct rotation. this processing is one that we're using to inform the code that we write and there is the easy way to understand whats happening mechanism for writing the code and then there is the thinking a little bit farther so that youre code looks beautiful part of writing the code so im gonna sort of start with the easy way of looking at it and argue for the um argue for the more elegant code in this slide okay so pretend your tree looks like this and we have t, t is where we're going to first detect an imbalance and furthermore im gonna tell you that insertion has happened somewhere over here. okay, so, insertion has happened somewhere over here for now and we've kind of walked up in this postorder mechanism after the actual insert has taken place and we get to t we evaluate the balance and we go whoa whoa whoa the balance equals what, theres in an imbalance there what is that balance have to be if the insertion has happened over here, that is we've increase the height over here, then and t is out of balance, so what is the new balance have to be at t, balance is right minus left how about that. does that help, height of right minus height of left, two is correct cant be anything else, if it were three that would mean we have done several insert without rebalancing and we're not gonna do that okay so the balance factor at t is two we can check that with a little function that checks that and some kind of what is your instinct say here some kind of what kind of what kind of rotation, left rotation will rebalance the tree thats all we know right now, further i will tell you that the insertion occurs here, now when i first wrote this code, i said look i can tell if the insertion happens over here, because it just means that the key that we're inserting is bigger than the key in t's right okay so saying this statement insertion occurs in t or t3 or t4 is equivalent to saying the key we are inserting is bigger than t's right key. 