We need to be able to deal that. Okay, so. Uh. So lets me explain that last one a little bit. um, if you're keyspace is about the size of your table, then you can take elements from your keyspace and just give them a value in your table. Sometimes when I do this, like if I'm programming in python, and I know I'm gonna wanna-- I'm going to want to put data into this... an array. I'll append an index value, or some kind of identifier, on the front of my data. Just because i know I can; the table will be big enough, I'm kind of finding a hacky way of identifying a key with a particular location in the table. This is a perfectly reasonable thing to do if you're keyspace is about the same size as your table. That is if all your data, all the data that you could possibly have will fit in your table. But here's what hashing generally means. Here's what hashing generally looks like. Usually we will have a huge keyspace.Kay? Some huge mathematical description what keys could be. And we're gonna draw some sample from that keyspace. We 're gonna draw some reasonably sized sample from the keyspace. Kay? And what our hash function has to do is take this data and map it to some cell locations. Kay? In the table. And the table has to be big enough to hold this subset. But here's the thing. A general hash table, should work independent of what subset is drawn from the keyspace. So maybe the case, that instead of that circle, we draw a sample from our keyspace that looks like this. And the hash function needs to map those nicely into our table. Lets put them somewhere else. Now what we want to avoid is... what we hope to avoid is some sample from our keyspace, some sample from our keyspace, where all of the keys map to the same location. Because that would be bad. Right? That would be not using our table effectively, and we wouldn't know where our keys were really. Cuz they would be all in the same place.  Any question about that? this is again more general how to think about hashing. This is a much harder problem. Okay, finding a general purpose hash function. It's where we're gonna start next time.