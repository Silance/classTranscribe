Ok, its exactly equivalent. And that's how I originally wrote this code. Well, this code snob came to me and said, why don't you write with balances consistently, you gonna be checking balances, check balances, don’t like, switch over to evaluating keys. I was like alright, well lets do that. So we could have, it does make prettier code, it does. We could have used this, to judge, we could have use key that were inserting greater than T right’s key. We could have used that to evaluate what kind of switch we need. But, there is this argument about the height balances as well. Well I am gonna try yet again, to make this argument. Ok? Alright, so we know that we are doing an insertion here, and we know that we have a new imbalance up there, which means that we must have changed the height of this whole tree. Cause this didn’t used to be out of balance, and now it is. So the height of all of this changes as a result of the insert down here. Ok? So the height of the whole thing changes as the result of an insert down here. Now, what I wanna ask about is what’s the height balance then have to be here? Now I have a question for you. Could the height up here after inserting down here be 2? No. Why? If it were, we will be doing rotations here, instead of here. So this one, is not out of balance. There is no imbalance here, cuz it’s up higher in the tree. We are gonna fix things when we find them. I haven’t found them yet. Ok, so that means, the balance factor of T right cannot be two, or negative two. Ok so those were removed from consideration. You can see them just not working. Ok, alright fine. So now, after the insert, suppose the balance factor here is negative one. Ok? So suppose the balance factor here is negative one, after the insert. But its two up there. What is that mean? About how big this was before the insert? Ok? We have been inserting over here, we changed the height of this whole tree. Right? We changed the height of that whole tree cuz otherwise we will be reevaluating things. But this one is negative, I mean, this one is taller after the insert. So that’s actually contradiction, right? This one is taller, after the insert over here. That can’t be. Because the only tree in which we are increasing the height had to be where we did the insert. So cant be negative one. This balance factor cannot be negative one. Now its either zero or one here. Now, suppose its zero. Ok, so that’s gone. Look, there is zero right here. Suppose the balance factor is zero, now and, just did an insertion over here. If we do an insertion over here, it means, and we are growing the height of this whole tree, it means that we are effectively bring the height of this one to be the same as the height of this one. So again, it’s a contradiction. Right? It’s a contradiction. You can’t increase the height of this whole tree while at the same time bringing this one up to the height of this one. The results in the zero balance factor. So the only balance factor that can exist here is one. 