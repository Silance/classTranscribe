So are keys are type T here and we're basically going to grab the root of the tree for returning. So this i the value that we are going to return, then we're going to replace that value as the root with the last value in this case that was 4 replaced by 11. Then we're going to decrement the size, effectively removing that last element from the tree, right but we capped it so we just removed something, then heapify down from the root and then return that minimum value .Alright now lets do heapfiy down from an index. Keep in mind that that index is the location of the key.  so were always going to be comparing our array at location index to get the key values. So , if c[index] has a child, what is happening, wait, Ill ask that in a minute. For a minute just assume that has a child just works. It'll tell you true or false based on whether or not cindex is a leaf. I could've put is a leaf there, if not isleaf c[index], its fine just the opposite. Alright, then I'm going to grab, the index of the minimum child, so I'm going to grab the index of the minimum child. So im going to make this function deal with finding the minimum child and we'll talk about why i did that in just a minute and then if the location is Ok, which way does this go. If the thing we were heapifying down is , what inequality? greater than the minimum child , then we should shove it down right? , good. If I didn't item[index
 > minimum child then we should swap the values, so we swaps items[cindex]   items[minchild]. Alright min items[index], Ok?  .Swap those 2 and then heapify down on minchild[index]. Seem ok? Ok we used 2 helper functions to make this code look beautiful, beautiful code at all costs. Im not actually going to expand this, but i wanna know what that code looks like. How cam I going to check to see if cindex has a child. What it is, excellent, whats 2*current index? Its where the left child would be if it existed. That value would greater than size,  theres no left child. Thats all that code is. This is 2*cindex, should be able to spell that,  > than size. You cant say left child, you should say 2*cindex >size