measurement on a tree.

And this one is a characterization of a tree that uses that measurement. Okay, so the vocabulary is the same, but there are some of the difference in their application. 

So the tree is height balanced if it is a empty tree. An empty tree is height balanced. Or if it is not empty, then you know the recursive nature of this definition says whatever is true for this entire tree must be true of the subtrees. And I think what you wanted me to write here was b equal 0, but I didn't. I wrote the absolute value of b is less than or equal to one. So rather than demanding that a binary search tree be perfectly balanced and all of its subtrees, we allow a little bit of imbalance. And the question is whether that's a big sacrifice or whether it can get us what we want.
Any questions about that before we go on?
Okay, so, is the tree on the left height balanced? 
OK, I'll say no, it's not. Now I'll need you to find me some subtrees that are not balanced. The subtree is rooted at 41. Take a look at 41,that node. And what you observe is that the height of the left subtree is zero and the height of the right subtree is 2. And I don't ever really think about the heights of those trees. I cannot eyeball it and look at the difference in the levels. Look there is a subtree where the left and right is different by 2. So hint this tree is not height balanced. 
Let's see. So what we are going to do moving forward is, take our earlier observation that we prefer mountains to sticks. And we're going to view the change, an operation on the tree to go from a piece of the tree that looks like this (middle) to a piece of the tree that looks like this (right). And the piece the tree that looks like this is going to be based on the observation that this example tree is auto-balanced. Ant by doing some little operation on the very same data, we create a tree that is very nicely balanced. Thank you very much.
So let's apply that thought, that impression to this tree. Where is the stick in this tree?  where is the stick that we might want to change?  Where is the string of nodes, all of which play into? What is an imbalance?
Right there, it is? So starting at the node that is out of balance, the lowest node in the tree that is out of balance, because it is possible that there are other nodes out of balance. But starting at the lowest node in the tree that is out of balance, we are going to observe that anything that looks like this, if we want to apply this magical operation and just change that portion of the tree, we could actually change the structure of the tree in a way that reduces the height. Okay, we'll talk about how to that in just a second. All right, any questions about that? 
No, there is no technical details. By the end of next slide, you will know how to use all the pointer assignments necessary in a pointer based tree to make that happen. So if it feels technically a little mysterious right now, that's perfectly fine. Okay, I have another question for you. How would we assess, how would we find 51 and determine that it is out of balance? What would be an algorithm, just kind of loose description of the algorithm to figure you out whether 51 is out of balance? That's a hard problem, right? 
