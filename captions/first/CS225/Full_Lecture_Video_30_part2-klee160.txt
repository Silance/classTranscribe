The age of Miguel is 22. OK, any question about that? So, that's kind of what the usage that you want. Alright, so what is return here? What is the value of d? 22, that's right. Any time you refer to this thing, anytime you refer to your structure with square brackets, you get the value out of the structure just as if it were an array. Now, this is a model, this picture right here, this table is a model for what is going on. This is a programmatic representation of the interface to your data. But, it lives at the application level. So the question is: how do we implement this? That is, what does this thing look like? What does the overloaded bracket look like? And we're kinda going to go there. Ok, so we're going to use a hash table to implement this thing. And I want to talk broadly about hashing. So there are a couple of definitions. So what is a keyspace? It's simply a mathematical description of the keys or set of data. Now, it might be strings. You might be able to say "it's the union of characters" or something like that. But it is usually defined over a set. The way to think about keyspace here is as the domain of some function. So any way you can articulate a domain effectively you are articulating a keyspace. So whatever kind of thing domain can be, you can use for keyspace. So, here's what we're going to do. We're going to use a function to map the keyspace onto a small set of integers, and we're in turn going to use those as array indices. Now, what is this function? I mean, a mathematical function, some mathematical function. So, you are accustomed to seeing it denoted like this. F maps the key to small positive integers. Ok, looks like a Z. And it's small. Maybe this isn't so robust mathematically. It's a small set of positive integers. Alright, let's see. What's fuzzy about this goal? We don't know big "small" is. And, what function are we talking about here? What is that function. I don't know, it's just some function. So, what's the behavior of the function overall. So, what's fuzzy about this goal is F is not obvious, and this small set of positive integers is not well defined. Now, here's what we're going to use the small set of positive integers for. Array indices. How big is it? It depends on the amount of memory you have available in which to build this array, which depends on how your system looks like at execution. For purposes of this course, we're not going to think very hard about that. I encourage you to write a little piece of code that allocates incrementally bigger dynamic arrays and see how big you can get Z positive to be. It will be big, you'll be amazed at how big it is. But, we don't care. We're gonna deal with that symbolically now. Because any conversation we have about it now, in two years, that number will be obsolete. So this just means the size of an array. So this is reasonable array size. 