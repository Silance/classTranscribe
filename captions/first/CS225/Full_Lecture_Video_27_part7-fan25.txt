Alright, should we chat? Okay, first let's make sure this sort of things that we thought it should do from the step on the previous slides. so notice that this is, well, if I ask you to describe what this is, what would you say? Base case, good. That's the base of recursion. It's simply create the node. Huh, The reason this works to just set t equal to the new tree node is because we have t pass by reference in the parameter. Okay, there some. I did. Is that cool? Magical. Alright, any question about that? So that creates the yellow node. Okay. Then the rest of this, if you hide this conditional, it looks just like a recursion insertion into a binary search tree. And in fact, that's what happens first. In each of these cases, the first thing happens is the recursive call. So everything follows the recursive call. So, there is inserting into the proper place from previous slide, here check for imbalance. Wait. There is an imbalance, do the right kind of rotation. This is diagnose thing what kind of rotation you need. And after all of that is done, before you move up, before you cast control out of the calling function, you recompute height. You may have to look at your own paper for that. You update the height of the parameter node. Any question about that? My desire to answer your question what has to happen or how would it happen we do things after the insert or walking of the tree? Any other questions about that? I guess we should fill in the blanks. Huh, so, what goes in this blank? It's easiest one. Okay, it's out of balance, and longer on the right. So we need a left-rotation. This one is a right-left, because this has to be some kind of left-rotation. Imbalance has to be some kind of left-rotation. And then up to the top boy, everything look symmetric, and I write this code without thinking about it, and, hope that I can catch any problem in the test. Any questions about it? So this is kind of code that I would write this part with some thought and do some substitution there. Now, I don't like this code. I particular don't like the fact that this and that are kind of the same. So I might refactor this a little bit, and make some helper function. But this is a little tough, I'm not really sure pass a little flag parameter that help you diagnose right and left. Be clever you name your variable. I'm not sure how I would refactor this. I know this is quite readable here, maybe I wouldn't at all. Because she know what? Height is always going to be the maximum of the height of my two children, which I have updated plus one. No, No. This parentheses closes this one. And notice here that I got a helper function that deal with the case that one of them is null, because I don't deal with that here. Same thing true here. Balance factor gonna deal with the case where t->right is null or left is null. I don't. Alright. Any other question about this? 