So we run each of these through the  new hash function, and they may end up in a completely different location in the new array.  But when we go looking for them we know we can find them.  Okay, any question about that?  Alright so otherwise though it's exactly parallel.  We don't fill the array.  We don't exactly double the table size and we don't copy the data but we have analogous, parallel things to do in each of those cases.  That process is called re-hashing.  Questions?  Is it okay?  Twice the array size.  

So am I worried about having to find the first prime?  Greater than twice the table size?  No.  We can find primes in a table really quickly.  You can store a lot of primes for lookup, you don't have to compute them.  Certainly enough to create an array of that size, yeah?  

So in practice it's about two thirds.  So the question is where did the two thirds come from and does it only strictly apply to linear probing and double hashing?  It's the load factor that corresponds to probe based hashing strategies generally however they are implemented.  So probably it's a double hashing.  In general you let your table be two thirds full.  It gives you sort of a feeling for what's going on behind the scenes when you use a hash map as well.  


So the question is, is there any way of escaping the fact that we are intentionally allocating memory that we aren't going to use we admit, we admit going in that a third of that space is not going to be used, and I believe the answer to that is "no".  Right?  That you have to allow for data to be mapped into those cells otherwise you've got a different problem.  That's sorta equivalent to having a full array and then you've got issues.  Alright any other questions about this?

So, where are we?  We got these two collision resolution strategies.  One of them just sort of hangs out the data.  The other one uses probing to place it in the table.  There are a gazillion others that you might use, that might be use.d  For example.  For separate chaining instead of a chain, why not use another hash table, or why not use an AVL tree?  Why not use something else instead of just a singly linked list?  So the number of variety, the amount of variability in that particular structure is astounding.  Okay, so these are just sort of the basic ideas.  Now, given those basic ideas, which  one is better?  

The structure speed is way faster for probe based hashing.  That is, if you can actually fit all your data in an array, that structure itself will be much faster.  But if your data is big, then you can't create an array that's very big using your memory effectively, and so you'll want to have the ability to hang your data off the structure.  So if you have big records then separate chaining is a better strategy.  And of course this is a huge simplification.  

Okay, what structures do hash tables replace for us?  What do we use them to implement?  Dictionaries.  What did we use to implement dictionaries before?