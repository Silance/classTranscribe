welcome back. how was your break? So we have this many more hours together. one hand. and we have a ton of content to do. So ideally this would be sort of the time between midterms. it isn't. It actually is the book of final exam. So we cannot turn off the deal yet. Because you know, you are not a computer scientist dough(?) of graphs. Our discussion of the details of graphs algorithms. In the discrete math class all of these definitions had been handed to you. If you're probably, 3 or 4 lectures scattered about the argumentation. If you glance over this list. It's kind of ugly. Each of these capitalized things is a phrase. If you glance of this list, and you don't "yeah yeah yeah", then you might want to revisit these terms in a fairly focused study kind of way. I'm going to be using these terms without definition in these 2 lectures. I'm almost certainly completely not able to reinforce their definitions. I won't just cruise right past, but it's very likely there will be very little concrete and rigorous definition of these kind of stuff going forward. I'm gonna advance that slide and we'll be done. Ready for this? Okay, they're gone. But we know them. So we're going to spend just a few minutes talking about some theory that's going to help us analyzing running time of algorithms. These are so fundamental that I want to make sure you have them. We're starting off with a graph denoted by a pair of sets, one of which is vertices the other of which is edges. It's a combinatorial construct. By way of notation, we're typically going to refer to the size of the vertex set as n and size of the edge set as m. Most of the algorithms that we're going to talk about have running times that depend on the number of edges in the graph. But usually when we wanna report the running times, we wanna report them in terms the number of vertices, n. So what we need to do before we go on, is make sure we completely understand the relationship between the number of vertices, n, and the number of edges, m. That's what this slide is all about. The question is, if I tell you I have a graph that has n vertices, how many edges does it have? Alright first thing we're gonna talk about is the least possible number that such a graph would have. So it would have no fewer than what? The answer is, depending on whether the graph is connected or not connected. What does it mean for graph to be connected? See I couldn't going through the definitions without saying them. 