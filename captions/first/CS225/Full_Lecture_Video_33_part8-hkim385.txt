And my question is what's its running time? log(n)! That's right, right? 
It was constant time to put the original value in place and then at worst, you're going to do swaps all the way up. 
All right, any question about it?
Yes?
I didn't fix the array, I know, I was being lazy and you called me on it. Fine.
This is five. This is seven. This is five. This is six. 
Now? Now we're good? Is it good? Okay.
All right, any question about it? Okay, fine, let's write some code.
Okay.
So here's insert, okay? 
It is, if the size is equal to - oh, oh wait a minute.
Wait a minute. This is, you know, we've got an array. It has fixed size. 
How big is that array ever going to be? 
Well, we don't know necessarily, but if that array is full, we better grow it somehow. 
Talk about that in a minute. 
Then we're going to increment the size. 
Increment the current biggest location. 
Place our value into that position. 
So that was putting the five at the end of the existing chunk of data in the previous example.
And then we're going to call a helper function called heapifyUp from that last location.
Okay? Any question about that? That's exactly what we did on the previous page.
Now, I want to show you something truly beautiful. Okay?
If the size is the same as capacity, it means the array is filled. 
So, our remedy is.. What is it? 
Double the size and copy the data. Right?
So like this. Double the size and copy the data. 
Here's the beautiful thing. This is the thing that gives me goosebumps. Okay?
Doubling the size means opening up the next row of the heap. 
Isn't that awesome? It's beautiful, right?
We're so lucky.
All right, any questions about it?
Okay.
So that's what we'll do. We'll open up the next row. 
We filled up this row, we'll double the size, copy the data it corresponds to, adding another row. 
Any questions about it? You're good? 
Okay, so let's talk about heapifyUp for a minute. Um.
So, the cIndex is the current index and basically I want to know if I should keep going. 
I want to know if I should keep going, and so it's basically if the cIndex is greater than zero.
And maybe it's one here, actually, because of our particular implementation. Okay?
If the uh item at cIndex is what relative to its parent?
If it is, it's less than its parent. Right? Because we're trying to move it up. 
So if it is less than its parent, then I'm going to call some swap function that swaps their keys.
Swaps those keys.
Uh, so maybe I'm going to swap items[cIndex] with items[parent(cIndex)], and then I'm going to call heapifyUp on the parent.