[{"text":"right, let's try this","width":153.18181824684143},{"text":"you should be able to write this code yourself","width":221.18181824684143},{"text":"and understand how it works","width":317.18181824684143},{"text":"now we're going to talk about the Reader-Writer problem","width":313.18181824684143},{"text":"the Reader-Writer problem crops up in all sort of places","width":467.18181824684143},{"text":"maybe in a web server, maybe in a database server and anytime you've got a data structure","width":483.18181824684143},{"text":"where you want to read it and update at the same time, you're probably going to run into the Reader-Writer problem","width":473.18181824684143},{"text":"so the problem is this","width":63.18181824684143},{"text":"I might have multiple threads that want to read from it","width":213.18181824684143},{"text":"and multiple threads that want to write to it","width":377.18181824684143},{"text":"if I've got a writer that is updating my data structure","width":375.18181824684143},{"text":"everybody else needs to wait","width":263.18181824684143},{"text":"I can't have two writers trying to change my data structure at the same time","width":247.18181824684143},{"text":"it's like two surgeons trying to do the cardiac stuff at the same time. it's not going to work","width":369.18181824684143},{"text":"it's going to end badly","width":73.18181824684143},{"text":"so we want to make sure that anytime we update data structure","width":289.18181824684143},{"text":"everybody else has to wait","width":147.18181824684143},{"text":"so if there's multiple writers waiting \"hey get in line, just one at a time please\"","width":363.18181824684143},{"text":"however, most of the time we don't actually need to update the data structure","width":245.18181824684143},{"text":"most of the time we want to allow our readers to read the data structure","width":273.18181824684143},{"text":"we want it to be efficient, in other words more than one reader can read the data structure at a time","width":644.1818182468414},{"text":"sounds easy, yes?","width":267.18181824684143},{"text":"the reader writer question is a popular question in internship interviews by the way","width":583.1818182468414},{"text":"let's have a look at some proposed solutions and see what happens","width":580.1818182468414},{"text":"and by the way, another thing you can expect in interviews is \"hey, what's the producer consumer problem?\"","width":653.1818182468414},{"text":"or \"how's it different?\"","width":183.18181824684143},{"text":"OK, so how is it different?","width":132.18181824684143},{"text":"first of all, the reader-writer problem is harder!","width":718.1818182468414},{"text":"the producer-consumer is just hey, I want to throw some stuff into this data structure and I want to pull some stuff out of the same data structure","width":493.18181824684143},{"text":"and if the data structure is full then you need to wait","width":230.18181824684143},{"text":"and if the data structure is empty then you can't pull anything from it and you need to wait","width":286.18181824684143},{"text":"and we can implement that with semaphores or conditional variables as well","width":277.18181824684143},{"text":"but we'll see that later","width":135.18181824684143},{"text":"the reader-writer problem I've got multiple readers running at the same time","width":448.18181824684143},{"text":"N readers, that's OK","width":521.1818182468414},{"text":"but I only expect one writer at a time","width":689.1818182468414},{"text":"anytime I've got a writer everyone else has to stand back, the readers aren't allowed to access the data structure either","width":419.18181824684143},{"text":"great, I've defined the problem. let's see if this code works","width":241.18181824684143},{"text":"here's some example code, perhaps you and your neighbor can figure out if it's any good","width":420.18181824684143},{"text":"or why it's no good","width":120.18181824684143},{"text":"[students working, long pause]","width":8933.181818246841},{"text":"OK, so let's talk about one kind of common gotcha here is","width":274.18181824684143},{"text":"I've been giving you examples where I've made p_threads, mutex locks and conditional variables just as global variables","width":336.18181824684143},{"text":"you don't have to do it that way, you could actually put them inside heap memory","width":240.18181824684143},{"text":"for example, if we called malloc, we might say \"now give me the size of a p_thread mutex pointer\"","width":617.1818182468414},{"text":"is that OK?","width":152.18181824684143},{"text":"no! I've just asked for the size of a pointer, that's going to be say 4 bytes on 32-bit system and 8 bytes on a 64-bit system","width":463.18181824684143},{"text":"I don't want that. I actually wanted the size of the data structure","width":263.18181824684143},{"text":"and unfortunately no one is going to tell you that you got it wrong","width":201.18181824684143},{"text":"it's just going to crash at some strange point in the future of the program","width":348.18181824684143},{"text":"so watch out for your asterisks ","width":133.18181824684143},{"text":"a pointer is not the same as the structure","width":183.18181824684143},{"text":"and good that we've initialized these things, presumably we have to make some more memory for the write lock as well","width":490.18181824684143},{"text":"how does this work? well anytime a thread wants to read, it first grabs the read lock and does reading stuff and when it's finished it unlocks","width":484.18181824684143},{"text":"how does the write work? anytime it wants to write it grabs the write lock, and it grabs the read lock! so it can only get through this stuff, it can only get to actually doing any writing, when it has both of these things","width":850.1818182468414},{"text":"so that means that no other writer can be writing at the same time, right?","width":233.18181824684143},{"text":"because I've got the lock and if I have the lock you that means you don't have it! You must be stuck inside the write lock","width":444.18181824684143},{"text":"so only one of us can actually do the writing","width":298.18181824684143},{"text":"this works great, yes?","width":63.18181824684143},{"text":"no, of course it doesn't, it's the first version!","width":341.18181824684143},{"text":"how is it broken?","width":439.18181824684143},{"text":"yes, our first problem is that only one person can read at a time. we wanted multiple readers to be able to use our data structure","width":707.1818182468414},{"text":"this is insufficient","width":258.18181824684143},{"text":"it fails in terms of allowing multiple readers","width":198.18181824684143},{"text":"it does a few good things though. it ensures that if a writer is writing then no one else can do anything","width":453.18181824684143},{"text":"so that seems pretty good","width":223.18181824684143},{"text":"let's have a go at version two","width":393.18181824684143},{"text":"and in this version we are going to have a couple of integers, which if they are on the stack I'd better set equal to zero","width":834.1818182468414},{"text":"and we'll keep track of how many people are really writing","width":668.1818182468414},{"text":"should read be locking write? it's not necessary","width":212.18181824684143},{"text":"the question is \"should the read method actually call write lock as well?\"","width":329.18181824684143},{"text":"it's not necessary because the write also grabs the read lock","width":385.18181824684143},{"text":"so the writer cannot continue whilst anyone actually has the read lock","width":654.1818182468414},{"text":"good question, thanks","width":151.18181824684143},{"text":"we'll keep track of this somehow","width":152.18181824684143},{"text":"whether reading or writing is actually happening","width":650.1818182468414},{"text":"what do you think of candidate two?","width":540.1818182468414},{"text":"is this any good?","width":63.18181824684143},{"text":"[long pause]","width":1641.1818182468414},{"text":"so you could be doing reading while writing","width":148.18181824684143},{"text":"OK, let's have a look at the logic that inspired this and then we'll see why it's broken","width":318.18181824684143},{"text":"so the logic behind this is trying to say, while someone is actually doing some writing, I'm not going to touch this. I'm going to wait","width":446.18181824684143},{"text":"so then we can carry on and I'm going to raise my little flag to say \"we're doing some reading\"","width":262.18181824684143},{"text":"and then I set reading to false","width":269.18181824684143},{"text":"what's the logic that I did behind the writing is to say ","width":153.18181824684143},{"text":"while anyone is reading or writing, just do a busy loop. we'll burn up some CPU","width":280.18181824684143},{"text":"nevermind that, CPUs are cheap","width":242.18181824684143},{"text":"and then when we get past here we'll raise my flag","width":201.18181824684143},{"text":"I've got writing to do. I'll do my writing stuff. I've raised the flag so anybody else will be stuck inside their busy loops","width":513.1818182468414},{"text":"because I've set the flag to true then the readers will be waiting and any writers will also be waiting inside their while loop","width":608.1818182468414},{"text":"the code is fine!","width":329.18181824684143},{"text":"what smells a bit? it's not fine!","width":313.18181824684143},{"text":"we've got race conditions, just like we saw with the critical section problem","width":251.18181824684143},{"text":"with these flags we might be setting the flags a bit late","width":316.18181824684143},{"text":"and what would happen if two readers came in?","width":492.18181824684143},{"text":"the first reader to finish reading would set the reading flag back down to false","width":305.18181824684143},{"text":"it would look like no one is reading","width":427.18181824684143},{"text":"you could imagine two writers coming in","width":210.18181824684143},{"text":"both writing threads would see that reading and writing are zero or false","width":308.18181824684143},{"text":"and so we'll continue. oops! we've got a race condition","width":299.18181824684143},{"text":"so we're not doing very well here","width":353.18181824684143},{"text":"we're not checking our variables in a careful enough way","width":404.18181824684143},{"text":"and we're allowing readers to happen a the same time as writers","width":326.18181824684143},{"text":"I could imagine a reader and writer coming in at the same time and they both get past their while loops because neither of the flags are set yet","width":515.1818182468414},{"text":"because they are set later","width":119.18181824684143},{"text":"so if the two while loops happen at the same time, whoops! we've allowed both a reader and a write access to the data structure","width":442.18181824684143},{"text":"so this is no good, but don't worry, we've got a solution for you!","width":303.18181824684143}]