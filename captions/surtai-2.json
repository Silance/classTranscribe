[{"text":"so let's talk more about that file descriptor","width":185},{"text":"I'm gonna make my program be a little bit more useful by printing out \"Hello World\" a few times","width":325},{"text":"so for example, I have a variable 'count' here and a little for-loop","width":335},{"text":"Start with count equal to five, while count is greater than zero","width":275},{"text":"each time around the loop we're going to decrement 'count'","width":270},{"text":"In C, there is no boolean type.","width":183},{"text":"instead, if I've got an integer value which is nonzero, that is treated as a true value","width":385},{"text":"So, I could actually write this more tersely just by saying \"hey, count!\"","width":323},{"text":"meaning is count a non-zero value","width":193},{"text":"and if you compare two things, you'll learn that with an integer value of either 0 or 1 to mean for example if they are either the same or different","width":497},{"text":"so, we're going to print out \"hello world\" 5 times","width":442},{"text":"I want to show you just a little idea here that actually I've got two file descriptors which are valid when my program starts.","width":519},{"text":"And they're called 1 and 2.","width":174},{"text":"Why might it be useful to have two output streams?","width":236},{"text":"well, you can imagine we have a program that is calculating something","width":266},{"text":"for example it's thinking of something to say or it's going to write to a file","width":282},{"text":"but we may also want to display some error messages back to the user","width":190},{"text":"or we might want to print some progress information","width":360},{"text":"the first output stream identified by the number '1' is the regular output, standard output","width":456},{"text":"The second one is reserved for error messages.","width":354},{"text":"Let's, for example, use this. Instead of error messages, we'll put a little dot to see this","width":419},{"text":"We'll run this and we should (if we got everything correct) see \"Hello\" and...lib lib lib lib","width":771},{"text":"Now, why do we see \".lib\", because we said \"hey, I'm going to give you a pointer and I want you to use that pointer and take the next 6 bytes from it which is the next  six character","width":886},{"text":"So we just got whatever happened to be in memory after our dot. So, we only wanted to do the dot","width":646},{"text":"Change that and run it again","width":195},{"text":"And great, we've got Hello and dot Hello dot Hello","width":195},{"text":"So, right now, both the output and the standard error are going to different places","width":352},{"text":"we could actually change that over here in the console before we start the program","width":277},{"text":"Our terminal can actually control where the output goes","width":256},{"text":"So, for example, I might say, I want to take the standard output and put that into a file.","width":344},{"text":"So, \"output.txt\"","width":153},{"text":"So now, if I run this before the program starts, I'm going to redirect it's output into this new file","width":531},{"text":"Okay, so what we see on the console output is anything written to standard error","width":308},{"text":"The standard output is inside output.txt","width":196},{"text":"To prove it, let me have a look at that file.","width":205},{"text":"Let me cat that file","width":94},{"text":"So, output.txt","width":145},{"text":"And here it is! It says \"hello, hello, hello, hello\"","width":239},{"text":"Now, rather than writing 1 and 2 over here, perhaps we should actually have some constants","width":359},{"text":"which signify what those values actually mean","width":238},{"text":"so we could say start define things to say have a constant here, I'll call it say \"STDOUT_FILENO 1\"","width":707},{"text":"And I'll say define STDERRFILENO 2","width":480},{"text":"so anytime you do hash define, you're talking to the preprocessor to say \"hey, in the future, parts of this file, if you come across this character sequence, then replace it (in this case) with either a 1 or a 2 depending on what it is\"","width":1084},{"text":"We can compile this, except I've got a surprise for you which is that these particular macros are already defined inside unistd.h","width":705},{"text":"So, I don't actually need to define them here in my program.","width":302},{"text":"So that's my little program. You see it's got a return value of zero. Which is a convention for being correct (no errors)","width":636},{"text":"But it's up to us. We could choose a different value, for example we could choose the value 42.","width":555},{"text":"And, I don't see an output value, but I can find out what the last exit value was of the last process","width":569},{"text":"Let me print it out","width":133},{"text":"It happens to beinside special variables","width":140},{"text":"so I could say \"Hello terminal value of this dollar question mark.\"","width":308},{"text":"which means give me the exit value (or the exit status) of the last command run.","width":347},{"text":"So there's our forty-two.","width":153},{"text":"Okay so, we've covered quite a bit of ground. We've talked about how in C, any non-zero integer is considered \"true\"","width":804},{"text":"and zero is considered \"false\"","width":235},{"text":"And, we've talked about these two different output streams. Now it's your turn to play with this. After that, let's have a go at creating some new files directly from C","width":831},{"text":"by making system calls","width":160},{"text":"So, now it's your turn. Have fun playing! Bye.","width":300}]