[{"text":"Yes?","width":208},{"text":"Very good.","width":223},{"text":"So in the table, it's..","width":142},{"text":"So remember that roots are indicated by negative numbers, okay?","width":273},{"text":"And in the table, 6 is supposed to be a root.","width":306},{"text":"Okay?","width":36},{"text":"And not 3.","width":135},{"text":"In the table it says 6 is 3's parent, okay, so that's the bug.","width":351},{"text":"That, that was my intentional bug.","width":135},{"text":"Anybody else find something, something different?","width":264},{"text":"Some other error?","width":222},{"text":"Okay, so notice that these are not ordered trees in any sense.","width":287},{"text":"So, it didn't matter where I drew the 2 and the 9 here relative to one another.","width":455},{"text":"There is no notion of a left child and a right child, or a middle child, or an early middle ch- there, you know.","width":588},{"text":"So this tree is not ordered, it's not necessarily binary, though this, uh, this examples happens to not have any non binary nodes.","width":836},{"text":"Uh, let's see.","width":87},{"text":"It is directed, though.","width":80},{"text":"That's the key part.","width":76},{"text":"Alright, any questions about it?","width":128},{"text":"Alright, let's take union just to remind ourselves how you take union, both in the context of the model and in the context of its representation in memory.","width":879},{"text":"So I want to take the union between these two sets and do something, and do something that makes all of these in the same tree.","width":714},{"text":"So how should I do that?","width":56},{"text":"I've got these two trees, what should I do?","width":143},{"text":"What should I do?","width":244},{"text":"Yeah?","width":138},{"text":"Yeah, make one of the roots point to the other.","width":207},{"text":"Now, should I do this or should I do this?","width":262},{"text":"Should I do this, this one?","width":211},{"text":"Okay, and now I have to like turn around.","width":339},{"text":"Oh, wait.","width":56},{"text":"Okay.","width":84},{"text":"So your opinion, I should do this?","width":236},{"text":"Okay.","width":42},{"text":"Um.","width":87},{"text":"Alright.","width":47},{"text":"You think 5 should point to 7.","width":130},{"text":"Okay, now, what I want you to get from that little exchange is that there was a choice to be made, and for now, we're going to make an arbitrary choice.","width":679},{"text":"Um, a principle, but arbitrary choice.","width":162},{"text":"And I'm just going to have the one on the left point to the one on the right.","width":221},{"text":"Okay.","width":18},{"text":"But you should recognize that it, sort of, you know, that was arbitrary.","width":437},{"text":"Okay.","width":59},{"text":"Finally, if I say something like \"the union of 2 with 7\", what I really mean is the union of the set containing 2 with the set containing 7.","width":1585},{"text":"So I need to call find() in order to get the appropriate representative of that set.","width":702},{"text":"Okay, any question about that?","width":128},{"text":"Alright.","width":55},{"text":"So, uh, and the reason I bring that up here is because when I talk about these functions and when we discuss running times of these functions, we want to find() to be decoupled from union().","width":1059},{"text":"When you implement these things in mp7, you're going to throw a find() inside, because you don't want to have to demand that the client do this every time.","width":702},{"text":"So, there'll be a slightly different specification for the union function in the mp than there is here.","width":625},{"text":"Okay, but I want to decouple them because I want to be able to talk about running times separately.","width":358},{"text":"Alright, any question about that?","width":203},{"text":"Okay.","width":49},{"text":"So let's write some code, yay.","width":218},{"text":"Alright, so..","width":186},{"text":"The function find() is going to take a key or a element identifier, some kind of identifier, and it's going to return the root of the uptree.","width":1140},{"text":"Returns the root of i's uptree as a representative.","width":1120},{"text":"Okay.","width":69},{"text":"Now.","width":50},{"text":"Woah, look at this code.","width":112},{"text":"This is really cool.","width":131},{"text":"If, if the value in the array at i is less than zero, it means that i is a root, right?","width":446},{"text":"That's what we agreed on.","width":105},{"text":"In which case, we're going to return i.","width":163},{"text":"Otherwise, we're going to walk one step up the tree.","width":433},{"text":"Okay, so, we're going to find() on i's parent.","width":683}]