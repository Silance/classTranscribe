[{"text":"Very Long running time is good enough I think.","width":176},{"text":"Alright, any question about that?","width":146},{"text":"So, it doe not really matter in the performance weather we do binary search in that case.","width":375},{"text":"Of course, you could and in fact, hack!","width":199},{"text":"These nodes, each one of them, they can be a AVL tree if you want it instead of keeping you array sorted you could build them into an AVL Tree if you want it or what ever right?","width":728},{"text":"The nodes of themselves can be different structures, its just an array of data.","width":352},{"text":"Just a question of how much it can hold.","width":154},{"text":"Ok, any questions about this?","width":247},{"text":"Alright, the height of B trees determined the these sort of the introduction into the analysis of this thing.","width":516},{"text":"Prabobly gonna do these analysis really quickly because we only have 5 min.So the height the B tree determines the number of disk seeks determines the running time.That's what we want to minimize and that's what we want to analyze here.","width":979},{"text":"We want to be able the say the height of the structure and thus the number of disks seeks is no more than, how tall do you think these things are?how tall do you think these things are for n pieces of data?","width":1140},{"text":"Log?","width":52},{"text":"Did you say Log?","width":229},{"text":"Log of the size of the data.","width":245},{"text":"Now, what's the base of the log?","width":393},{"text":"M, good Cause at each level basically we are allowing for dividing our data into, dividing our data by M.","width":568},{"text":"As we saw a case in AVL tree, finding the upper bound of the height is the same as finding the lower bound for the number of keys.","width":481},{"text":"So that's what we gonna do, again, Um and we are gonna find that relationship.","width":402},{"text":"And this is what we are trying to prove here.","width":230},{"text":"Alright, any questions about this?","width":208},{"text":"OK fine.","width":92},{"text":"Um, we are going to look at, we are going to look at this,first level by level.","width":535},{"text":"We are not gonna think recursively about this because I haven't defined a B tree recursively.","width":317},{"text":"Could but I haven't defined a B tree recursively so we are not gonna look at it recursively.","width":433},{"text":"OK, so, N of h, so again, we are going to say that the minimum number of nodes in each level of a B tree order m, now this is a node in a level, not a key in a level.","width":1121},{"text":"OK Nodes in a level, not keys in a level.","width":221},{"text":"Ok, n of h is number of keys in level h.","width":1005},{"text":"So what's the minimum?","width":135},{"text":"For your convenience, this will help you.","width":651},{"text":"Uh, this helps ok.","width":80},{"text":"We are gonna let T= the celling m/2, and so this is the number of children, the minimum number of children a node can have, so we are gonna let T= m/2/ Ok, so what's the minimum number of nodes, not keys in a root?","width":1545},{"text":"Minimum number of nodes, not keys, what is it?","width":329},{"text":"How many nodes are there ever in a root?Thank you!","width":234},{"text":"Now things are getting interesting, what's the minimum number of nodes in the second level of the tree?","width":641},{"text":"If I've got one in the root, how many nodes do I have?","width":522},{"text":"Not keys, nodes.","width":60},{"text":"Now things get interesting.","width":161},{"text":"Ok, here is the root, and here its children, here are some nodes.","width":411},{"text":"How many children might be coming off here?","width":280},{"text":"Notice that the degree of each of these is the number of nodes in the next level.","width":373},{"text":"What's the smallest value?","width":552}]