[{"text":"Due date, so you do next due next, the thing that is due next gets your attention.","width":544},{"text":"It's some strange weighted average, right?","width":122},{"text":"Of due next, worth most, you know.","width":250},{"text":"Oh, this, it's, like most, the one that makes you happiest.","width":297},{"text":"Oh that'll be us, you know.","width":208},{"text":"Um.","width":33},{"text":"Uh, alright.","width":123},{"text":"So, you know, this is this function that determines the keys, the ordering in the priority queue can be lots of different things.","width":483},{"text":"Also, when we talk about graph algorithms, we'll be using a priority queue to order the uh to order the uh to order the order.","width":852},{"text":"To plan the order in which we visit edges of a graph.","width":287},{"text":"So this is uh graph search.","width":197},{"text":"Graph algorithms in general tend to have a lot of priority queues.","width":218},{"text":"And that's foreshadowing.","width":98},{"text":"That's, where are we going with this?","width":153},{"text":"Why did we talk about it at all?","width":184},{"text":"Alright, any questions about that?","width":114},{"text":"So I love this.","width":65},{"text":"I love that it's a rich conversation that has many different levels.","width":290},{"text":"And yet, somehow inherently safe because it's just computer science, not it's not like philosophy.","width":479},{"text":"Alright, okay, so is that thing a heap?","width":578},{"text":"Is it?","width":70},{"text":"If I'm keying on the characters, the alphabetic order of the characters.","width":317},{"text":"No.","width":40},{"text":"What's your evidence?","width":318},{"text":"B U oh the U is greater than L and D, right?","width":319},{"text":"Okay.","width":40},{"text":"Alright, so I believe it.","width":146},{"text":"That that one is not a heap.","width":139},{"text":"Now what I want to know is what would be an algorithm for making that into a heap?","width":542},{"text":"What could you do?","width":75},{"text":"I'm giving you the data.","width":76},{"text":"You can assume basically that your data is laid out in array.","width":255},{"text":"Here's an array with all your data.","width":136},{"text":"Make it into a heap.","width":100},{"text":"What are you going to do?","width":125},{"text":"Yeah?","width":119},{"text":"Oh, why not sort it, right?","width":117},{"text":"You can use mergesort.","width":105},{"text":"Perfectly fine, perfectly reasonable idea.","width":289},{"text":"But we can do better.","width":115},{"text":"What is it mean to do better?","width":198},{"text":"What's the running time for mergesort?","width":244},{"text":"Big o of woah.","width":298},{"text":"Okay, you guys gotta write this down and put it on your mirror, okay?","width":239},{"text":"This can even if you don't know the proof of this, it should just roll right off.","width":278},{"text":"You can, you can be talking about stuff you don't know, but this one should just roll off.","width":236},{"text":"The running time of merge watch me get it wrong here the running time of mergesort worst case is nlog(n).","width":568},{"text":"So you're guaranteed nlog(n) for mergesort.","width":211},{"text":"It's not a great sort because it's very hard to do in place, especially if you're doing it in an array.","width":378},{"text":"But you actually did it in place in for mp3, I think, but your memory was all over the place.","width":403},{"text":"Alright, uh let's see.","width":168},{"text":"So, okay, so we could sort it, that would work.","width":271},{"text":"What else could we do?","width":130},{"text":"Yeah?","width":6},{"text":"Oh use heapify.","width":281},{"text":"How would you use heapify?","width":190},{"text":"What would you do?","width":213},{"text":"What is, what what how would you use heapify here?","width":401},{"text":"How would you use heapify?","width":83},{"text":"Oh, heapify down through the it turns out that doesn't work.","width":394},{"text":"Okay?","width":86},{"text":"Yeah?","width":224},{"text":"Very good, very good.","width":80},{"text":"So the other thing you can do is pretend like, pretend like this is just data that happens to be sitting in memory and do repeated insertion into the structure.","width":827},{"text":"So first we've got, an empty heap.","width":172},{"text":"And we're going to add B to it.","width":246},{"text":"Okay?","width":42},{"text":"Well, there.","width":77},{"text":"We did heapify up from here.","width":131},{"text":"Fine.","width":24},{"text":"Done.","width":51},{"text":"Then we're going to add U to it.","width":112},{"text":"And now we can look at this part and say okay that's a good heap.","width":296},{"text":"Then we can add I to it.","width":157},{"text":"And that's a heap.","width":98},{"text":"And then we add L to it, and what happens?","width":296},{"text":"No it's fine, this is fine.","width":115},{"text":"You have to swap, right, but you're inserting.","width":218},{"text":"So you get heapify up for free.","width":200},{"text":"So L and U should swap.","width":300},{"text":"Okay.","width":78},{"text":"And now that's a heap.","width":197},{"text":"And now everything up to here is a heap.","width":122},{"text":"Okay, so do you see how this would play out in the end?","width":178},{"text":"One at a time, you're just going to add each one of these.","width":277},{"text":"It's like uh you know however many vertices there are here, inserts into the structure.","width":417},{"text":"Okay, do you like that?","width":244}]