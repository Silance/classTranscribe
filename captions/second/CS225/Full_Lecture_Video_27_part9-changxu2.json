[{"text":"The good news would be O(n).","width":257},{"text":"Otherwise you know we might just as well let the binary search tree to run them their way, do what they are going to do anyway, okay?","width":1115},{"text":"So the next few minutes are going to be spend arguing that AVL trees, by, using their definitions, AVL trees resulting trees whose height are worse case O(lg(n)).","width":1239},{"text":"Now, I can't make this argument very cleanly without first reviewing the definition of Big-O from CS173.","width":773},{"text":"Okay?","width":31},{"text":"Anybody need some [gibberish] points?","width":237},{"text":"You wanna refresh me of the idea, refresh me of the ide of the definition?","width":343},{"text":"What is the definition of Big-O?","width":354},{"text":"Yes, it is the worst case running time, it is the an upper bound on the running time.","width":294},{"text":"Okay?","width":16},{"text":"But, what is the definition of it?","width":287},{"text":"I will give you a hint, you will need that symbol.","width":591},{"text":"Okay?","width":75},{"text":"Oh What?","width":124},{"text":"Yeah ready Nathon?","width":471},{"text":"Yeah a function of Big-O of n, is a function of g(n), if and only if, okay good.","width":886},{"text":"Exist a constant c so that......Good.....Very good.......So i am going to take that for sufficient large n and turn it into that some other that [gibberish] variable k and make it when n is greater than k.","width":1817},{"text":"Alright oh what the heck?","width":117},{"text":"That was impressive.","width":223},{"text":"That was a [gibberish] a environment that I might like to give you a hint, that is very good.","width":533},{"text":"Okay, there exist constant c and k so that the function is less than some factor of this other em....this function, when n is big enough.","width":858},{"text":"Okay?","width":32},{"text":"So now, here is the deal.","width":279},{"text":"This function that we are going to argue about is we think logrithimic.","width":401},{"text":"Okay?","width":103},{"text":"f of n.","width":29},{"text":"We think it is logrithmic, but we don't know for sure.","width":321},{"text":"We don't know, we don't know that it is like for sure, but we do know that the one that we are going to compare against is logrithmic.","width":524},{"text":"So I am going to put that on here also, okay?","width":282},{"text":"So maybe here.","width":315},{"text":"g of n is equal to log of n.","width":320},{"text":"And pretend that this is increasing.","width":95},{"text":"I kinda dipped it down, I shouldn't have.","width":172},{"text":"Now alright we are not going to make the argument that our function is less that g of n.","width":384},{"text":"But we are going to take some constant factor of g of n and maybe this goes like this, [Gibberish].","width":1425},{"text":"And we are going to make the argument that our function is less than that one, when n is greater than some value k.","width":1233},{"text":"Is that make sense.","width":128},{"text":"You've probably seen this graph before right?","width":205},{"text":"Alright, this is what big-O of n means, this is what it is means for a function to be big-O of another function.","width":608},{"text":"Here is the problem with it, i can't do the problem.","width":195},{"text":"I will tell you the problem with this next time.","width":244},{"text":"The start of next time.","width":923}]