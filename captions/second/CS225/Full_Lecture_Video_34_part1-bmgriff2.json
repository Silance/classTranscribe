[{"text":"What characteristic of a heap allows an array-based implementation?","width":364},{"text":"You've got it, yeah?","width":251},{"text":"That's right it is a complete tree.","width":283},{"text":"Now, what that means in fuzzy land is -you know- this tree has no gaps in it.","width":360},{"text":"It is like we took all our data and laid it out in level order until we ran out of data.","width":356},{"text":"Right?","width":13},{"text":"Okay, so it is the complete nature of this tree.","width":190},{"text":"Alright then finally, what is the characteristic ordering of a heap?","width":299},{"text":"How do you know when you look at this, that this thing is a heap?","width":398},{"text":"Yeah?","width":184},{"text":"Increasing, what's increasing?","width":91},{"text":"That's a key word, what's increasing?","width":149},{"text":"Uh, kind of.","width":137},{"text":"Yeah?","width":99},{"text":"Every path from...","width":187},{"text":"root to leaf.","width":35},{"text":"That's right.","width":41},{"text":"Every path from root to any leaf is an increasing path.","width":268},{"text":"Alright, so I am going to wave my magic wand here.","width":338},{"text":"For every observation we have made about these min heaps, we can make a parallel observations about max heaps.","width":713},{"text":"Alright, so there are parallel explanations for max heaps.","width":577},{"text":"And you may see them if you are doing online studying for things.","width":296},{"text":"Some people -almost no instructors will use both min and max heaps, but some instructors will use max heaps instead of min heaps.","width":710},{"text":"Okay, lets see.","width":37},{"text":"So, last time we talked about an algorithm for removing from such a structure, but we never wrote the code to do that.","width":685},{"text":"Alright, where's the minimum in the heap?","width":279},{"text":"Where's the minimum in the heap?","width":94},{"text":"At the root, that's right.","width":143},{"text":"It is always at the top.","width":82},{"text":"So, if one our functions in our abstract data type is remove min.","width":333},{"text":"All we have to do is grab that node from the top.","width":345},{"text":"Easy-peezy right?","width":176},{"text":"But the problem is, if we actually move it, we break the heap.","width":396},{"text":"So, our algorithm was tot take this last value, because it doesn't ruin the completeness of our tree to do so.","width":1025},{"text":"Take that last value and swap its key up into the spot previously occupied with the minimum.","width":504},{"text":"Now, do you like that?","width":484},{"text":"Okay, you like it, but only partially like it, right?","width":314},{"text":"Cause in a way, it breaks the heap property of the tree.","width":213},{"text":"Yes, you see that?","width":65},{"text":"So do you remember how to fix it?","width":247},{"text":"Yeah, heapifyDown, that's right.","width":200},{"text":"So this notion of heapifying the tree is one of restoring this path ordering characteristic.","width":529},{"text":"So we are going to the heapify that 11 down.","width":173},{"text":"Should I swap a 5 or 6?","width":133},{"text":"I should swap with 5 because it is safe to put 5 above 6, but not safe to put six above five.","width":600},{"text":"So I am going to always swap with the minimum child.","width":342},{"text":"Alright, so 5 comes up 11 comes down.","width":197},{"text":"Swap with the minimum child.","width":137},{"text":"It is always safe to do so.","width":100},{"text":"9 comes up 11 goes down, and then, 11 is smaller than either of its children, so we're done.","width":500},{"text":"Okay, any questions about that?","width":133},{"text":"Is it good?","width":112},{"text":"Okay, let's right some code, or at least look at some code.","width":172},{"text":"I can't remember how much is here.","width":550}]