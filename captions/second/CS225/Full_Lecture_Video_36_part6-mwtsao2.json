[{"text":"Umm, but it also guarantees that same running time, okay?","width":320},{"text":"So now, let's write code that does this.","width":220},{"text":"Let's write code that does.","width":123},{"text":"Um, oh and we're not going to prove the log n here.","width":202},{"text":"We're going to move right past it, we're going to be satisfied with this moment of having log n, but we're not going to take the time to prove that because we're going to do better.","width":801},{"text":"Alright, find has not changed so the code for find didn't change at all but the running time of find is going to change, we didn't even touch it and its running time is going to change.","width":962},{"text":"Alright, so here is union by size, union by height could be done similarly, I don't even think we ever ask you to do it I think we always ask you to do union by size.","width":730},{"text":"Notice that the new size, the sum of the values at the root just like we suspected might be the case, if so we've got this helper function \"is bigger\" that merely takes the negative of the value in the root right, and compares them.","width":1089},{"text":"But I got a little bit lost in the inequalities there so I wanted to test that separately and make sure it did what I thought.","width":697},{"text":"So let's see this is this means...","width":503},{"text":"root 1's tree has more nodes...","width":502},{"text":"than root 2's.","width":297},{"text":"Okay.","width":83},{"text":"Alright, root 1 is bigger then, we're going to point root 2 to root 1, and then root 1 gets the new size.","width":630},{"text":"Okay, any questions about that?","width":120},{"text":"Otherwise we'll do the opposite.","width":78},{"text":"Any question about it?","width":125},{"text":"Okay what's the running time of that code?","width":663},{"text":"Yeah, it's constant time, good.","width":183},{"text":"Because there's no traversing going on, there's nothing about the size of any of these structures that affects running time here, right?","width":668},{"text":"We can look up the sizes are just array look-ups.","width":348},{"text":"The comparisons is a constant time thing, a conditional evaluation then we got a couple of assignments.","width":412},{"text":"So this is still a constant time operation but it has the effect of maintaining the trees as short trees so now we can say find is big O of log n.","width":1062},{"text":"Do you remember what was the best we had before we started using these up trees?","width":527},{"text":"The naive implementations of I guess it was probably using an array.","width":514},{"text":"Do you remember what it was for using an array?","width":386},{"text":"It was constant time for size, but big O of n for taking the union.","width":410},{"text":"Okay.","width":46},{"text":"So this is using an array.","width":153},{"text":"And you can go back using an array naivelyish.","width":539},{"text":"You can go back and review that.","width":223},{"text":"Okay.","width":21},{"text":"Do you like this better?","width":329},{"text":"Kind of depends on which one you do most often, right?","width":231},{"text":"And in fact in this sequence of using these structures you can only take unions so many times, so this doesn't feel quite satisfying to me yet.","width":870},{"text":"Okay.","width":41},{"text":"We shouldn't stop here.","width":381},{"text":"We should do one more thing.","width":349},{"text":"Let's suppose we do a find of 4.","width":531}]