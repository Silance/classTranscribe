[{"text":"AVL Tree.","width":164},{"text":"Anything else?","width":208},{"text":"A b-tree, yeah.","width":79},{"text":"Sort of.","width":47},{"text":"But, if our data is so big.","width":154},{"text":"If our data's so big, it doesn't fit in memory.","width":120},{"text":"It's not gonna fit in memory here either.","width":190},{"text":"So, mostly AVL trees, maybe a linked list.","width":220},{"text":"But those have been bad for a long time.","width":206},{"text":"Okay, so, primarily.","width":121},{"text":"Primarily it replaces an AVL tree.","width":164},{"text":"you know what, I'm sorry.","width":219},{"text":"I need to go backwards.","width":87},{"text":"I need to reemphasize something.","width":226},{"text":"I need to go back to here.","width":394},{"text":"What's the running time of finding something in a hash table?","width":748},{"text":"If alpha is constant.","width":381},{"text":"If alpha is constant, what are these running times?","width":270},{"text":"They're constant.","width":98},{"text":"That's right.","width":66},{"text":"When somebody tells you hash tables have constant time access, it's because that load factor is held constant in this using this strategy.","width":1061},{"text":"Okay, so, this resizing strategy is used to hold alpha constant.","width":1138},{"text":"Which means find is constant.","width":270},{"text":"Insert is constant.","width":177},{"text":"And those are probabilistic results so they're average results.","width":757},{"text":"Yeah?","width":187},{"text":"Sure.","width":240},{"text":"No, it's what we're rehashing.","width":282},{"text":"Separate chaining is open hashing where you just hang your data out.","width":207},{"text":"We talked about it last time.","width":127},{"text":"Okay, it was the first collision resolution strategy.","width":206},{"text":"Alright, anything else about this?","width":221},{"text":"Let's do a lecture like this today.","width":128},{"text":"Let's do this.","width":73},{"text":"Yeah, Mike?","width":36},{"text":"You're not going to because your table is going to be fairly empty.","width":929},{"text":"Your table's just gonna be over half full or so.","width":965},{"text":"Yup.","width":11},{"text":"Yes.","width":44},{"text":"We're never...","width":43},{"text":"yes, it gets smaller.","width":96},{"text":"So we're gonna put an upper bound on alpha.","width":131},{"text":"Alpha's never gonna be worse than 2/3 which means those functions are never gonna be worse than whatever that is.","width":483},{"text":"Alright, what else?","width":91},{"text":"Yes?","width":13},{"text":"The absolute worst case is usually just ignored.","width":464},{"text":"Yup, and if I were implementing a hash table from scratch, I'd like put full tolerance into it like use two different hash functions and use the better of them say, for example.","width":725},{"text":"Yeah?","width":13},{"text":"So the question is if alpha is one less than the table size over capital n.","width":890},{"text":"Still, if I take big n over little...","width":268},{"text":"I mean if I take n-1 over n and I keep it there, that running time is gonna be constant but really bad.","width":495},{"text":"So, I'm still gonna keep alpha fixed relative to the table size.","width":607},{"text":"So, there is no n.","width":150},{"text":"There's no n in expressions for running time.","width":276},{"text":"Because alpha is gonna be constant even if it's n-1 over n.","width":299},{"text":"Even if it's really close to one.","width":195},{"text":"I'm going to control alpha.","width":184},{"text":"Alright, what else?","width":287},{"text":"Alright, I have a puzzle for you.","width":212},{"text":"Let's go to a puzzle.","width":62},{"text":"Puzzles are always safe.","width":103},{"text":"So there is the constraint.","width":232},{"text":"When we use AVL trees, there is a constraint on the keyspace that does not exist for hash tables.","width":583},{"text":"And I'm going to...","width":110},{"text":"uh, so there's a constraint on the keyspace for any binary search tree, in our case, BST, that does not affect hashing.","width":575},{"text":"And to evoke the idea, I'm going to do this.","width":229},{"text":"And ask you what did I do at every vertex here in an AVL tree?","width":525},{"text":"What do you do at every vertex, every opportunity of branching in an AVL tree?","width":481},{"text":"What do you do?","width":267},{"text":"You decide if it's bigger or smaller, you make a comparison.","width":356},{"text":"So, AVL trees require comparable keys.","width":421},{"text":"That constraint doesn't apply to hash tables.","width":405},{"text":"So, AVL trees...","width":110},{"text":"BST in general.","width":161},{"text":"AVL trees require comparable keys.","width":610}]