[{"text":"Ok, so Mike described what Mike described was that oh please let me write on my screen.","width":735},{"text":"no it won't let me.","width":82},{"text":"Ok.","width":46},{"text":"what mike described was that 36 would be swapped up in place of 35 and the order of the values would not change.","width":696},{"text":"so so we had this small local set of data.","width":253},{"text":"so if i wrote down all the data in the tree in order, it would have looked like this.","width":365},{"text":"23 35 36 54 74 etc.","width":611},{"text":"so if I had written down all the keys in the tree they would've looked something like this.","width":525},{"text":"now our goal was to remove 35.","width":153},{"text":"what we're saying is ok fine, go ahead and remove 35.","width":411},{"text":"we can do that if we either sort of let 23 or 36 take its place.","width":567},{"text":"ok.","width":45},{"text":"now we have special names for these things.","width":214},{"text":"the name we have for 23 is the in order predecessor.","width":492},{"text":"and the name we have for 36 is the in order successor.","width":315},{"text":"and these are in the slides from last time.","width":221},{"text":"now, you can't read this I'm sure because I can't.","width":280},{"text":"if you look at this applet and you go look at the menu you can choose whether or not you want to do a removal using the in order predecessor or in order successor.","width":823},{"text":"so this is recognized as a design decision that you're going to make.","width":286},{"text":"now I made the design decision to use in order predecessor because the textbook I used to use used in order predecessor.","width":675},{"text":"textbooks on data structures are about evenly split between IOP and IOS.","width":394},{"text":"but both of them are kind of wrong.","width":394},{"text":"because the consequence of always using one or the other if you're doing a lot of removals is that you get a tree that's kind of lopsided.","width":744},{"text":"if removals always happen from the left then the trees going to be heavier in general on the right.","width":508},{"text":"so you end up inducing an imbalance in the structure just by virtue of the mechanism you use for removal.","width":664},{"text":"real algorithms to do this would probably swap back and forth between in order predecessor and in order successor.","width":509},{"text":"yes, quickly.","width":313},{"text":"maybe.","width":40},{"text":"maybe.","width":42},{"text":"some definition of balance would come into play.","width":136},{"text":"it might be the height of the other subtrees and there are other metrics on trees you can use to assess the size of a subtree.","width":545},{"text":"k.","width":25},{"text":"balance almost always means that the sizes of subtrees are approximately the same.","width":444},{"text":"the question is how is size defined.","width":225},{"text":"is it height, is it number of nodes, is it some other metric on the size of the tree?","width":379},{"text":"that's for discussion and um.","width":295},{"text":"ok how is it?","width":224},{"text":"is it one finger if I do this?","width":217},{"text":"no.","width":32},{"text":"huh, yes.","width":114},{"text":"ok look.","width":52},{"text":"this is great.","width":81},{"text":"k.","width":177},{"text":"but I don't know why, ok fine.","width":192},{"text":"whoo, whoo, ok, fine, whatever.","width":461},{"text":"ok, any questions about all that?","width":132},{"text":"so I just wanted to remind that you that applet exists.","width":168},{"text":"i think i find it particularly useful.","width":123},{"text":"we'll use it again.","width":121},{"text":"ok, um, running times so we're talking about implementing dictionaries using binary search trees.","width":370},{"text":"so far any time we talk about implementations we're responsible for arguing about the efficiency of that design choice.","width":790},{"text":"that implementation choice.","width":137},{"text":"right now, this moment, the only thing we have right now to argue the running times of these algorithms are we we know they all use the height of the tree.","width":1060},{"text":"they all traverse the height of the tree.","width":209},{"text":"they all walk down in the worst case.","width":161},{"text":"in the worst case the height of the tree is going to determine the running time.","width":266},{"text":"any question about that?","width":163},{"text":"alright, and then traversal of course just by way of reminder is big o(n) the amount of data in the structure.","width":483},{"text":"so, let's see.","width":126},{"text":"i want to know, this is just a little bit of practice.","width":433},{"text":"i want to know what this tree looks like.","width":145},{"text":"so really quickly declare my t to be a binary search tree.","width":306},{"text":"and go ahead and on paper, as quickly as you can implement that sequence of inserts.","width":495},{"text":"ok.","width":91},{"text":"will you do yours on my tablet?","width":137},{"text":"it doesn't matter you can make as many mistakes as you want.","width":271},{"text":"ok.","width":142},{"text":"so everybody do this, just build the tree really quickly.","width":312},{"text":"insert into the binary tree several times.","width":1258}]