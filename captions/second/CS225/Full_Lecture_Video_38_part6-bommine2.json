[{"text":"Umm, So I think, so the question is, how well do we need to know this, yes?","width":387},{"text":"Is that right?","width":103},{"text":"Um, So absolutely you should know that a tree has (n-1) edges.","width":444},{"text":"okay?","width":11},{"text":"Connected acyclic graph has number of vertices minus one edges.","width":229},{"text":"Thats should be a back pocket result, okay?","width":200},{"text":"Now, should you be able to prove it?","width":183},{"text":"This is kind of an accessible proof, because, we can draw a picture that will guide you through it.","width":626},{"text":"So the process of doing this proof is, draw yourself a little picture, give yourself labels to argue about, and then, just put it all together.","width":795},{"text":"Okay?","width":52},{"text":"So, should you memorise it?","width":186},{"text":"Well no, you shouldn't.","width":195},{"text":"Should you know how to do it?","width":128},{"text":"I think so.","width":71},{"text":"I think you should.","width":52},{"text":"CS 374 demands much more robust proofs regularly, so, if this is an on-ramp to that kind of argument, then you know, so be it.","width":1084},{"text":"I think its appropriate.","width":119},{"text":"YEAH?","width":92},{"text":"Where, right here?","width":350},{"text":"Right here?","width":34},{"text":"Right here?","width":111},{"text":"huh?","width":70},{"text":"This one right here?","width":87},{"text":"Look, this one?","width":127},{"text":"Inductive hypothesis.","width":515},{"text":"Oh my gosh, I'm sorry.","width":126},{"text":"I'm doing this at me, not at you.","width":569},{"text":"Who knew you could be unclear in that particular way.","width":149},{"text":"I'm sorry.","width":48},{"text":"Alright, anything else?","width":126},{"text":"Yeah?","width":17},{"text":"Right here?","width":384},{"text":"Its the number of components.","width":154},{"text":"So, choose any vertex and let D denote its degree, remove its incident edges, partitioning the graph into D+1 components.","width":711},{"text":"So, I'm adding up from component 0 to component D, the last one, all of the edges.","width":520},{"text":"Okay?","width":56},{"text":"Is that alright?","width":118},{"text":"Alright.","width":50},{"text":"You good?","width":174},{"text":"It is what it is.","width":154},{"text":"Okay, lets move toward implementations.","width":163},{"text":"Alright, I wanna say a little thing about implementing graphs.","width":207},{"text":"You have been implementing graphs ever since about MP4 I believe.","width":504},{"text":"Yeah!","width":27},{"text":"The MP4 where you did flood fill you know.","width":394},{"text":"You were just operating on a lattice shaped graph that we think of as an image.","width":464},{"text":"Right?","width":27},{"text":"Its a pixel together with its neighbours.","width":264},{"text":"Each pixel is like a vertex.","width":138},{"text":"Each neighbour represents an edge.","width":193},{"text":"So, you've already operated on graphs.","width":352},{"text":"Now, that is extremely common, where the graph implementation itself is implicit in the application, okay?","width":751},{"text":"So, there may be lots of instances where doing graph algorithms, but you don't necessarily have an explicit graph data structure that you;re gonna point to.","width":870},{"text":"Instead you'll be talking about shapes, or who knows what else.","width":533},{"text":"States, game search engine, or something like that.","width":319},{"text":"So graphs are often are often not explicit in your algorithms, All of that said, there are some classic results that arise from classic implementations of graphs and we have to talk about those because everybody in your future world will expect you to know about these particular graph implementations.","width":1792},{"text":"So we're gonna talk about them.","width":123},{"text":"Alright, so we're going to have an abstract data type that is a graph.","width":408},{"text":"The data associated with it will be some structure that reflects the vertices.","width":379},{"text":"Oftentimes this will be just a map or a hash table of vertices.","width":269},{"text":"Maybe its just a vector, where each vertex identifier is an index.","width":296},{"text":"Who knows, open to application, Doesn't matter that much.","width":282},{"text":"Same thing with edges, you have to have some structure that stores all the edges in your graph.","width":644},{"text":"Now what is that, I don't know.","width":209},{"text":"Maybe its a hash table again.","width":155},{"text":"Alright.","width":57},{"text":"But then, you also need some structure that reflects the connectivity of the graph.","width":502},{"text":"This is where we're gonna spend a lot of our energy.","width":217},{"text":"So this is like a look up table for data about vertices.","width":363},{"text":"This is like a lookup table for data about edges.","width":246},{"text":"And this is some structure that keeps track of how all the graph is connected.","width":412}]