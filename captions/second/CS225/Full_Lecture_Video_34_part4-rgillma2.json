[{"text":"Due date so do you next, do next, the thing that is do next gets your attention.","width":544},{"text":"It's some strange weighted average, right?","width":122},{"text":"Of do next, worth most, you know.","width":256},{"text":"It's like most the one that makes you happiest, right?","width":291},{"text":"Well that'll be us, you know?","width":308},{"text":"Alright, so, this function that determines the keys in the ordering in the priority queue can be lots of different things.","width":543},{"text":"Also, when we talk about graph algorithms, we'll be using a priority queue to order the order to plan the order in which we visit edges of a graph.","width":1141},{"text":"So this is graph search.","width":197},{"text":"Graph algorithms in general tend to have a lot of priority queues and that's foreshadowing.","width":318},{"text":"That's where are we going with this?","width":153},{"text":"Why did we talk about it at all?","width":184},{"text":"Alright, so any questions about that?","width":133},{"text":"I love this.","width":44},{"text":"I love that it's a rich conversation that has many different levels and yet somehow inherently safe because it's just computer science and not, like, philosophy.","width":773},{"text":"Alright, okay, so is that thing a heap?","width":578},{"text":"Is it?","width":70},{"text":"If I'm keying on the characters, the alphabetic order of the characters.","width":317},{"text":"No, and what's your evidence?","width":360},{"text":"The U is greater than L and D, right?","width":319},{"text":"Okay, alright, so I believe it.","width":188},{"text":"That that one is not a heap.","width":139},{"text":"Now what I wanna know is what would be an algorithm for making that into a heap?","width":542},{"text":"What could you do?","width":75},{"text":"I'm giving you the data, you can assume basically that your data is laid out in an array.","width":333},{"text":"Here is an array with all your data, make it into a heap.","width":237},{"text":"What are you gonna do?","width":125},{"text":"Yeah?","width":119},{"text":"Oh, why not sort it, right?","width":117},{"text":"You can use mergeSort perfectly fine, perfectly reasonable idea.","width":396},{"text":"But we can do better.","width":115},{"text":"What does it mean to do better?","width":198},{"text":"What's the running time for merge sort?","width":244},{"text":"Big O of?","width":163},{"text":"Whoa, okay, you guys gotta write this down and put it on your mirror, okay?","width":374},{"text":"Even if you don't know the proof of this, it should just roll right off.","width":278},{"text":"You can be talking about stuff you don't know but this one should roll off, okay?","width":285},{"text":"The running time of merge, watch me get it wrong here, the running of mergeSort, worst case, is nLogn.","width":458},{"text":"Okay?","width":59},{"text":"So you're guaranteed nLogn for mergeSort.","width":192},{"text":"It's a great sort because it's very hard to do in lace, especially if you're doing it in an array.","width":483},{"text":"You actually did it in place for MP3 I think, but your memory was all over the place.","width":316},{"text":"Alright, let's see.","width":108},{"text":"So, we can sort it, that would work.","width":331},{"text":"What else could we do?","width":130},{"text":"Yeah?","width":6},{"text":"Oh, use heapify!","width":281},{"text":"How would you use heapify?","width":190},{"text":"What would you do?","width":209},{"text":"What is, how would you use heapify here?","width":404},{"text":"How would you use heapify?","width":52},{"text":"Oh heapifyDown at the root?","width":274},{"text":"It turns out that doesn't work.","width":149},{"text":"Yeah?","width":85},{"text":"Very good, very good.","width":307},{"text":"So the other thing you can do is pretend like this is just data that happens to be sitting in memory and do repeated insertion into the structure.","width":827},{"text":"So first we've got an empty heap, and we're gonna add B to it.","width":419},{"text":"Okay?","width":42},{"text":"Well, there we did heapifyUp from here, fine, done.","width":289},{"text":"Then we're gonna add U to it and now we can look at this part and say okay that's a good heap.","width":409},{"text":"Then we can add I to it and that's a heap.","width":257},{"text":"And then we add L to it and what happens?","width":296},{"text":"No, it's fine, this is fine.","width":118},{"text":"You have to swap, right?","width":158},{"text":"But you're inserting so you get heapifyUp for free so L and U should swap, okay.","width":640},{"text":"And now that's a heap.","width":199},{"text":"Now everything up to here is heap.","width":120},{"text":"Okay, so do you see how this would play out in the end?","width":178},{"text":"One at a time, you're just gonna add each one of these.","width":281},{"text":"It's like however many vertices there are here inserts into the structure.","width":414},{"text":"Okay, do you like that?","width":243}]