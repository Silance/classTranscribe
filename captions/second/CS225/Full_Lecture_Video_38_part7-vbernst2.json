[{"text":"Okay, now...","width":177},{"text":"Functions on such an abstract data type are many, There are many many.","width":351},{"text":"Uh, at a minimum we have to be able to insert vertices and edges, remove vertices and edges.","width":464},{"text":"It's very common to need the set of incident edges given a vertex.","width":556},{"text":"So this function would return to you, would return a set of incident edges, or an iterator over them, for example.","width":1093},{"text":"OK?","width":17},{"text":"But the way you should think about this function is as returning a set of incident edges.","width":504},{"text":"OK?","width":78},{"text":"Our adjacent is a boolean that tells whether not v1 v2 is an edge in the class, see just test, and then finally these two we'll talk about them more...","width":1292},{"text":"They are only for directed graphs.","width":243},{"text":"For now we're going to assume our graphs are not directed, they are undirected.","width":446},{"text":"Alright, any questions so far?","width":181},{"text":"Here's how we're going to do this.","width":198},{"text":"We're going to look at three different implementations and we're going to compare a few functions across all of them.","width":621},{"text":"Now, we're not going to look at all of the functions on the previous page, because we would fall asleep.","width":481},{"text":"These functions are adequate for getting at all of the issues.","width":310},{"text":"OK?","width":54},{"text":"Alright, implementation one.","width":115},{"text":"It's called an edge list, and basically it works like this.","width":328},{"text":"It is a structure for this, a structure for this, a structure for this, and we're not going to specify any particular reflection of the connectivity.","width":732},{"text":"OK?","width":24},{"text":"So we're just going to have maybe it's a hash table, constant time access to the vertices.","width":478},{"text":"Constant time access to the edges, and that's our structure.","width":356},{"text":"That's it.","width":70},{"text":"OK?","width":50},{"text":"Now, what does it look like?","width":107},{"text":"What does it, what does the implementation look like?","width":211},{"text":"The data associated with each of these things.","width":225},{"text":"Well the vertices it's just a list of vertices.","width":155},{"text":"Maybe you associate a weight with them, or a time they were created, or any other data that you want.","width":469},{"text":"But for now they are just a set, it's just a set of vertices, or a map of vertices.","width":349},{"text":"The edges though are more interesting.","width":215},{"text":"Edge A, for example, will contain data that reflects it's endpoints.","width":366},{"text":"We've got u and v here.","width":159},{"text":"B has v and w.","width":268},{"text":"C has u and w.","width":154},{"text":"And D has w and z.","width":318},{"text":"We're going to engineer everything so that u v is the same as v u.","width":532},{"text":"So it doesn't matter which order I put those in.","width":283},{"text":"Alright, any question about that?","width":134},{"text":"Yes?","width":317},{"text":"[gibberish] So that's a more complex, that is, that actually does...","width":384},{"text":"So what you're suggesting, so the suggestion on the floor is how can this be a good idea?","width":451},{"text":"Wouldn't it be a better idea to list for each vertex it's set of incident edges, and yes, that would be a better implementation.","width":649},{"text":"But we're not going to do it yet, we're going to be stupid first, because that's what we do around here.","width":284},{"text":"OK?","width":35},{"text":"We do things naively first, and then we'll move into complexity.","width":346},{"text":"OK, so I want to know how long does it take to insert a new vertex into this structure?","width":433},{"text":"There, I did it.","width":54},{"text":"How long does it take to add a new vertex into this structure?","width":282},{"text":"Constant time, very good.","width":219},{"text":"OK, this is adding into either the array or map.","width":290},{"text":"You have to be able to assume it's constant time.","width":219},{"text":"Fine.","width":29},{"text":"How about removing a vertex?","width":362},{"text":"Oh, and I'll use this notation.","width":163},{"text":"The size of the vertex set is n, the size of the edge set is m.","width":334},{"text":"So there are n of these and m of those.","width":252},{"text":"Ok, what does it mean to remove a vertex?","width":155},{"text":"Here, there I removed v and I have to remove all of it's incident edges.","width":478},{"text":"So removing a vertex really means remove the vertex and incident edges.","width":491},{"text":"So how long does that take?","width":492},{"text":"Big O of m is correct.","width":252},{"text":"Because we have to search this structure, right?","width":266},{"text":"Oh, there's a v, there's a v, and no more v's.","width":257},{"text":"We have to search that structure.","width":395}]