[{"text":"OK, so how long does it take to insert an unsorted list?","width":489},{"text":"Unsorted list, I just want to be putting values in.","width":214},{"text":"How much time should that take?","width":184},{"text":"Oh, constant time!","width":86},{"text":"look at that!","width":45},{"text":"There is a mistake already.","width":114},{"text":"This should be constant time.","width":141},{"text":"Good.","width":11},{"text":"How about removeMin?","width":138},{"text":"Is order n correct?","width":246},{"text":"I want to find in an unsorted array the minimum value.","width":266},{"text":"Yeah?","width":64},{"text":"That's fine, right?","width":119},{"text":"So, order n is correct.","width":96},{"text":"I would have to go on a hunt through the linear collection of data, looking for the minimum.","width":421},{"text":"Ok, fine, how about for a linked list?","width":329},{"text":"If we implemented this functionality in insert and removeMin, using a singling linked list.","width":506},{"text":"How much time would it to take to insert?","width":285},{"text":"Constant, but we want to put the new one back here, right?","width":366},{"text":"No, no reason to do so.","width":108},{"text":"It is unsorted, so when you insert, you would insert at the front.","width":303},{"text":"You can do this at constant time.","width":146},{"text":"Or, you have a tail pointer you can do it at the rear.","width":192},{"text":"Ok, fine.","width":49},{"text":"How about removeMin?","width":234},{"text":"Still big O of n?","width":86},{"text":"We would have to go search for it.","width":137},{"text":"OK, fine, let's suppose, we decided that we can fix this, we will fix this by using a sorted array.","width":832},{"text":"In that case, how long does it take to do an insertion?","width":280},{"text":"A sorted array.","width":195},{"text":"2,3,4,8,13,21, and I want to insert 11.","width":500},{"text":"How much time does it take?","width":218},{"text":"Log(n) right?","width":129},{"text":"How come it is logn?","width":338},{"text":"why are we thinking logn?","width":239},{"text":"Binary search, very good.","width":98},{"text":"You observe the opportunity of binary search.","width":180},{"text":"So, we use binary search to determine the 11 goes here, but we have to shift the data.","width":584},{"text":"This is not true.","width":121},{"text":"Oh gosh!","width":17},{"text":"I swore when I came to school, today would be a better lecture than Monday's.","width":923},{"text":"That's a low bar.","width":114},{"text":"How about a linked list?","width":266},{"text":"a sorted linked list.","width":103},{"text":"Can you do binary search?","width":358},{"text":"No, you cannot do binary search in this case.","width":254},{"text":"It is big O of n to find.","width":181},{"text":"Ok, this is the moment where oh boy, this is for find and this is for shift.","width":439},{"text":"Ugh, how about removeMin?","width":238},{"text":"How about removeMin?","width":350},{"text":"Are these correct?","width":64},{"text":"They constant in both cases?","width":88},{"text":"Is this correct?","width":569},{"text":"Could this have been correct if I put those differently?","width":265},{"text":"So, ok, I should have done 21, 13,8,5,3, and then it would be constant time.","width":597},{"text":"Because we always remove frome the end of the chunk of the data.","width":328},{"text":"Ok, how about for a singly linked list?","width":252},{"text":"Does it take constant time to remove the minimum?","width":209},{"text":"Yes, if you keep the minimum where?","width":245},{"text":"At the head of the list, right?","width":91},{"text":"What if you kept the minimum at the tail pointer?","width":349},{"text":"So, I am going to keep the minimum here, and I have a tail pointer.","width":334},{"text":"What do you think?","width":107},{"text":"Removing that guy.","width":176},{"text":"No, because I can get to it in constant time, but resetting this tail pointer while the traversal of the structure.","width":614},{"text":"OK, everybody good?","width":149},{"text":"Ok, so, take a look at this messy table, and it looks like there is trade-off going on, right?","width":578},{"text":"So, we got constant time, for on of the functions, and linear time for the other function.","width":509},{"text":"What would be better than this?","width":229},{"text":"What would be better?","width":209},{"text":"Log(n)?","width":64},{"text":"Log(n) would better especially if we were able to replace the linear time functions with Log(n).","width":435},{"text":"Well, I am not going to tell you how good it gets, instead, I am going to switch gears, so that's a reasonable goal.","width":663},{"text":"The question is, whether we can do log(n) here and constant time here.","width":375},{"text":"Just how good can we do using a different structure.","width":370},{"text":"Ok?","width":32},{"text":"Now.","width":39},{"text":"I want to leave this one hanging, OK?","width":174},{"text":"Because I want to show you something completely new.","width":297},{"text":"This will be more fun for you.","width":130},{"text":"If you focus here instead of your paper.","width":215},{"text":"Ok, don't look, I know you want to look, right?","width":266},{"text":"but don't.","width":56},{"text":"Ok?","width":74},{"text":"Alright.","width":64},{"text":"So, here is a new structure, what I want you to do, is tell me, everything you can about it.","width":607},{"text":"Tell me everything you can about it.","width":181},{"text":"Everything you might be think interesting, everything you think characterize it.","width":526}]