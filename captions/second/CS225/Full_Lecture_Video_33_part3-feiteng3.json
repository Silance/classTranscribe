[{"text":"Ok.","width":142},{"text":"How long does it take to insert into an unsorted list.","width":345},{"text":"Unsorted list.","width":72},{"text":"I just want to put values in.","width":140},{"text":"How much time should that take?","width":184},{"text":"Oh constant time.","width":86},{"text":"Look at that.","width":45},{"text":"There's a mistake already.","width":154},{"text":"Constant time.","width":86},{"text":"Good.","width":25},{"text":"How about removeMin?","width":138},{"text":"Is o(n) correct?","width":246},{"text":"I want to find in a unsorted array the minimum value.","width":265},{"text":"Thats fine right?","width":196},{"text":"Ok.","width":27},{"text":"o(n) is correct.","width":59},{"text":"I would have to go on a hunt through the linear, a collection of data looking for the minimum.","width":420},{"text":"Ok.","width":56},{"text":"Fine.","width":36},{"text":"How about for a linked list.","width":233},{"text":"If we implemented this functionality insert and removeMin using a singly linked list.","width":506},{"text":"How much time would it take to insert?","width":285},{"text":"Constant.","width":87},{"text":"I would put the new one back here right?","width":277},{"text":"No.","width":27},{"text":"No reason to do so.","width":78},{"text":"It's all unsorted.","width":91},{"text":"So when you insert, you would insert at the front.","width":211},{"text":"You want to do that in constant time.","width":146},{"text":"Or if you have a tail pointer you can do it at the rear.","width":192},{"text":"Ok, fine.","width":49},{"text":"How about removeMin?","width":234},{"text":"Still o(n).","width":82},{"text":"We would have to go searching for it.","width":140},{"text":"Ok fine.","width":70},{"text":"Let's suppose we decide we can fix this.","width":277},{"text":"We will fix it by using a sorted array.","width":481},{"text":"In that case, how long does it take to do a insertion into a sorted array?","width":477},{"text":"Two, three, five, eight, thirteen, twenty one.","width":357},{"text":"And I want to insert eleven.","width":141},{"text":"How much time does that take?","width":218},{"text":"Logn right?","width":130},{"text":"How come its logn?","width":424},{"text":"Why are we thinking logn?","width":153},{"text":"Binary search.","width":47},{"text":"Very good.","width":42},{"text":"So you observe the opportunity for binary search.","width":187},{"text":"So we use binary search to determine that eleven goes here, but we have to sit the data.","width":585},{"text":"So this isn't true.","width":120},{"text":"Oh gosh.","width":17},{"text":"I swore when I came to school today.","width":637},{"text":"Today would be a better lecture.","width":107},{"text":"Of course then Mondays.","width":176},{"text":"That's a low bar.","width":164},{"text":"Alright.","width":47},{"text":"How about for a linked list, a sorted linked list?","width":271},{"text":"Can you do binary search?","width":394},{"text":"No.","width":94},{"text":"Can't do binary search in this case.","width":123},{"text":"It's o(n) to find.","width":179},{"text":"Ok so this is the moment where.","width":270},{"text":"This is for find.","width":85},{"text":"This is for shift.","width":120},{"text":"How about removeMin?","width":335},{"text":"Are those correct?","width":67},{"text":"They are constant in both cases.","width":302},{"text":"Is this correct?","width":660},{"text":"Could it be correct if I have put those differently?","width":171},{"text":"Ok.","width":27},{"text":"So I should have done twenty one, thirteen and eight, five, three.","width":454},{"text":"And then it would be constant time.","width":116},{"text":"Cause we always remove from the end of the trunk of data.","width":358},{"text":"Ok.","width":4},{"text":"How about for a singly linked list?","width":224},{"text":"Is it constant time to remove the minimum?","width":200},{"text":"Yes.","width":25},{"text":"If you keep the minimum where?","width":218},{"text":"At the head of the list.","width":65},{"text":"Right?","width":24},{"text":"What if you keep the minimum at the tail and you had a tail pointer.","width":349},{"text":"So I'm gonna keep the minimum here and have a tail pointer.","width":334},{"text":"What do you think?","width":107},{"text":"Removing that guy.","width":176},{"text":"No.","width":32},{"text":"Because I can get to it in constant time but resetting this tail pointer requires traversal of this structure.","width":580},{"text":"Ok.","width":26},{"text":"Everybody good?","width":121},{"text":"Ok.","width":52},{"text":"So take a look at this nasty table.","width":255},{"text":"And it looks like there's some trade off going on.","width":221},{"text":"Right?","width":15},{"text":"We got constant time for one of those function and liner time for the other function.","width":538},{"text":"What would be better than this?","width":228},{"text":"What would be better?","width":210},{"text":"Logn would be better especially if we are able to replace the linear time function with logn.","width":501},{"text":"Well.","width":22},{"text":"I'm not gonna tell you how good it gets.","width":371},{"text":"Instead I'm gonna switch gears so that's a reasonable goal.","width":262},{"text":"And the question is whether not we can do logn here in constant time.","width":362},{"text":"Just how good can we do.","width":145},{"text":"Using a different structure.","width":241},{"text":"Ok.","width":32},{"text":"Now.","width":39},{"text":"I want to leave this one hanging.","width":155},{"text":"Because I want to show you something completely new.","width":317},{"text":"This would be more fun to you.","width":130},{"text":"If you focus here instead of on your paper.","width":215},{"text":"Ok.","width":13},{"text":"Don't look.","width":90},{"text":"I know you wanna look.","width":123},{"text":"Right.","width":34},{"text":"But don't.","width":132},{"text":"Alright.","width":64},{"text":"So here's the new structure.","width":257},{"text":"What I want you to do is tell me everything you can about it.","width":348},{"text":"Tell me everything you can about it.","width":181},{"text":"Everything you think might be interesting.","width":133},{"text":"Everything you think characterizes it.","width":391}]