[{"text":"yes.","width":67},{"text":"exactly, exactly.","width":88},{"text":"yeah, remember that this is a one based array, right, like that, starting the root at one gained us the efficiency of being able to use two cIndex, two times the index as our last child.","width":738},{"text":"that's in last lecture.","width":108},{"text":"ok.","width":22},{"text":"alright any other questions about...","width":216},{"text":"OH!","width":3},{"text":"I know.","width":36},{"text":"So.","width":11},{"text":"this min child.","width":103},{"text":"actually when i wrote this code.","width":91},{"text":"i think i remember spending the very most time debugging this part of the code.","width":511},{"text":"and the reason for that is because...","width":171},{"text":"notice that i don't deal with the case, at all, that it has only one child.","width":363},{"text":"right, i don't deal with that.","width":118},{"text":"that one strange incident.","width":146},{"text":"one strange case in a complete tree where there actually aren't even two children.","width":412},{"text":"i don't deal with that here, at all.","width":174},{"text":"i only deal with it in this function.","width":186},{"text":"so this function, minChild, actually hides this test to see if there are even are two children, and in either case, if there are only one child it returns it, if there are two it returns the minimum of the two.","width":841},{"text":"ok.","width":46},{"text":"alright and because of that little ugliness, i shoved it into the helper function.","width":342},{"text":"alright, any other questions about this code?","width":186},{"text":"what questions do you think i'm going to ask you?","width":303},{"text":"i've just shown you some code, what do you think, i'm going to ask you?","width":293},{"text":"exactly every good.","width":89},{"text":"what the running time of this, we've got the running time, we completely understand how it works.","width":278},{"text":"whats the running time of this thing?","width":132},{"text":"of removing something from a heap?","width":272},{"text":"logn, log n, and please justify that.","width":329},{"text":"the running time is big o of logn, O(Logn), because, that is the height of a complete tree.","width":1212},{"text":"it happens to also be a lower bond.","width":718},{"text":"ok, any questions about that?","width":188},{"text":"ok.","width":20},{"text":"so, i love this discussion because, um, oops, wow.","width":595},{"text":"I love this discussion because our original goal here was to implement priority queue.","width":769},{"text":"our goal was to implement priority queues with the assumption that that abstract data type would some how be useful to us.","width":608},{"text":"ok.","width":45},{"text":"and we proposed a whole bunch of implementation.","width":188},{"text":"and this last one, that we'll actually compare more carefully to the other ones, a little bit later.","width":377},{"text":"this last one is a structure that is beautiful in it's own right called a heap.","width":541},{"text":"but a heap really has, you know we a discussion about implementing this implementation, right.","width":608},{"text":"and in the end the, uh, the heap was...","width":223},{"text":"the discussion about the heap was \"well should we implement is using pointer or as an array.\" and we decided it should be clever use of an array.","width":635},{"text":"and this notion that an abstract data type can actually lead to this sort of unfolding discussion of implementation in incre...","width":674},{"text":"decreasing abstraction more specificity is fascination to me.","width":326},{"text":"more over, there are tons of structures and algorithms for which priority queues are an extremely important, um, element.","width":679},{"text":"so for example the event queue in every single video game that ever exists.","width":352},{"text":"so this an event queue.","width":135},{"text":"uses a priority queue.","width":93},{"text":"it which one need to come next.","width":134},{"text":"it's the.","width":70},{"text":"it is prioritized by time.","width":181},{"text":"even if all the events were created at the same time it can be thrown into a priority queue so that the next one with respect to time could be handled.","width":597},{"text":"um.","width":17},{"text":"another application.","width":129},{"text":"i'll bet you won't be surprise that original systems that allocated memory, dynamic memory, used a priority queue, right.","width":777},{"text":"implemented as a heap, yes.","width":94},{"text":"i don't know if they put the priority queue level.","width":105},{"text":"but that, i bet they did.","width":65},{"text":"so memory allocation...","width":165},{"text":"where in this instance.","width":294},{"text":"the size of the block of memory to be used typically was, in very early implementation, when they were just doing things, um, sort of in an add...","width":831},{"text":"without a lot of resources.","width":202},{"text":"when they were just developing these algorithms.","width":199},{"text":"that memory allocation was based on how much memory a block of memory had.","width":460},{"text":"that size of the block.","width":98},{"text":"oh my gosh, english, speak english.","width":177},{"text":"ok, so the priority was the size the block there of memory.","width":292},{"text":"ok, another one is, oh your to do list.","width":222},{"text":"right.","width":41},{"text":"what key do you use for your todo list?","width":419}]