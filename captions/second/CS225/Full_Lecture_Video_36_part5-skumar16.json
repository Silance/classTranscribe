[{"text":"Yea, good.","width":243},{"text":"Okay.","width":123},{"text":"Suppose that my tree, what is its height?","width":357},{"text":"it's height is 0, and so, in order to indicate that its a root, im gonna say negative 0.","width":498},{"text":"How does that work?","width":136},{"text":"Ehhhh.","width":22},{"text":"Do you have an idea for solving the problem Nathan?","width":412},{"text":"Just a minute.","width":39},{"text":"What?","width":176},{"text":"Very good.","width":43},{"text":"So, I'm just going to bump it up.","width":148},{"text":"I'm gonna not say 0, I'm going to say 1.","width":243},{"text":"So it's going to be I'm gonna store the negative of the tree height plus 1.","width":544},{"text":"So I am going to store negative 4.","width":120},{"text":"Whoever said that was correct.","width":276},{"text":"OKay.","width":13},{"text":"Any question about it.","width":149},{"text":"Just a little hack.","width":69},{"text":"It happens to be quite convenient.","width":217},{"text":"Alright.","width":54},{"text":"Uhhhhh, lets talk about the other alternative.","width":178},{"text":"the green preference.","width":142},{"text":"Now here's the thing.","width":66},{"text":"this time, we're going to take this giant tree and say whoa.","width":480},{"text":"Thats a big tree.","width":133},{"text":"I don't want to increase the height of that many nodes.","width":377},{"text":"So I shouldnt make it point to something new.","width":238},{"text":"Its a big tree.","width":142},{"text":"I don't want to change the height of lots of things I might be look for later.","width":425},{"text":"And so what we're going to do instead is take the smaller tree in terms of number of nodes.","width":527},{"text":"And go ahead and increase the distances to the roots for each of those.","width":416},{"text":"So, this increases the distance to the root for the fewest nodes and idea is that you point the smaller tree to the larger.","width":1247},{"text":"Where smaller and larger are in terms of the number of nodes.","width":859},{"text":"Okay.","width":20},{"text":"so I can do part of this myself.","width":137},{"text":"Four could point to seven.","width":108},{"text":"What should seven's value be?","width":137},{"text":"I can even do this part.","width":96},{"text":"Seven is going to be a root, so it's value is going to be negative.","width":290},{"text":"But what else should we store there.","width":304},{"text":"Yea, the new size of the structure, the new number of nodes in the structure.","width":347},{"text":"Okay fine, so I think thats 12, unless it's somehow changed since the last time i taught this class.","width":696},{"text":"Okay, any question about it?","width":221},{"text":"Is it good?","width":84},{"text":"Alright, so what happened?","width":101},{"text":"Where did that 12 come from?","width":156},{"text":"we used to have two trees.","width":209},{"text":"This one would've been negative four.","width":219},{"text":"This one wouldve been negative 8.","width":172},{"text":"And so, to get this new value, all we did was add them.","width":474},{"text":"Any question about it?","width":183},{"text":"Alright, both of these schemes for union guarantee that the height of the tree, and thus the running time for find, is...","width":625},{"text":"What would be super good news?","width":256},{"text":"Constant time would be great news, but we can't get there.","width":877},{"text":"Both of these schemes for union guarantee that the height of the tree is O(logn).","width":550},{"text":"There is a third metric that you can use for deciding who should point to whom.","width":555},{"text":"A third mechanism for smart union called union by rank, and we don't talk about it here.","width":375},{"text":"The height of the largest embedded perfect tree, or something like that.","width":453},{"text":"So union by rank is also sometimes used.","width":661}]