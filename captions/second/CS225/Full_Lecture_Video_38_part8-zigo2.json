[{"text":"Checking to see if two vertices are adjacent, or whether an edge exists in the graph.","width":923},{"text":"Go looking, no choice but to traverse that edge list looking for two end points.","width":612},{"text":"Returning the set of incident edges for a given vertex.","width":450},{"text":"Again, this is boring.","width":322},{"text":"You have to go in search of them.","width":548},{"text":"Decidedly uninteresting.","width":234},{"text":"Another strategy; keep the vertex set at size n and edge set at size m, but add a table with a row for every vertex and a column for every vertex.","width":1861},{"text":"This is a probably implemented as a 2 dimensional (2D) array.","width":561},{"text":"The data stored here would tell you the index of this row, for example.","width":482},{"text":"The implementation, you would connect this to this row in the table.","width":601},{"text":"Similarly for the column, you'd also have some index here that's specified by the column, it'll be the same column as row.","width":971},{"text":"There is going to be an entry in cell uv if uv exists in the graph.","width":954},{"text":"Now it turns out to be very convenient to instead of just a boolean indicator, to keep a pointer to the edge that actually exists.","width":1514},{"text":"Then you can store data about that edge, so uw is it there?","width":1207},{"text":"Other things are just NULL.","width":665},{"text":"It's called an adjacency matrix.","width":759},{"text":"Running times of each of these functions given all of this structure.","width":418},{"text":"How long does it take to insert a vertex?","width":494},{"text":"What if the matrix is full?","width":1025},{"text":"This is a 2 dimensional array.","width":365},{"text":"We need to be able to add a row and column to this matrix, and you know we're not stoopid.","width":534},{"text":"We're going to do it in such a way that we actually double the size (and copy the data).","width":617},{"text":"And the advertised cost for this (the cost of copying) is n squared (n^2).","width":707},{"text":"But we get n future adds for free, so the overall cost is going to be big O of n (O(n)) for re sizing.","width":935},{"text":"So periodically you have to do an expensive re size.","width":372},{"text":"How about removing a vertex?","width":776},{"text":"It's the same story.","width":331},{"text":"Actually.","width":141},{"text":"Let's remove v.","width":273},{"text":"How do I remove v from here?","width":1022}]