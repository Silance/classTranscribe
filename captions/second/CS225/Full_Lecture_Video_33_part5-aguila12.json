[{"text":"So this characteristic is true, recursively.","width":213},{"text":"OK but, but..","width":117},{"text":"were actually not going to end up relying very much on this particular depth definition.","width":399},{"text":"The focus of the algorithms that we write on this structure are going to rely on this and on this.","width":557},{"text":"OK.","width":48},{"text":"Any questions about that so far?","width":131},{"text":"Here's a quick question are complete trees full?","width":303},{"text":"Is every complete tree a full tree?","width":164},{"text":"No, good.","width":40},{"text":"Is every complete tree a perfect tree?","width":200},{"text":"No.","width":30},{"text":"Is every perfect tree a complete tree?","width":160},{"text":"Yes.","width":30},{"text":"OK good you see where that conversation is going right?","width":258},{"text":"OK so let's talk about implementation of this thing and what I want to know.","width":326},{"text":"What i'm going to ask you to do is imagine how you would implement this thing and then, huh, tell me what the primary private member would look like in your implementation.","width":949},{"text":"OK so think about what your, how you would implement it and then tell me what the primary member or the the primary private member of that implementation is.","width":628},{"text":"Anybody want to offer something?","width":163},{"text":"Tell me what you think.","width":226},{"text":"What do you think?","width":110},{"text":"It's a treee!","width":135},{"text":"So what is, how are you going to characterize this tree in code.","width":594},{"text":"You're not going to, you don't want right?","width":115},{"text":"I don't wanna.","width":280},{"text":"Have you done things like this in the past?","width":248},{"text":"You're not talking to me?","width":87},{"text":"It's OK to be wrong.","width":118},{"text":"In fact lets day something that is wrong.","width":181},{"text":"I'm going to implement this tree using an integer.","width":283},{"text":"OK that's wrong.","width":276},{"text":"OK now that's out of there.","width":104},{"text":"So now somebody venture were we're past that, so somebody venture something.","width":297},{"text":"You're implementing a structure like this that has two functions what is your primary private member going to be?","width":359},{"text":"How are you going to hold the data?","width":253},{"text":"A tree node?","width":47},{"text":"Is that what you said?","width":48},{"text":"Thank you so much.","width":84},{"text":"Now I owe you a cookie.","width":87},{"text":"Did you say that?","width":64},{"text":"He said it?","width":47},{"text":"OK now he owes you a cookie.","width":146},{"text":"OK.","width":29},{"text":"Alright very good.","width":169},{"text":"Well..","width":22},{"text":"so a tree node pointer called say root, perfectly reasonable implementation, perfectly reasonable implementation, except that we don't have to do it that way instead.","width":926},{"text":"ooohhhh.","width":66},{"text":"What's the implication?","width":495},{"text":"We can use an array.","width":94},{"text":"We can use an array.","width":214},{"text":"Now the thing that gets us this, is that the tree is complete.","width":280},{"text":"OK.","width":15},{"text":"We know everything there is to know about the structure of the tree.","width":433},{"text":"That is not so true in AVL trees and BSTs in general OK.","width":343},{"text":"But in this case we know everything there is to know about the structure of the thing.","width":437},{"text":"So we're going to exploit that and say \"Hey I know where the children and parents are\".","width":291},{"text":"We're just going to lay it flat out in memory.","width":177},{"text":"Now in MP6 that is true as well.","width":342},{"text":"We are going to use a vector an array to implement the tree but it is slightly different.","width":497},{"text":"Where is the root in this implementation.","width":296},{"text":"Where is the root?","width":105},{"text":"Right.","width":90},{"text":"Early on in the array, the front of the array.","width":131},{"text":"Right.","width":71},{"text":"In MP6 the root is kind of in the middle and all the nodes in the left are less and all the nodes to the right are greater in some sense.","width":620},{"text":"OK.","width":18},{"text":"So it's a little bit different of an interpretation of using a flat, a flattening the tree.","width":428},{"text":"But it sort of takes advantage of the structure speed of an array in a, for similar reasons.","width":382},{"text":"OK now.","width":181},{"text":"Huh in a pointer based implementation of a tree.","width":308},{"text":"It's important to have the following pieces of information.","width":261},{"text":"You need instant access to a left child "width":570}]