[{"text":"The analysis or the argument about how good the algorithm is should be in terms of N, so we can make these arguments if we understand if we keep completely understand the functional relationship between H and N.","width":1439},{"text":"Now here what we are going to do.","width":168},{"text":"H in this context represents the running times of our algorithms, so H is a running time, it is a stand in proxy for the running time, we recognize that it is you know, is some constant factor of H.","width":1111},{"text":"We don't know what the coefficient in front of H is.","width":180},{"text":"But what we are going to do is we are going to argue that H is at least this much.","width":524},{"text":"As a function of N um, uhh, for running time, the running time is at least this much as a function of N.","width":544},{"text":"Now what does that mean we are doing, we are in official terms putting a lower bound on the running time of an algorithm and we are saying that if someone comes to you and says they have a better algorithm.","width":1269},{"text":"That is, they say they have an algorithm that is less than whatever we come up with for f(n) you go NO!","width":624},{"text":"Thats not possible, you're algorithm must not work.","width":248},{"text":"Because no such algorithm exists, thats what a lower bound gets us.","width":437},{"text":"Lets see.","width":68},{"text":"No algorithm can do better.","width":131},{"text":"Can have better worst case performance, alright but at the same time, at the same time, we need to argue about the relationship of the running time on the top end.","width":1309},{"text":"That is we want an upper bound on the running time, because that, in fact we say a tight upper bound.","width":898},{"text":"Because thats actually the currency we use to argue, which algorithm is better, ohhh I've got a structure that implements a dictionary in constant time, that means an upper bound, in the worst case it is constant time.","width":1084},{"text":"I have an algorithm that ok, yea.","width":182},{"text":"We'll talk more about that in a minute.","width":149},{"text":"K any questions about that.","width":213},{"text":"Alright so um, as a reminder because we are going to be arguing about height, and because our argument is going to be recursive and need this.","width":546},{"text":"Um I want you to remind me what the height of an empty tree is.","width":253},{"text":"Do you remember?","width":100},{"text":"What we have defined the height of an empty tree to be.","width":444},{"text":"Zero.","width":90},{"text":"Negative 1.","width":68},{"text":"thats right.","width":223},{"text":"If that bothers you, if that bothers you remember that the english definition of height is the length of the longest path from a root to a leaf.","width":660},{"text":"The english definition longest path root leaf.","width":359},{"text":"An empty tree has no root, so this is sort of an indeterminate question in the context of our understanding of heights, so we get to make it anything we want.","width":812},{"text":"Its indeterminate, we can make it anything we want, so we chose something thats convenient, that makes this recurrence work well for us.","width":647},{"text":"Alright any questions about that?","width":97},{"text":"All of that.","width":117},{"text":"Ok uhh lets see.","width":214},{"text":"So it turns out, it turns out we're gonna do this one first and this one second.","width":450},{"text":"It turns out that this is kind of a complex, tends to be a complex argument.","width":757},{"text":"And if instead we equivalently argue this.","width":861}]