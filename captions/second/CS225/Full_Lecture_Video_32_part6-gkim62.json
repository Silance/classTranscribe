[{"text":"Even if, even if uh the thing I'm looking for is not in the table.","width":552},{"text":"Okay.","width":40},{"text":"This one is for successful this one is for unsuccessful.","width":212},{"text":"Okay.","width":40},{"text":"Uhm up there, that same value, we would have to keep our, for that same number of probes, we have to keep our table only half full.","width":707},{"text":"Table only half for example.","width":246},{"text":"Any question about that?","width":160},{"text":"I'm used to having this discussion in the context of that applet.","width":197},{"text":"So I don't pretend this is particularly smooth.","width":271},{"text":"Alright.","width":74},{"text":"Uhh any questions?","width":115},{"text":"Is it good?","width":45},{"text":"So the idea is that this, these, probe based strategies work by, if you don't let your table get too full.","width":562},{"text":"Yeah, Nathan?","width":289},{"text":"No.","width":23},{"text":"That was just, you know, four doesn't seem like too many.","width":181},{"text":"Four's a constant number, seems like it would be quick right?","width":240},{"text":"And I can say to somebody, \"Oh we'll never have to go further than four.\" Okay?","width":400},{"text":"It's a arbitrary choice.","width":108},{"text":"But it turns out, well, I'll save that punchline for a minute.","width":247},{"text":"Alright, any questions about this?","width":117},{"text":"Yes?","width":289},{"text":"So successful is if it's in the table, unsuccessful is if it's not in the table.","width":355},{"text":"So if you're looking for key that is actually there somewhere, versus if you're looking for a key that is not there, that's the only difference, okay?","width":590},{"text":"I, I question, maybe I shouldn't even break them out.","width":183},{"text":"Maybe they should, we should, just look at the unsuccessful numbers.","width":199},{"text":"Alright, any other questions about this, alright, any other questions about this?","width":236},{"text":"The takeaway is that if your table is not, if your table gets full, look how fast those val- those functions go up.","width":428},{"text":"But if your table isn't very full, you're in kind of a good shape for these things.","width":283},{"text":"Alright, so, uhh, let's be a little let's think about this a little bit.","width":447},{"text":"Alright, so, when we were talking about queues, and I, if I asked you, we've got this queue, what do I do if it fills, what do you say?","width":774},{"text":"What's your answer?","width":151},{"text":"What if the array fills?","width":167},{"text":"I should double the array, and copy the data, very good.","width":577},{"text":"Okay, that's what we used to have.","width":370},{"text":"Here's what we have now.","width":77},{"text":"I'm gonna change it up a little bit.","width":167},{"text":"So look, we're not going to let the array fill.","width":402},{"text":"We're only going to let the array get up to some alphabet we control, some load factor that we control.","width":744},{"text":"In practice, the reasonable load factor that is used is approximately two thirds.","width":436},{"text":"K, there's an analytical reason for using this, uhm, load factor but in practice, it's about two thirds.","width":485},{"text":"So.","width":22},{"text":"What if the array becomes more than two thirds full replaces the questions of what happens if the array fills.","width":573},{"text":"What if the array, um, is more than two thirds full?","width":707},{"text":"Alpha greater than two thirds.","width":292},{"text":"Now we don't exactly double the array and copy the data.","width":329},{"text":"We find the first prime greater than twice the array size, find first prime greater than twice array size.","width":1374},{"text":"Because we like prime numbers, but we're not gonna, I'll explain that if you want.","width":349},{"text":"Umm and then, instead of copying the data, we do something a little bit different, okay?","width":402},{"text":"So I wanna do this example, so that we see what we need to do.","width":359},{"text":"So suppose we have hashed our values into this table, and we this hash function, h of k, is a hash of some kind mod table 5, which is 5.","width":1046},{"text":"K?","width":15},{"text":"And we've hashed these three values into it.","width":214},{"text":"And another piece of data comes along.","width":247},{"text":"Now we're going to find the first prime bigger than twice the array size, oh look, there it is, and copy the data in, okay?","width":575},{"text":"So it's just a straight copy.","width":119},{"text":"What's the problem with that?","width":338},{"text":"What is our new hash function look like?","width":421},{"text":"What is the new hash function look like?","width":255},{"text":"It's H 1 of k, mod 11, now.","width":649},{"text":"Which means that you will never get these guys back, we changed the hash function.","width":333},{"text":"So instead of copying the data, so instead of copying the data, we rehash the data with our new hash function.","width":961}]