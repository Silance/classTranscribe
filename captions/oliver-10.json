[{"text":"let's talk about strings today","width":107.18181824684143},{"text":"first of all, these two things are very different","width":153.18181824684143},{"text":"I could have a pointer to \"hello world\"","width":403.18181824684143},{"text":"or I could have an array of characters to \"hello world\"","width":383.18181824684143},{"text":"though both point to an array that points to the first letters","width":454.18181824684143},{"text":"there are noteworthy differences. first of all they have different sizes","width":303.18181824684143},{"text":"let's look at the sizes of each of these, perhaps you can guess what the result is going to be","width":323.18181824684143},{"text":"the size of the pointer is the number of bytes to actually hold the character pointer","width":419.18181824684143},{"text":"because this is a 32-bit machine it is is four bytes","width":168.18181824684143},{"text":"the size of array is the total size required to hold the whole array","width":366.18181824684143},{"text":"whent his code runs it copies the contents of the string literal into the new array object","width":634.1818182468414},{"text":"in this case we need twelve bytes for that, eleven for \"hello world\" and a twelth to hold the null character at the end of the string","width":803.1818182468414},{"text":"the size is different, plus remember that because we've made additional memory on the stack for the array","width":543.1818182468414},{"text":"we can change it to \"jello world\" for example","width":163.18181824684143},{"text":"let's start manipulating our string","width":242.18181824684143},{"text":"we'll do this on our array so we can actually make modifications to it","width":240.18181824684143},{"text":"we will change all of the 'l's to a different letter","width":195.18181824684143},{"text":"pass the beggining of the array","width":256.18181824684143},{"text":"afterwards we'll print out what the array is","width":510.18181824684143},{"text":"I have my function called change and it takes a pointer to that memory","width":859.1818182468414},{"text":"we don't need to return anything because we are going to be using the paramter to point to some memory that we are going to change","width":523.1818182468414},{"text":"what can we do with this?","width":148.18181824684143},{"text":"have a little loop that says while(p) that says while p is not zero","width":477.18181824684143},{"text":"what we actually cares about is if p is pointing to memory that holds zero","width":316.18181824684143},{"text":"in other words, we've reached the end of the string","width":141.18181824684143},{"text":"we want to dereference the pointer with the asterisk","width":290.18181824684143},{"text":"we could change all of the letters","width":429.18181824684143},{"text":"for example we could blank it out","width":173.18181824684143},{"text":"we could say star p equals","width":147.18181824684143},{"text":"and it might be tempting to write an astericks here","width":233.18181824684143},{"text":"but that's not right because the * means I've given the address of the * ","width":583.1818182468414},{"text":"so I'd be writing an * into the address of the *","width":369.18181824684143},{"text":"if I run this I get a few warnings","width":255.18181824684143},{"text":"and it runs forever because my loops runs forever","width":275.18181824684143},{"text":"let me ctrl-c that to break it","width":122.18181824684143},{"text":"this time change the loop so you add one to p every time","width":338.18181824684143},{"text":"now I've got a very strange character because it's taken the lowest eight bits and copied that into my character","width":760.1818182468414},{"text":"instead let's change that to the actual bitwise patter of my character","width":314.18181824684143},{"text":"now I've got something that can get rid of swear words by over writing them with asterisks or perhaps a password or something","width":645.1818182468414},{"text":"but we didn't want to do that for all the characters, we just wanted to do that for the l's","width":208.18181824684143},{"text":"let's see if my p is, at that memory location, an 'l'","width":550.1818182468414},{"text":"because we are working with characters it is ok to compare them with ==","width":583.1818182468414},{"text":"run that","width":255.18181824684143},{"text":"we have a couple of errors here","width":204.18181824684143},{"text":"for starters we're not using pointer","width":176.18181824684143},{"text":"so I can comment out that line","width":134.18181824684143},{"text":"I've got another problem here that change is implicitly declared","width":289.18181824684143},{"text":"that's because we haven't declared what the function signature of change() looks like","width":301.18181824684143},{"text":"let's do that now","width":122.18181824684143},{"text":"I'm saying later on compiler, I expect to actually define a function and I'll give you the actual code to create this change method","width":664.1818182468414},{"text":"but for now here is what it's signature looks like","width":193.18181824684143},{"text":"it's called change, it takes a pointer to a character and it doesn't return anything","width":265.18181824684143},{"text":"if I compile that my warnings should go away","width":204.18181824684143},{"text":"I have a function that can walk through a char*","width":490.18181824684143},{"text":"I could have another function that finds letters as well","width":185.18181824684143},{"text":"suppose we wanted to find the first 'o' in this","width":453.18181824684143},{"text":"I could change this so that rather than changing the letters","width":413.18181824684143},{"text":"if the contents of p is an 'o', let's return p","width":466.18181824684143},{"text":"now I'm going to change my method signature","width":243.18181824684143},{"text":"and I'd better have a return value that returns something if I get to the very end","width":383.18181824684143},{"text":"for example, it returns where p is","width":201.18181824684143},{"text":"we can now update my original code so that it finds the first 'o' and gives you back a pointer to that","width":906.1818182468414},{"text":"if I print that out","width":130.18181824684143},{"text":"hopefully you can guess what my program should do","width":263.18181824684143},{"text":"it gave us back a string and it this time the pointer was half way through \"hello world\"","width":583.1818182468414},{"text":"that's OK, our pointers don't care what they point to","width":238.18181824684143},{"text":"strings continue until the get to the null byte at the end","width":393.18181824684143},{"text":"that's how we were able to print out hello world","width":261.18181824684143},{"text":"bye!","width":63.18181824684143}]