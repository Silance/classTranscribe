[{"start":"0:00","end":"0:10","text":"Hi, so C is designed to be a portable language in a sense that we could write a C compiler for many many different hardware architectures"},{"start":"0:10","end":"0:14","text":"from small embedded machines to large mainframes"},{"start":"0:14","end":"0:19","text":"so C does not specify a precise number of bits required for, say, and integer"},{"start":"0:19","end":"0:26","text":"instead it specifies minimums that should be supported by the architecture"},{"start":"0:26","end":"0:32","text":"let's have a look at that. let's see how we can find out how large or small of numbers we can store in different types"},{"start":"0:32","end":"0:35","text":"and also how many bytes each different type is "},{"start":"0:35","end":"0:37","text":"and even further, what is a byte?"},{"start":"0:37","end":"0:40","text":"so let's start with our integers"},{"start":"0:40","end":"0:48","text":"I could say hello but what's the largest value I can store inside my integer type?"},{"start":"0:48","end":"0:56","text":"fortunately, there's some macros, some constants, defined inside limits dot h"},{"start":"0:56","end":"0:58","text":"let's find out what these are"},{"start":"0:58","end":"1:12","text":"the int min and max is going to be %d and %d and INT_MIN and INT_MAX"},{"start":"1:12","end":"1:16","text":"so, we'll print that out. I'll get rid of my unnecessary variable here"},{"start":"1:16","end":"1:17","text":"let's run that"},{"start":"1:17","end":"1:28","text":"and we see that on this particular machine, that an integer can represent numbers from roughly minus 2 billion to plus 2 billion"},{"start":"1:28","end":"1:30","text":"a very wide range of numbers"},{"start":"1:30","end":"1:37","text":"C promises that we'll be able to store the numbers between minus 32768 and plus 32767"},{"start":"1:37","end":"1:42","text":"in other words, an integer will be at least 16 bits"},{"start":"1:42","end":"1:45","text":"what else do we have? how about a character?"},{"start":"1:45","end":"1:49","text":"well, here's a surprising thing, a character IS one byte"},{"start":"1:49","end":"1:51","text":"so what do we mean by byte?"},{"start":"1:51","end":"1:54","text":"surely we mean 8 bits? no."},{"start":"1:54","end":"1:59","text":"though we often say a byte means 8 bits, it doesn't have to be true"},{"start":"1:59","end":"2:05","text":"and in fact, C is very careful to say that a byte does not mean 8 bits"},{"start":"2:05","end":"2:06","text":"it means at least 8 bits"},{"start":"2:06","end":"2:09","text":"our character, then, is at least 8 bits"},{"start":"2:09","end":"2:11","text":"so why this distinction?"},{"start":"2:11","end":"2:24","text":"well, in being portable, C needs to be able to read and write every bit inside memory and each bit inside each memory should only live inside one addressable memory location"},{"start":"2:24","end":"2:32","text":"and, it could be that architecture have very different numbers of bits it can read or write"},{"start":"2:32","end":"2:39","text":"for example, an early PDP machine had a 36 bit wide addressable memory"},{"start":"2:39","end":"2:45","text":"so, C does not attempt to say it's going to be exactly 8 bits"},{"start":"2:45","end":"2:49","text":"so how do we find out how many bits are actually in a character?"},{"start":"2:49","end":"2:57","text":"well, again, the limits.h include to use for constants here"},{"start":"2:57","end":"2:59","text":"a character is %d bytes"},{"start":"2:59","end":"3:01","text":"let's go and see what that is"},{"start":"3:01","end":"3:02","text":"so CHAR_BITS"},{"start":"3:02","end":"3:04","text":"and we'll print that out"},{"start":"3:04","end":"3:14","text":"on this architecture, a character is 8 bits"},{"start":"3:14","end":"3:16","text":"that's typical on modern machines"},{"start":"3:16","end":"3:22","text":"so what if I wanted to know the actual number of bytes in different types?"},{"start":"3:22","end":"3:25","text":"for that, we have something called sizeof"},{"start":"3:25","end":"3:34","text":"we can give it a type and it will tell us how many bytes (or if you prefer, how many characters) are required to hold that particular kind"},{"start":"3:34","end":"3:38","text":"so for example, let's find out how big an integer is on this machine"},{"start":"3:38","end":"3:40","text":"perhaps you can guess the answer already"},{"start":"3:40","end":"3:49","text":"so, sizeof int is %d and we'll have a newline as well"},{"start":"3:49","end":"4:01","text":"is it any surprise that the size of an integer on this particular machine happens to be 4 bytes"},{"start":"4:01","end":"4:07","text":"and that's not surprising because we need thirty two bits to represent numbers between minus two billion and plus two billion"},{"start":"4:07","end":"4:21","text":"there are other integer types you'll see things like short (which is generally shorter than an int), long (which is generally longer), long long (which is even longer, still)"},{"start":"4:21","end":"4:26","text":"and compilers even occasionally provide their own custom types as well"},{"start":"4:26","end":"4:31","text":"notice as well that these types are signed"},{"start":"4:31","end":"4:36","text":"so we can represent negative numbers and plus numbers"},{"start":"4:36","end":"4:43","text":"C also provides the idea of being able to say that we can have an unsigned version"},{"start":"4:43","end":"4:47","text":"so, for example, we can have an unsigned int"},{"start":"4:47","end":"4:53","text":"now there is no signed bit that is included in the bitwise representation"},{"start":"4:53","end":"5:01","text":"so that's great if you wanted to represent all the numbers between zero and 4 billion on this particular machine"},{"start":"5:01","end":"5:05","text":"the character type can actually be signed or unsigned"},{"start":"5:05","end":"5:10","text":"depending on the particular implementation of the C language on this particular architecture"},{"start":"5:10","end":"5:12","text":"that's enough for now"},{"start":"5:12","end":"5:15","text":"in the next video, we will talk about pointers"},{"start":"5:15","end":"5:20","text":"now it's time for you to play and learn a little bit about the basic C primitives. Bye!"}]