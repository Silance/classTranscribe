[{"start":"0:00","end":"0:05","text":"Hello, suppose we want to actually print out some integer values"},{"start":"0:05","end":"0:09","text":"write() doesn't give us that fuctionality"},{"start":"0:09","end":"0:12","text":"write() is the low level call that we make to the operating system"},{"start":"0:12","end":"0:19","text":"to say \"look, here's a pointer to some memory and please take so many bytes from that memory and send it out to a file\""},{"start":"0:19","end":"0:22","text":"or, possibly, another device"},{"start":"0:22","end":"0:31","text":"if we want to change a bit pattern into a sequence of characters because we want to read, say, one-seven for the value seventeen"},{"start":"0:31","end":"0:33","text":"that's not something that the system does"},{"start":"0:33","end":"0:38","text":"instead, we've got some C standard library calls that we can call"},{"start":"0:38","end":"0:39","text":"that do this for us"},{"start":"0:39","end":"0:42","text":"and they will wrap the call to write()"},{"start":"0:42","end":"0:47","text":"as an example, let's try printing something out"},{"start":"0:47","end":"0:54","text":"we can say \"printf my value is\""},{"start":"0:54","end":"0:57","text":"and I can say \"%d\""},{"start":"0:57","end":"1:02","text":"this means that the next argument I give in printf() better be an integer value"},{"start":"1:02","end":"1:08","text":"so the bit pattern we pass to printf() will be treated as an integer"},{"start":"1:08","end":"1:08","text":"to be displayed"},{"start":"1:08","end":"1:14","text":"so let's have a variable called result"},{"start":"1:14","end":"1:15","text":"and I can say result is sixty five"},{"start":"1:15","end":"1:25","text":"if I attempt to run this, we're using printf(), we haven't declared it beforehand so we get a warning"},{"start":"1:25","end":"1:36","text":"\"oh, you're just using it.\" and, what we should've done is actually declare the function signature of printf()"},{"start":"1:36","end":"1:39","text":"and that I know from looking at the man pages"},{"start":"1:39","end":"1:42","text":"is inside standard IO dot h"},{"start":"1:42","end":"1:46","text":"if you're coming from a cpp background, there's no IO streams"},{"start":"1:46","end":"1:50","text":"we dont have operator overloading. instead, let's use printf()"},{"start":"1:50","end":"1:51","text":"so we've got \"my value is 65\""},{"start":"1:51","end":"1:59","text":"and, you'll see that actually this was printed out after the \"hello hello hello hello"},{"start":"1:59","end":"2:04","text":"here's why: printf() has a buffer. the C libraries have a buffer"},{"start":"2:04","end":"2:09","text":"so it's only going to call write() when that buffer is full"},{"start":"2:09","end":"2:11","text":"or if we explicitly tell it to"},{"start":"2:11","end":"2:12","text":"or if we finish a line"},{"start":"2:12","end":"2:16","text":"so let's put a newline in here and run it again"},{"start":"2:16","end":"2:25","text":"this time, we've compiled it, and we should see that \"my value is 65\" appear before my hellos"},{"start":"2:25","end":"2:32","text":"so this time, because we sent a new line, printf() will be making that call to write()"},{"start":"2:32","end":"2:36","text":"to send its buffer out to standard out"},{"start":"2:36","end":"2:41","text":"so now we can actually print out the value of our file descriptor"},{"start":"2:41","end":"3:03","text":"let's do that. after we've opened our file, I'll send \"fildes is\" and, we will print out fildes."},{"start":"3:03","end":"3:06","text":"and, let's get rid of the first one"},{"start":"3:06","end":"3:12","text":"and let's flush our buffer by sending in a newline"},{"start":"3:12","end":"3:18","text":"and we'll see that our value is three"},{"start":"3:18","end":"3:22","text":"so, we've opened up a file descriptor who's value is three"},{"start":"3:22","end":"3:34","text":"in fact, that expected by specification because if we succesfully open a file, we'll get back the lowest unused integer (the lowest unused file descriptor)"},{"start":"3:34","end":"3:37","text":"as one and two are already being used, we get back three"},{"start":"3:37","end":"3:46","text":"so just for fun, let's actually close one of the existing file descriptors before we do the open()"},{"start":"3:46","end":"3:49","text":"so let's close standard error"},{"start":"3:49","end":"3:53","text":"I'm sorry, we'll close standard out"},{"start":"3:53","end":"4:02","text":"and, we won't close our own file descriptor until the very end of the program here"},{"start":"4:02","end":"4:04","text":"so I'm going to move that line down to here"},{"start":"4:04","end":"4:07","text":"great, so, let's run this"},{"start":"4:07","end":"4:23","text":"so, what did we do? we opened a file descriptor and now if we look at the output of the program, you'll see we're only getting our dots printed out on standard error"},{"start":"4:23","end":"4:24","text":"why is that?"},{"start":"4:24","end":"4:27","text":"what happened to our standard output?"},{"start":"4:27","end":"4:32","text":"well, we better check out file output dot text"},{"start":"4:32","end":"4:37","text":"and we'll see that everything printed to standard out has been sent to our file"},{"start":"4:37","end":"4:51","text":"why? because when we called open(), it gave us back a file descriptor for stream number one. and, that is the. that is where all the standard output is going to go"},{"start":"4:51","end":"4:53","text":"so, all future output is being sent to our file"},{"start":"4:53","end":"4:58","text":"this is a neat way if you'd like to do logging"},{"start":"4:58","end":"5:04","text":"and we've just changed our program so that all future output goes to output dot text"},{"start":"5:04","end":"5:08","text":"now what if we've got a problem with open() ?"},{"start":"5:08","end":"5:10","text":"right now, our code doesn't check for any error"},{"start":"5:10","end":"5:17","text":"and, a better program would actually check the return values of our different calls"},{"start":"5:17","end":"5:25","text":"for example, it could be that open() could fail. suppose, for example, we gave it a bad file descriptor"},{"start":"5:25","end":"5:33","text":"so we can see what's going on, I'm not going to close standard out anymore."},{"start":"5:33","end":"5:36","text":"I'm just going to give it a bad file name"},{"start":"5:36","end":"5:39","text":"now, our program compiles correctly of course"},{"start":"5:39","end":"5:42","text":"but this time our file descriptor is negative one"},{"start":"5:42","end":"5:45","text":"so, we should check that"},{"start":"5:45","end":"5:55","text":"in fact, if we check the man page of open(), it's always a good idea to check the section \"return value\""},{"start":"5:55","end":"5:59","text":"and you'll see, it's specified here that we'll get back a negative one if an error occurred"},{"start":"5:59","end":"6:04","text":"so the last thing we'll do today is let's capture that and quit if we get a bad error"},{"start":"6:04","end":"6:08","text":"so, if fildes equals negative one"},{"start":"6:08","end":"6:14","text":"a common error is to write equals instead of double equals for comparison"},{"start":"6:14","end":"6:15","text":"so, we want to quit here"},{"start":"6:15","end":"6:21","text":"so we'll leave our program, let's exit with a value one"},{"start":"6:21","end":"6:24","text":"to say: \"hey, we couldn't carry on\""},{"start":"6:24","end":"6:30","text":"I could've returned zero but I wanted to show you an alternative way to quit a C program is to call exit"},{"start":"6:30","end":"6:33","text":"and we'll print out an error"},{"start":"6:33","end":"6:42","text":"so, something bad happened while calling open"},{"start":"6:42","end":"6:44","text":"so, we'll use perror()"},{"start":"6:44","end":"6:45","text":"let's run this"},{"start":"6:45","end":"6:57","text":"and, I get some implicit program here that we're calling exit(). I need to find the write #include to call for that."},{"start":"6:57","end":"7:05","text":"but, you'll see on the lefthand side that we've got open() failed, so that's the part of the error message that I supplied"},{"start":"7:05","end":"7:10","text":"followed by a colon followed by no such file or directories"},{"start":"7:10","end":"7:14","text":"so it's complaining that my file name is bad"},{"start":"7:14","end":"7:21","text":"if I had included a dot here, this is also an invalid file name because a single dot corresponds to the current directory"},{"start":"7:21","end":"7:31","text":"and, it's complaining that it can't open that because dot corresponds to a directory"},{"start":"7:31","end":"7:32","text":"so now it's your turn to play. bye!"}]