[{"start":"0:00","end":"0:06","text":"Okay so let's talk about how we can make it easier to create links and destroy them"},{"start":"0:06","end":"0:11","text":"so i've changed my link class a little bit so now each link can have a key and a value"},{"start":"0:11","end":"0:13","text":"in addition to the next pointer"},{"start":"0:13","end":"0:14","text":"the pointer to the next link"},{"start":"0:14","end":"0:18","text":"okay so let's make some methods to create links and destroy them"},{"start":"0:18","end":"0:23","text":"we'll do the create one first"},{"start":"0:23","end":"0:26","text":"so it's going to return a pointer to a link"},{"start":"0:26","end":"0:36","text":"and i might call it say link_create and I'll expect a key and I'll expect a value"},{"start":"0:36","end":"0:40","text":"so that'll give me two pointers"},{"start":"0:40","end":"0:50","text":"if i wish to debug this I could have a printf in here saying hey creating link and I could have what the key and values are for example"},{"start":"0:50","end":"0:54","text":"right so i need to get some memory"},{"start":"0:54","end":"1:01","text":"let's get some memory from the heap because we want our link to last for a long time until we decide to destroy it"},{"start":"1:01","end":"1:10","text":"so i'll say malloc give me some memory and how much well i better ask for how big is my memory structure link_t"},{"start":"1:10","end":"1:16","text":"and i will cast that return type as a pointer to my link objectg"},{"start":"1:16","end":"1:18","text":"why do i do that"},{"start":"1:18","end":"1:21","text":"well i want to be able to reference the sub parts"},{"start":"1:21","end":"1:22","text":"the components of my struct"},{"start":"1:22","end":"1:29","text":"and i will call that say result and i need to initialize my pointer"},{"start":"1:29","end":"1:38","text":"so now i've got that I can set the key to be a key and the value to be the value"},{"start":"1:38","end":"1:45","text":"now when i do this i am copying the pointers i'm not creating new stirngs"},{"start":"1:45","end":"1:52","text":"so in other words i've now got a pointer called key and it's looking at exactly the same string array as the parameter is"},{"start":"1:52","end":"1:56","text":"i haven't made any new string arrays"},{"start":"1:56","end":"1:59","text":"so let's remember that when i return this"},{"start":"1:59","end":"2:03","text":"that those pointers better be valid for the lifetime of the link"},{"start":"2:03","end":"2:19","text":"well that's fine if I knew for example that this will always be used for string constants or I am taking control of those values that I send in and I happen to know that their lifetime is longer than the links lifetime"},{"start":"2:19","end":"2:25","text":"so if that's the case then my code is relatively simple like this"},{"start":"2:25","end":"2:28","text":"and destroying the link is also relatively simple"},{"start":"2:28","end":"2:31","text":"so let's write a link destroy method destroy"},{"start":"2:31","end":"2:36","text":"which takes a pointer to the link that is going to disappear so we can call that just p"},{"start":"2:36","end":"2:39","text":"and what do i need to do in here"},{"start":"2:39","end":"2:42","text":"well i can simply return the memory back"},{"start":"2:42","end":"2:47","text":"okay so this works we could do a little better than this"},{"start":"2:47","end":"2:49","text":"we could actually do some defensive programming here"},{"start":"2:49","end":"2:55","text":"where we also destroy the information inside that link"},{"start":"2:55","end":"2:59","text":"so for that i can use memory set"},{"start":"2:59","end":"3:03","text":"so memset where I give it a pointer that I want to use"},{"start":"3:03","end":"3:08","text":"the value will be zero the number of bytes can be the size of my link"},{"start":"3:08","end":"3:12","text":"so this assures that i don't have any dangling pointers"},{"start":"3:12","end":"3:15","text":"i have destroyed the key and value pointers"},{"start":"3:15","end":"3:19","text":"i've set them back to null and anything else inside my link has been set to null"},{"start":"3:19","end":"3:27","text":"so if someone happens to have a pointer to this link and they try to use the contents straight away then it will fail it will be null"},{"start":"3:27","end":"3:31","text":"and secondly we are freeing it to say okay this memory can now be reused for other purposes"},{"start":"3:31","end":"3:35","text":"so that's my link destroy method"},{"start":"3:35","end":"3:42","text":"now suppose we discover that our strings we don't control the lifetime of these string arrays"},{"start":"3:42","end":"3:45","text":"and that actually we should make copies of them"},{"start":"3:45","end":"3:46","text":"so how can i do that"},{"start":"3:46","end":"3:58","text":"well there's a method called strdup so let's do that strdup and this gives me back a pointer to a new string "},{"start":"3:58","end":"4:01","text":"a new character array that has been created on the heap"},{"start":"4:01","end":"4:07","text":"and it's just a copy of that existing character array that we passed it"},{"start":"4:07","end":"4:09","text":"so let's create our new string arrays and use those"},{"start":"4:09","end":"4:18","text":"if we do that then when I destroy the link I better free up the memory associated with my key and value"},{"start":"4:18","end":"4:24","text":"so before ending here I should free up those pointers"},{"start":"4:24","end":"4:33","text":"so I should call free on my key and free on my value pointer as well"},{"start":"4:33","end":"4:46","text":"okay so there's my code now to start working with a link"},{"start":"4:46","end":"4:52","text":"with my main method I will need to always know the beginning of my linked list"},{"start":"4:52","end":"4:57","text":"so that sounds like a great thing to actually have as a global variable here"},{"start":"4:57","end":"5:02","text":"so let me have my link pointer here and I can call it root"},{"start":"5:02","end":"5:07","text":"and so the first link I make I can initialize root to that"},{"start":"5:07","end":"5:09","text":"to that very first link"},{"start":"5:09","end":"5:16","text":"okay so that's it for now, it's now time for you to play with creating more links"},{"start":"5:16","end":"5:17","text":"bye"}]