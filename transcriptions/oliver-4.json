[{"start":"0:00","end":"0:05","text":"ok suppose we wanted to print out some interger values"},{"start":"0:05","end":"0:09","text":"write() doesn't give us that functionality"},{"start":"0:09","end":"0:13","text":"write() is a low level call that we make to the operating system to say "},{"start":"0:13","end":"0:17","text":"look heres a pointer to some memory and please take so many bytes from that"},{"start":"0:17","end":"0:19","text":"memory and sent it out a file"},{"start":"0:19","end":"0:28","text":"or another device so if we want to change a bit pattern into a sequence of charactetrs"},{"start":"0:28","end":"0:29","text":"because we wanted to read one seven for the value 17"},{"start":"0:29","end":"0:33","text":"that's not something that the system does"},{"start":"0:33","end":"0:38","text":"instead we've got some C standard library calls that we can call"},{"start":"0:38","end":"0:42","text":"that do this for us and they will wrap the call to write()"},{"start":"0:42","end":"0:45","text":"so that's an example"},{"start":"0:45","end":"0:48","text":"let's try printing something out"},{"start":"0:48","end":"0:56","text":"we can say printf() my value is %d "},{"start":"0:56","end":"1:03","text":"this means then that the next arguement I give it better be an interger value"},{"start":"1:03","end":"1:10","text":"the bit pattern we print to pass print() will be treated an integer to be displayed"},{"start":"1:10","end":"1:15","text":"let's have a little variable called result and I can say result is 65"},{"start":"1:15","end":"1:23","text":"and if I attempt to run this we're using printf() but we haven't declared it beforehand"},{"start":"1:23","end":"1:36","text":"so we get a warning to say oh you're just using and what we should have done is actually declare the function signature of printf()"},{"start":"1:36","end":"1:41","text":"and that I know from looking it up on the man pages is inside stdio.h"},{"start":"1:41","end":"1:49","text":"if you're coming from a c++ bakcround the new iostreams, we don't have operator overloading"},{"start":"1:49","end":"1:50","text":"just use printf()"},{"start":"1:50","end":"1:53","text":"so we've got that my value is 65"},{"start":"1:53","end":"1:59","text":"and you'll see that actually this was printed out after the hellox5"},{"start":"1:59","end":"2:07","text":"here's why, printf() has a buffer, the c libraries have a buffer so it's only going to call write() when that buffer is full"},{"start":"2:07","end":"2:11","text":"or if we explictly tell it to or if we finish a line"},{"start":"2:11","end":"2:21","text":"so let's put a new line in here and this time when we've compiled it we should see my value of 65 appear"},{"start":"2:21","end":"2:24","text":"before our hellos"},{"start":"2:24","end":"2:37","text":"so this time because we sent a new line our printf() will be making a call to write() itself to send its buffer out to standard out"},{"start":"2:37","end":"2:42","text":"so now we can actually print out the value of our file descriptor"},{"start":"2:42","end":"2:57","text":"after we've opened up our file i'll send fildes is"},{"start":"2:57","end":"3:03","text":"and we will print out fildes"},{"start":"3:03","end":"3:09","text":"let's get rid of the first one and let's flush our buffer by sending a new line"},{"start":"3:09","end":"3:18","text":"our value is three"},{"start":"3:18","end":"3:22","text":"so we've opened up a file descriptor whos value is three"},{"start":"3:22","end":"3:29","text":"in fact that is expected by specification because if we succesfully open a file "},{"start":"3:29","end":"3:34","text":"we will get back to the lowest unused file descriptor"},{"start":"3:34","end":"3:38","text":"and as one and two are already being used we get back three"},{"start":"3:38","end":"3:44","text":"so just for fun let's actually close one of the existing file descriptors"},{"start":"3:44","end":"3:46","text":"before we do the open"},{"start":"3:46","end":"3:52","text":"let's close standard out "},{"start":"3:52","end":"4:04","text":"we won't close our own file descriptor until the very end of the program"},{"start":"4:04","end":"4:07","text":"so i'm going to move that line down to here"},{"start":"4:07","end":"4:12","text":"what did we do?"},{"start":"4:12","end":"4:23","text":"we opened a file descriptor and now if we look at the output of the program we're only getting our dots printed on standard error"},{"start":"4:23","end":"4:26","text":"why is that? what happened to our standard output?"},{"start":"4:26","end":"4:36","text":"well we'd better check our file output.txt and you'll se that everything we printed to stnadard out has been sent to our file"},{"start":"4:36","end":"4:36","text":"why?"},{"start":"4:36","end":"4:45","text":"because when we callled open it gave us back a file descriptor for string number one"},{"start":"4:45","end":"4:51","text":"and that is where all of the standard output is going to go"},{"start":"4:51","end":"4:55","text":"and so all future output is being sent to our file"},{"start":"4:55","end":"4:58","text":"so this is a neat way if you like to do logging"},{"start":"4:58","end":"5:05","text":"we've just changed our program so that all future output goes to output.txt"},{"start":"5:05","end":"5:08","text":"now what if we've got a problem witho pen()"},{"start":"5:08","end":"5:14","text":"right now our code doesn't check for any errors and a better program would actually check the return values"},{"start":"5:14","end":"5:17","text":"of our different calls"},{"start":"5:17","end":"5:21","text":"for example, it could be that open() could fail"},{"start":"5:21","end":"5:26","text":"suppose we gave it a bad file descriptor"},{"start":"5:26","end":"5:34","text":"now so we can see what's going on, I'm not going to change the standard out anymore"},{"start":"5:34","end":"5:37","text":"I'm just doing to give it a bad file name"},{"start":"5:37","end":"5:43","text":"now our program compiles of course but this time our file descriptor is negative one"},{"start":"5:43","end":"5:45","text":"we should check that"},{"start":"5:45","end":"5:54","text":"in fact if we check the man page of open() it is a good idea to check the section called return value"},{"start":"5:54","end":"5:57","text":"and you'll see that it's specified here that we get back a negative one if an eror occured"},{"start":"5:57","end":"6:04","text":"so the last thing we'll do today is let's capture that and quit if we get a bad erorr"},{"start":"6:04","end":"6:09","text":"so if fildes equals negative one"},{"start":"6:09","end":"6:09","text":"so a common error is to write equals instead of double equals"},{"start":"6:09","end":"6:11","text":"for comparison"},{"start":"6:11","end":"6:16","text":"and we want to quit here"},{"start":"6:16","end":"6:24","text":"so we will leave our program so let's exit() with a value to say we couldn't carry on"},{"start":"6:24","end":"6:30","text":"I could have returned zero but I wanted to show you that an alternative way to exit a c program is to call exit()"},{"start":"6:30","end":"6:33","text":"and we'll print out an error"},{"start":"6:33","end":"6:38","text":"something bad happened whilst calling open()"},{"start":"6:38","end":"6:43","text":"we'll use perror()"},{"start":"6:43","end":"6:53","text":"let's run this and I've got some problems here that we're calling exit()"},{"start":"6:53","end":"6:56","text":"i need to go and find the right include to call for htat"},{"start":"6:56","end":"7:03","text":"but you'll see on the left hand side that we've got open failed"},{"start":"7:03","end":"7:06","text":"that's part of the rror message that I supplied"},{"start":"7:06","end":"7:08","text":"followed by a colon followed by no such file or directory "},{"start":"7:08","end":"7:12","text":"it's complaing that my file name is bad"},{"start":"7:12","end":"7:24","text":"if I had included a dot here this is also an invalid name because a single dot corresponds to the single director"},{"start":"7:24","end":"7:32","text":"and it's complaining that it can't open that because . corresponds to a director"}]