[{"start":"0:00","end":"0:05","text":"so usually we think about our programs as just turning into one single process"},{"start":"0:05","end":"0:08","text":"now i am going to show you some systems programming magic"},{"start":"0:08","end":"0:11","text":"where actually we can turn our single process into two"},{"start":"0:11","end":"0:13","text":"here is how we are going to do it"},{"start":"0:13","end":"0:16","text":"let us have a very simple program that says hello world"},{"start":"0:16","end":"0:19","text":"and here it is"},{"start":"0:19","end":"0:21","text":"so between these two lines however"},{"start":"0:21","end":"0:23","text":"i am going to call fork"},{"start":"0:23","end":"0:29","text":"and here's a surprise"},{"start":"0:29","end":"0:31","text":"we get hello world world"},{"start":"0:31","end":"0:32","text":"yes we get two worlds"},{"start":"0:32","end":"0:34","text":"why is that"},{"start":"0:34","end":"0:37","text":"well at the beginning there was a single process"},{"start":"0:37","end":"0:42","text":"but then we called fork and now our single process is actually being cloned"},{"start":"0:42","end":"0:44","text":"it has been split into two"},{"start":"0:44","end":"0:46","text":"so both the processes print out world"},{"start":"0:46","end":"0:50","text":"and so we see both their output on our little terminal here"},{"start":"0:50","end":"0:52","text":"okay what else can we do with this"},{"start":"0:52","end":"0:56","text":"so let us first of all show that there really are two different processes"},{"start":"0:56","end":"0:59","text":"i am going to look at their processor id"},{"start":"0:59","end":"1:03","text":"and we will print it out"},{"start":"1:03","end":"1:05","text":"so i will call getpid()"},{"start":"1:05","end":"1:10","text":"and you will see that yeah i have got two different processes"},{"start":"1:10","end":"1:12","text":"both trying to run at the same time"},{"start":"1:12","end":"1:16","text":"in fact i have got a parent child relationship here"},{"start":"1:16","end":"1:18","text":"i have got the original process"},{"start":"1:18","end":"1:20","text":"the parent"},{"start":"1:20","end":"1:26","text":"and you can think of fork as saying let us clone this original process right here right now"},{"start":"1:26","end":"1:28","text":"so that i get a child that looks just like me"},{"start":"1:28","end":"1:30","text":"or at least almost like me"},{"start":"1:30","end":"1:32","text":"in many many respects"},{"start":"1:32","end":"1:33","text":"it is the same memory"},{"start":"1:33","end":"1:35","text":"it has got it's own variables"},{"start":"1:35","end":"1:38","text":"but because its got its own address space"},{"start":"1:38","end":"1:44","text":"what the child now does in terms of its memory is seperate from the parents"},{"start":"1:44","end":"1:50","text":"okay so let's show you what we can then do with this"},{"start":"1:50","end":"1:53","text":"first of all fork actually returns something here"},{"start":"1:53","end":"1:55","text":"it actually returns back an id"},{"start":"1:55","end":"1:57","text":"so let's make a note of that"},{"start":"1:57","end":"1:59","text":"and we'll print it out"},{"start":"1:59","end":"2:05","text":"so we'll say %d and we'll print out just here"},{"start":"2:05","end":"2:10","text":"okay so here is what we see"},{"start":"2:10","end":"2:19","text":"that the process id 681 has fork value of 682"},{"start":"2:19","end":"2:24","text":"and process 682 has a fork return value of 0"},{"start":"2:24","end":"2:30","text":"so the fork value is different for the parent and the child"},{"start":"2:30","end":"2:33","text":"and in fact fork"},{"start":"2:33","end":"2:37","text":"if it returns a positive number is talking to the parent"},{"start":"2:37","end":"2:41","text":"and telling the parent here is the id number for your child"},{"start":"2:41","end":"2:44","text":"so let us make a note of that"},{"start":"2:44","end":"2:46","text":"let us call this child"},{"start":"2:46","end":"2:48","text":"here is my child"},{"start":"2:48","end":"2:49","text":"so i can call my child"},{"start":"2:49","end":"2:55","text":"and then i can write an if statement to decide if i am the parent or the newly created child or not"},{"start":"2:55","end":"3:05","text":"so we will say look if the childid what i return from fork is actually greater than 0"},{"start":"3:05","end":"3:07","text":"then i am the parent"},{"start":"3:07","end":"3:13","text":"so let us put something like hey i'm the grouchy parent"},{"start":"3:13","end":"3:29","text":"if it is zero however then hey I'm the carefree child!"},{"start":"3:29","end":"3:34","text":"so we will let's remove this "},{"start":"3:34","end":"3:36","text":"i'll get rid of that line now"},{"start":"3:36","end":"3:42","text":"okay so now we have a little program where the parent and child are going to do two different things"},{"start":"3:42","end":"3:48","text":"and in fact it is standard for the parent to wait for the child to finish"},{"start":"3:48","end":"3:55","text":"we don't have to but quite often we need the child process to do something for us"},{"start":"3:55","end":"3:56","text":"perhaps in the background"},{"start":"3:56","end":"4:01","text":"but we don't actually want to continue until the child has finished"},{"start":"4:01","end":"4:02","text":"so let us do that"},{"start":"4:02","end":"4:07","text":"what i am going to wait for my child to finish"},{"start":"4:07","end":"4:16","text":"so i am going to say waitpid and i need to say okay what is the id i need to wait on well here is the childid"},{"start":"4:16","end":"4:21","text":"and later on i can ask for some status information about my child"},{"start":"4:21","end":"4:24","text":"and for now the last argument i am just going to put as 0"},{"start":"4:24","end":"4:28","text":"so i need to have a variable called status"},{"start":"4:28","end":"4:35","text":"and in fact we are going to pass not just the value of status but the address of our little variable"},{"start":"4:35","end":"4:42","text":"and later on we can use that to find out say did our child exit normally or was it terminated in a surprising way"},{"start":"4:42","end":"4:51","text":"so let us run this now and what we will expect to see is that we'll wait for the child to finish before we print I"},{"start":"4:51","end":"4:54","text":"I'm the grouchy parent"},{"start":"4:54","end":"4:55","text":"so let us run this"},{"start":"4:55","end":"5:04","text":"okay so this time the child process got to print out I'm the carefree child"},{"start":"5:04","end":"5:06","text":"then it exited"},{"start":"5:06","end":"5:12","text":"meanwhile the parent was waiting for the async condition and when that happened"},{"start":"5:12","end":"5:17","text":"the parent is able to continue and is able to print I'm the grouchy parent"},{"start":"5:17","end":"5:27","text":"so i want to finish on a common programming error that can really bring down a server"},{"start":"5:27","end":"5:32","text":"and that is suppose we made many many many processes"},{"start":"5:32","end":"5:37","text":"so it is one thing to create a few"},{"start":"5:37","end":"5:46","text":"let's call say fork a couple of times and perhaps you can guess how many worlds we'll see here"},{"start":"5:46","end":"5:53","text":"that's right we see four world"},{"start":"5:53","end":"6:01","text":"and in fact the parent finished early so this is the hash of the terminal saying what would you like to do now"},{"start":"6:01","end":"6:04","text":"but we had four processes all printing out world"},{"start":"6:04","end":"6:10","text":"and if we had three forks now we have eight"},{"start":"6:10","end":"6:18","text":"okay so let us make something now called a fork bomb which is where we keep creating lots and lots of processes"},{"start":"6:18","end":"6:23","text":"and this often happens by accident by people who are new to systems programming"},{"start":"6:23","end":"6:33","text":"but just for fun because i am just doing this inside a browser it doesn't matter if i bring my little virtual machine to a halt"},{"start":"6:33","end":"6:35","text":"i can always just reload the page"},{"start":"6:35","end":"6:40","text":"so let us print out my id"},{"start":"6:40","end":"6:50","text":"i will put this in a little loop that says while one let us fork"},{"start":"6:50","end":"6:54","text":"let us print out my process id"},{"start":"6:54","end":"6:58","text":"and then i will sleep two seconds"},{"start":"6:58","end":"7:05","text":"so initially i have two processes"},{"start":"7:05","end":"7:07","text":"and then each of those processes call fork"},{"start":"7:07","end":"7:08","text":"so we got four"},{"start":"7:08","end":"7:10","text":"and then each of those processes call fork"},{"start":"7:10","end":"7:13","text":"prints it out and sleeps"},{"start":"7:13","end":"7:18","text":"and so every two seconds i am doubling the number of processes that are in my system"},{"start":"7:18","end":"7:19","text":"so that is a lot of processes"},{"start":"7:19","end":"7:25","text":"and in fact pretty soon the kernel will run out of space"},{"start":"7:25","end":"7:28","text":"it won't be able to keep track of any more processes"},{"start":"7:28","end":"7:29","text":"and fork will stop working"},{"start":"7:29","end":"7:34","text":"and now we see here's the kernel printing out all sorts of debug messages"},{"start":"7:34","end":"7:38","text":"desperately trying to make the system stable again"},{"start":"7:38","end":"7:46","text":"as it arbitrarily starts to kill processes in an attempt to recover some memory and space in its process tables"},{"start":"7:46","end":"7:53","text":"so amazingly my little kernel here has managed to recover to the point to where i have a working system"},{"start":"7:53","end":"7:58","text":"but that is fork bombs and you should avoid from accidentally doing this"},{"start":"7:58","end":"8:05","text":"otherwise you will have a system administrator telling you that you cannot log onto that machine anymore"},{"start":"8:05","end":"8:06","text":"okay have fun and i'll see you in the next video"},{"start":"8:06","end":"8:06","text":"bye"}]