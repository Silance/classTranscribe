[{"start":"0:00","end":"0:04","text":"Hello! Let's talk about automatic variables"},{"start":"0:04","end":"0:08","text":"so here's my main method I've got two function calls f1 f2"},{"start":"0:08","end":"0:12","text":"and today I'm going to actually define them before my main method"},{"start":"0:12","end":"0:16","text":"so I don't need to put in the additional declares in"},{"start":"0:16","end":"0:21","text":"so let's have f1 here and f2...ok"},{"start":"0:21","end":"0:25","text":"so now I've got a syntactically correct program"},{"start":"0:25","end":"0:30","text":"but I want to talk about the variables that we might put inside these"},{"start":"0:30","end":"0:42","text":"so if I create a variable like this to say \"hey I've got a value here, something I need to compute inside f1\" or maybe I want to make an array"},{"start":"0:42","end":"0:47","text":"and here's my array and I can initialize it to, say, \"f1f1\" here we go"},{"start":"0:47","end":"0:55","text":"then the lifetime of my array (this variable) is only for the lifetime of the function"},{"start":"0:55","end":"1:00","text":"when I return from f1, then the variable goes out of scope"},{"start":"1:00","end":"1:03","text":"which means the name \"array\" doesn't mean anything anymore inside our program"},{"start":"1:03","end":"1:09","text":"but secondly, the memory that we were using for the array is automatically free'd up"},{"start":"1:09","end":"1:12","text":"it can be reused for other purposes in a moment by the rest of the program"},{"start":"1:12","end":"1:14","text":"so isn't that fantastic"},{"start":"1:14","end":"1:17","text":"that's why it's called an automatic variable"},{"start":"1:17","end":"1:20","text":"so automatic variables are very easy to use"},{"start":"1:20","end":"1:23","text":"they also come with a big warning sticker and that's this"},{"start":"1:23","end":"1:29","text":"which is to be very wary of just how long they live for"},{"start":"1:29","end":"1:32","text":"let's do a couple of things here"},{"start":"1:32","end":"1:43","text":"first of all, let's make it so that we can actually see the pointer in memory where array is pointing to"},{"start":"1:43","end":"1:47","text":"so, let's print that out inside our function here"},{"start":"1:47","end":"1:53","text":"remember that the name of the array (when converted to address) gives us the very beginning of the array"},{"start":"1:53","end":"1:58","text":"and, we'll do that for our second function too"},{"start":"1:58","end":"2:01","text":"okay, so, f2 f2"},{"start":"2:01","end":"2:04","text":"just to prove that they're making different arrays"},{"start":"2:04","end":"2:06","text":"okay, so we'll compile and run this"},{"start":"2:06","end":"2:21","text":"and, when we run it, we see that both f1 and f2 both these functions the array is actually stored inside the same memory location"},{"start":"2:21","end":"2:23","text":"isn't that fantastic. we didn't need any additional memory"},{"start":"2:23","end":"2:30","text":"and that's because after we return from f1, any of those automatic variables are free'd so they are no longer needed so we can reuse that space"},{"start":"2:30","end":"2:39","text":"internally, later we'll discover that a stack data structure is used to implement his"},{"start":"2:39","end":"2:50","text":"and I can show a little bit of this by having a either a recursive function or we can make another function call these"},{"start":"2:50","end":"2:55","text":"for example, I could have a function called eg"},{"start":"2:55","end":"2:58","text":"and, this calls f1"},{"start":"2:58","end":"3:05","text":"so now let's have a look in the case that I'm not using f2 anymore"},{"start":"3:05","end":"3:07","text":"so that can go away"},{"start":"3:07","end":"3:13","text":"instead, I've got a function called eg and that can say have its own space"},{"start":"3:13","end":"3:22","text":"so, blah and maybe say a thousand and twenty four bytes here"},{"start":"3:22","end":"3:24","text":"and then we call f1 again"},{"start":"3:24","end":"3:26","text":"so let's run this now"},{"start":"3:26","end":"3:43","text":"so, in the output, you'll see that f1 is printed twice and the second time it's because it's being called from our function eg"},{"start":"3:43","end":"3:50","text":"and in this case, it's further down in the stack. it's in lower memory"},{"start":"3:50","end":"3:53","text":"f948 as opposed to fd50"},{"start":"3:53","end":"3:56","text":"because it's being called from eg"},{"start":"3:56","end":"4:00","text":"so, we'll see more about the stack in a moment"},{"start":"4:00","end":"4:05","text":"later on. I just wanted to show you that they really are stored in different places"},{"start":"4:05","end":"4:11","text":"finally, to reinforce this idea, let's make a little recursive function"},{"start":"4:11","end":"4:19","text":"so, I can have something that takes an integer say I'll call it \"level\""},{"start":"4:19","end":"4:29","text":"and if level is greater than zero, let's call ourselves again with a slightly reduced value"},{"start":"4:29","end":"4:34","text":"and I can of course make that simpler by just saying \"if level\""},{"start":"4:34","end":"4:37","text":"so if level is nonzero, then call it again"},{"start":"4:37","end":"4:39","text":"and let's call it with say five"},{"start":"4:39","end":"4:41","text":"okay, a semicolon would help"},{"start":"4:41","end":"4:50","text":"each case as we go deeper and deeper into recursion, our array is getting lower and lower and lower in memory"},{"start":"4:50","end":"4:56","text":"so we have all of these arrays created. all of these different activation records in different places"},{"start":"4:56","end":"5:00","text":"inside our processes's memory"},{"start":"5:00","end":"5:08","text":"so the last point we'll make, which is the most important, which is that it's very dangerous to return pointers to memory that is no longer valid"},{"start":"5:08","end":"5:17","text":"for example, rather than returning nothing, suppose we try to return a pointer to our array"},{"start":"5:17","end":"5:25","text":"and though this code might compile, okay, I can get rid of \"level\" now"},{"start":"5:25","end":"5:36","text":"it's certainly not a valid program because the pointer we get back from f1 now points to stale memory"},{"start":"5:36","end":"5:40","text":"that memory is no longer ours to control"},{"start":"5:40","end":"5:43","text":"it will be used in a moment for other function calls"},{"start":"5:43","end":"5:49","text":"so always be careful if you are returning a pointer to something. make sure that that memory is still valid"},{"start":"5:49","end":"5:52","text":"and never return a pointer to an automatic variable"},{"start":"5:52","end":"5:53","text":"that's it for me. time for you to play. bye!"}]