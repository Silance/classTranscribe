[{"start":"0:00","end":"0:03","text":"Hi, welcome!"},{"start":"0:03","end":"0:06","text":"let's talk about creating more complicated data types in C"},{"start":"0:06","end":"0:11","text":"so far, we've talked about integer and character pointers"},{"start":"0:11","end":"0:11","text":"what if we wanted to make something more complicated like a linked list?"},{"start":"0:11","end":"0:15","text":"for that, we will use a struct"},{"start":"0:15","end":"0:25","text":"so, let's say we've got a struct and we'll say my struct I'll call it say Link"},{"start":"0:25","end":"0:27","text":"and what should we have inside this?"},{"start":"0:27","end":"0:31","text":"well, we've have a value to store and we'll need a pointer to the next link"},{"start":"0:31","end":"0:34","text":"we'll need to know where the next link is in memory"},{"start":"0:34","end":"0:37","text":"so, we can say struct Link and it's a pointer to that"},{"start":"0:37","end":"0:41","text":"so, don't forget the asterisk"},{"start":"0:41","end":"0:43","text":"so that's our little struct here. a semicolon is required at the end"},{"start":"0:43","end":"0:51","text":"but it's kind of painful to keep saying \"struct Link\" every time I want to refer to this type"},{"start":"0:51","end":"0:55","text":"so I can have a link here called \"one\" for example"},{"start":"0:55","end":"0:59","text":"so quite often, we can use, or you'll find that people use \"typedef\""},{"start":"0:59","end":"1:05","text":"to say \"here's an alias\" and I can use typedef with any kind of type"},{"start":"1:05","end":"1:07","text":"I can even use it with integers"},{"start":"1:07","end":"1:10","text":"for example, I can say typedef number"},{"start":"1:10","end":"1:14","text":"now I can say \"number x\" instead of \"int x\""},{"start":"1:14","end":"1:19","text":"but today we're going to use typedef for our link"},{"start":"1:19","end":"1:25","text":"so we'll say instead of having to write struct Link, I'll call this my link type"},{"start":"1:25","end":"1:29","text":"so now I've got my link_t, I can make a link"},{"start":"1:29","end":"1:30","text":"here's one"},{"start":"1:30","end":"1:38","text":"and if I declare variables like this, outside of my functions, then they live forever"},{"start":"1:38","end":"1:43","text":"and, let me write my main method here"},{"start":"1:43","end":"1:51","text":"so, my link called \"one\" and my value live forever"},{"start":"1:51","end":"1:54","text":"and in fact, they're initialized"},{"start":"1:54","end":"1:57","text":"so their bitwise pattern is just all zeros"},{"start":"1:57","end":"2:07","text":"so in other words, my value is zero and the link \"one\" will have a value of zero and it's next pointer will have a value of zero as well"},{"start":"2:07","end":"2:14","text":"if we wanted to change that, then we could say one.value equals fourty two"},{"start":"2:14","end":"2:15","text":"and one.next equals well, where should we put it?"},{"start":"2:15","end":"2:18","text":"well where should we send it next?"},{"start":"2:18","end":"2:28","text":"we could say \"NULL\" if we wish to use NULL, actually we have to #include<stdlib.h>"},{"start":"2:28","end":"2:31","text":"to have NULL defined"},{"start":"2:31","end":"2:37","text":"and now our Link says \"I'm the last thing. there's no one after me\""},{"start":"2:37","end":"2:43","text":"if we wanted to be particularly crazy, we can make the next pointer point to the very same link"},{"start":"2:43","end":"2:48","text":"we do that by saying \"one\" except we don't want \"one\" we want the address of \"one\""},{"start":"2:48","end":"2:51","text":"we need a pointer to \"one\""},{"start":"2:51","end":"2:54","text":"so how do I do that? I use ampersand to say \"give me the address\" of this"},{"start":"2:54","end":"2:56","text":"so that gives me a pointer to a link"},{"start":"2:56","end":"2:58","text":"well thats great if we only need one link"},{"start":"2:58","end":"3:00","text":"but that's not much of a linked list"},{"start":"3:00","end":"3:03","text":"let's actually work out then how we can actually make a whole load of links"},{"start":"3:03","end":"3:07","text":"for that, we'll use some heap memory"},{"start":"3:07","end":"3:12","text":"and I'm going to use malloc which is also declared inside stdlib.h"},{"start":"3:12","end":"3:13","text":"so, I need some memory"},{"start":"3:13","end":"3:16","text":"how many bytes do I need?"},{"start":"3:16","end":"3:18","text":"for that, I can say: \"give me the size of my link structure\""},{"start":"3:18","end":"3:21","text":"in other words, give me the size of link_t"},{"start":"3:21","end":"3:26","text":"be careful you don't put an asterisk here otherwise, you'll only be reserving enough bytes for a pointer"},{"start":"3:26","end":"3:29","text":"in other words, 4 bytes or so"},{"start":"3:29","end":"3:29","text":"that's not enough for what we need"},{"start":"3:29","end":"3:33","text":"we need the size of our whole struct"},{"start":"3:33","end":"3:42","text":"that gives me back a pointer and I actually want to cast it so that it's type pointer to a link_t"},{"start":"3:42","end":"3:46","text":"so I can now store that inside a variable"},{"start":"3:46","end":"3:48","text":"and I can have it as my first pointer"},{"start":"3:48","end":"3:55","text":"so, malloc does not initialize the actual memory. it just simply reserves it for us"},{"start":"3:55","end":"3:57","text":"just allocates it for us."},{"start":"3:57","end":"4:02","text":"we better make sure that our Link is properly initialized"},{"start":"4:02","end":"4:06","text":"for our first Link, I want to set its value to something"},{"start":"4:06","end":"4:10","text":"and I need to set its \"next\" pointer to something"},{"start":"4:10","end":"4:12","text":"so for example, I can set it to NULL"},{"start":"4:12","end":"4:17","text":"or if I, oops, let me change that to put a one"},{"start":"4:17","end":"4:20","text":"or if I wanted to make it point to itself, I can say \"ptr1\""},{"start":"4:20","end":"4:24","text":"if I had two links, let's do that"},{"start":"4:24","end":"4:36","text":"then I can again set up the values. be very careful copy and pasting code that you've actually edited it correctly"},{"start":"4:36","end":"4:44","text":"I can now make my first link ptr1 its next point to next ptr"},{"start":"4:44","end":"4:47","text":"and the next link, its next pointer can go nowhere"},{"start":"4:47","end":"4:51","text":"so, there's my simple linked list"},{"start":"4:51","end":"4:55","text":"more complicated links might have a previous pointer as well"},{"start":"4:55","end":"5:04","text":"so you can navigate both in the forwards and backwards direction throughout the linked list"},{"start":"5:04","end":"5:09","text":"okay, so, let's now finally compile this and check that it works"},{"start":"5:09","end":"5:22","text":"our program compiles correctly, but to be a well-behaved program, really we should free up the memory as well"},{"start":"5:22","end":"5:30","text":"so don't forget for every malloc you do, we should responsible for freeing up that memory once and once only"},{"start":"5:30","end":"5:35","text":"so free(ptr1) and free(ptr2)"},{"start":"5:35","end":"5:42","text":"also, a more robust version of this program would check that malloc actually succeeded"},{"start":"5:42","end":"5:43","text":"that we actually really got the bytes"},{"start":"5:43","end":"5:48","text":"that would be something important to do if your program ran for a very long time"},{"start":"5:48","end":"5:54","text":"or needed very large unknown amounts of memory"},{"start":"5:54","end":"5:56","text":"so that's how we make linked lists in C"},{"start":"5:56","end":"5:58","text":"now it's time for you to play. bye!"}]